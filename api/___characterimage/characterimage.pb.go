// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: characterimage/characterimage.proto

package characterimage

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PropType describes the type of prop.
type PropType int32

const (
	PropType_WEAPON_MELEE_1H PropType = 0
	PropType_WEAPON_MELEE_2H PropType = 1
	PropType_WEAPON_RANGE_1H PropType = 2
	PropType_WEAPON_RANGE_2H PropType = 3
)

// Enum value maps for PropType.
var (
	PropType_name = map[int32]string{
		0: "WEAPON_MELEE_1H",
		1: "WEAPON_MELEE_2H",
		2: "WEAPON_RANGE_1H",
		3: "WEAPON_RANGE_2H",
	}
	PropType_value = map[string]int32{
		"WEAPON_MELEE_1H": 0,
		"WEAPON_MELEE_2H": 1,
		"WEAPON_RANGE_1H": 2,
		"WEAPON_RANGE_2H": 3,
	}
)

func (x PropType) Enum() *PropType {
	p := new(PropType)
	*p = x
	return p
}

func (x PropType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropType) Descriptor() protoreflect.EnumDescriptor {
	return file_characterimage_characterimage_proto_enumTypes[0].Descriptor()
}

func (PropType) Type() protoreflect.EnumType {
	return &file_characterimage_characterimage_proto_enumTypes[0]
}

func (x PropType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropType.Descriptor instead.
func (PropType) EnumDescriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{0}
}

// StaticPartType describes the type of the part. These are non-transforming, stationary (or x/y
// mobile) parts.
type StaticPartType int32

const (
	StaticPartType_BODY           StaticPartType = 0
	StaticPartType_HEAD           StaticPartType = 1
	StaticPartType_HAIR           StaticPartType = 2
	StaticPartType_EYES           StaticPartType = 3
	StaticPartType_ACCESSORY_HEAD StaticPartType = 4
)

// Enum value maps for StaticPartType.
var (
	StaticPartType_name = map[int32]string{
		0: "BODY",
		1: "HEAD",
		2: "HAIR",
		3: "EYES",
		4: "ACCESSORY_HEAD",
	}
	StaticPartType_value = map[string]int32{
		"BODY":           0,
		"HEAD":           1,
		"HAIR":           2,
		"EYES":           3,
		"ACCESSORY_HEAD": 4,
	}
)

func (x StaticPartType) Enum() *StaticPartType {
	p := new(StaticPartType)
	*p = x
	return p
}

func (x StaticPartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticPartType) Descriptor() protoreflect.EnumDescriptor {
	return file_characterimage_characterimage_proto_enumTypes[1].Descriptor()
}

func (StaticPartType) Type() protoreflect.EnumType {
	return &file_characterimage_characterimage_proto_enumTypes[1]
}

func (x StaticPartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticPartType.Descriptor instead.
func (StaticPartType) EnumDescriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{1}
}

// DynamicPartType describes the type of the part. These are moving, transforming parts.
type DynamicPartType int32

const (
	DynamicPartType_LEFT_LEG  DynamicPartType = 0
	DynamicPartType_RIGHT_LEG DynamicPartType = 1
	DynamicPartType_LEFT_ARM  DynamicPartType = 2
	DynamicPartType_RIGHT_ARM DynamicPartType = 3
)

// Enum value maps for DynamicPartType.
var (
	DynamicPartType_name = map[int32]string{
		0: "LEFT_LEG",
		1: "RIGHT_LEG",
		2: "LEFT_ARM",
		3: "RIGHT_ARM",
	}
	DynamicPartType_value = map[string]int32{
		"LEFT_LEG":  0,
		"RIGHT_LEG": 1,
		"LEFT_ARM":  2,
		"RIGHT_ARM": 3,
	}
)

func (x DynamicPartType) Enum() *DynamicPartType {
	p := new(DynamicPartType)
	*p = x
	return p
}

func (x DynamicPartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicPartType) Descriptor() protoreflect.EnumDescriptor {
	return file_characterimage_characterimage_proto_enumTypes[2].Descriptor()
}

func (DynamicPartType) Type() protoreflect.EnumType {
	return &file_characterimage_characterimage_proto_enumTypes[2]
}

func (x DynamicPartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicPartType.Descriptor instead.
func (DynamicPartType) EnumDescriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{2}
}

// ExpressionType describes the expression for a character. This is defined per-animation-frame.
type ExpressionType int32

const (
	ExpressionType_NEUTRAL ExpressionType = 0
)

// Enum value maps for ExpressionType.
var (
	ExpressionType_name = map[int32]string{
		0: "NEUTRAL",
	}
	ExpressionType_value = map[string]int32{
		"NEUTRAL": 0,
	}
)

func (x ExpressionType) Enum() *ExpressionType {
	p := new(ExpressionType)
	*p = x
	return p
}

func (x ExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_characterimage_characterimage_proto_enumTypes[3].Descriptor()
}

func (ExpressionType) Type() protoreflect.EnumType {
	return &file_characterimage_characterimage_proto_enumTypes[3]
}

func (x ExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpressionType.Descriptor instead.
func (ExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{3}
}

// Coordinates refers to basic image relational coordinates. These are assumed to be within the
// 32-bit plane.
type Coordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Coordinates) Reset() {
	*x = Coordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinates) ProtoMessage() {}

func (x *Coordinates) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinates.ProtoReflect.Descriptor instead.
func (*Coordinates) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinates) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coordinates) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Positioning describes the position and rotation of a given item.
type Positioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinates *Coordinates `protobuf:"bytes,1,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// rotation is the circular rotation for a given object.
	Rotation uint32 `protobuf:"varint,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *Positioning) Reset() {
	*x = Positioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Positioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Positioning) ProtoMessage() {}

func (x *Positioning) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Positioning.ProtoReflect.Descriptor instead.
func (*Positioning) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{1}
}

func (x *Positioning) GetCoordinates() *Coordinates {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Positioning) GetRotation() uint32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

// Animation describes the information required to render a given character.
type Animation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// displayName is the name that will be rendered to the user. This is also used for any alt-text.
	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// bodyTypeIdentifier is the id for the body type that this animation should be used with.
	BodyTypeIdentifier string `protobuf:"bytes,2,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	// allowed is the list of types of props that are enabled with this animation.
	Allowed []PropType `protobuf:"varint,3,rep,packed,name=allowed,proto3,enum=lantspants.lootloadout.characterimage.PropType" json:"allowed,omitempty"`
	// frames is the set of frames used to animate.
	Frames []*Animation_Frame `protobuf:"bytes,4,rep,name=frames,proto3" json:"frames,omitempty"`
}

func (x *Animation) Reset() {
	*x = Animation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Animation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animation) ProtoMessage() {}

func (x *Animation) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animation.ProtoReflect.Descriptor instead.
func (*Animation) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{2}
}

func (x *Animation) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Animation) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *Animation) GetAllowed() []PropType {
	if x != nil {
		return x.Allowed
	}
	return nil
}

func (x *Animation) GetFrames() []*Animation_Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

// BodyType describes the type of body that serves as the base template.
type BodyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// displayName is the name that will be rendered to the user. This is also used for any alt-text.
	DisplayName string `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// partMaps is a series of images that define the placement and color of any dynamic parts
	// associated with this body. These are our 'lookup' maps. The color of each pixel in each image
	// gives us positional data to refer to the color map created using a CreateDynamicPart request.
	//
	// Note: the keys must be able to be evaluated to DynamicPartType.
	PartMaps map[string][]byte `protobuf:"bytes,2,rep,name=partMaps,proto3" json:"partMaps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BodyType) Reset() {
	*x = BodyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyType) ProtoMessage() {}

func (x *BodyType) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyType.ProtoReflect.Descriptor instead.
func (*BodyType) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{3}
}

func (x *BodyType) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *BodyType) GetPartMaps() map[string][]byte {
	if x != nil {
		return x.PartMaps
	}
	return nil
}

type DynamicPartMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BodyTypeIdentifier string          `protobuf:"bytes,1,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	Type               DynamicPartType `protobuf:"varint,2,opt,name=type,proto3,enum=lantspants.lootloadout.characterimage.DynamicPartType" json:"type,omitempty"`
	Image              []byte          `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DynamicPartMapping) Reset() {
	*x = DynamicPartMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPartMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPartMapping) ProtoMessage() {}

func (x *DynamicPartMapping) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPartMapping.ProtoReflect.Descriptor instead.
func (*DynamicPartMapping) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{4}
}

func (x *DynamicPartMapping) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *DynamicPartMapping) GetType() DynamicPartType {
	if x != nil {
		return x.Type
	}
	return DynamicPartType_LEFT_LEG
}

func (x *DynamicPartMapping) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

// StaticPart describes a body part that does not change other than rotation or simple x/y movement.
type StaticPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// displayName is the name that will be rendered to the user. This is also used for any alt-text.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// bodyTypeIdentifier is the id for the body type that this animation should be used with.
	BodyTypeIdentifier string `protobuf:"bytes,3,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	// type is the type of the body part that this represents.
	Type StaticPartType `protobuf:"varint,4,opt,name=type,proto3,enum=lantspants.lootloadout.characterimage.StaticPartType" json:"type,omitempty"`
	// image describes the bytes for the image (this is in .png format).
	Image []byte `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	// anchor gives us the base x/y position for this part. The Animation type uses this coordinate to
	// determine where to place the related static part in each frame.
	Anchor *Coordinates `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *StaticPart) Reset() {
	*x = StaticPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticPart) ProtoMessage() {}

func (x *StaticPart) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticPart.ProtoReflect.Descriptor instead.
func (*StaticPart) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{5}
}

func (x *StaticPart) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *StaticPart) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *StaticPart) GetType() StaticPartType {
	if x != nil {
		return x.Type
	}
	return StaticPartType_BODY
}

func (x *StaticPart) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *StaticPart) GetAnchor() *Coordinates {
	if x != nil {
		return x.Anchor
	}
	return nil
}

// DynamicPart describes a body part that moves or transforms, and can be rendered in a pseudo-3D
// space.
type DynamicPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// displayName is the name that will be rendered to the user. This is also used for any alt-text.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// bodyTypeIdentifier is the id for the body type that this animation should be used with.
	BodyTypeIdentifier string `protobuf:"bytes,3,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	// type is the type of the body part that this represents.
	Type DynamicPartType `protobuf:"varint,4,opt,name=type,proto3,enum=lantspants.lootloadout.characterimage.DynamicPartType" json:"type,omitempty"`
	// image describes the bytes for the image (this is in .png format).
	Image []byte `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DynamicPart) Reset() {
	*x = DynamicPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPart) ProtoMessage() {}

func (x *DynamicPart) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPart.ProtoReflect.Descriptor instead.
func (*DynamicPart) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{6}
}

func (x *DynamicPart) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DynamicPart) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *DynamicPart) GetType() DynamicPartType {
	if x != nil {
		return x.Type
	}
	return DynamicPartType_LEFT_LEG
}

func (x *DynamicPart) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

// Prop describes an item that a character will interact with. This is intended to be used heavily
// with any given animation.
type Prop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// displayName is the name that will be rendered to the user. This is also used for any alt-text.
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// type describes the type of prop that this represents.
	Type PropType `protobuf:"varint,3,opt,name=type,proto3,enum=lantspants.lootloadout.characterimage.PropType" json:"type,omitempty"`
	// image describes the bytes for the image (this is in .png format).
	Image []byte `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	// anchor gives us the base x/y position for this prop. The Animation type uses this coordinate to
	// determine where to place the related prop in each frame.
	Anchor *Coordinates `protobuf:"bytes,5,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Prop) Reset() {
	*x = Prop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prop) ProtoMessage() {}

func (x *Prop) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prop.ProtoReflect.Descriptor instead.
func (*Prop) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{7}
}

func (x *Prop) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Prop) GetType() PropType {
	if x != nil {
		return x.Type
	}
	return PropType_WEAPON_MELEE_1H
}

func (x *Prop) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Prop) GetAnchor() *Coordinates {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type CreateBodyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// body is the data required to create a new body.
	Body *BodyType `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CreateBodyTypeRequest) Reset() {
	*x = CreateBodyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBodyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBodyTypeRequest) ProtoMessage() {}

func (x *CreateBodyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBodyTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateBodyTypeRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{8}
}

func (x *CreateBodyTypeRequest) GetBody() *BodyType {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateBodyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created body type.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBodyTypeResponse) Reset() {
	*x = CreateBodyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBodyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBodyTypeResponse) ProtoMessage() {}

func (x *CreateBodyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBodyTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateBodyTypeResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBodyTypeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBodyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBodyTypeRequest) Reset() {
	*x = GetBodyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBodyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBodyTypeRequest) ProtoMessage() {}

func (x *GetBodyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBodyTypeRequest.ProtoReflect.Descriptor instead.
func (*GetBodyTypeRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{10}
}

func (x *GetBodyTypeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetBodyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *BodyType `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GetBodyTypeResponse) Reset() {
	*x = GetBodyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBodyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBodyTypeResponse) ProtoMessage() {}

func (x *GetBodyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBodyTypeResponse.ProtoReflect.Descriptor instead.
func (*GetBodyTypeResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{11}
}

func (x *GetBodyTypeResponse) GetBody() *BodyType {
	if x != nil {
		return x.Body
	}
	return nil
}

type CreateDynamicPartMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicPartMapping *DynamicPartMapping `protobuf:"bytes,1,opt,name=dynamicPartMapping,proto3" json:"dynamicPartMapping,omitempty"`
}

func (x *CreateDynamicPartMappingRequest) Reset() {
	*x = CreateDynamicPartMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDynamicPartMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDynamicPartMappingRequest) ProtoMessage() {}

func (x *CreateDynamicPartMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDynamicPartMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateDynamicPartMappingRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDynamicPartMappingRequest) GetDynamicPartMapping() *DynamicPartMapping {
	if x != nil {
		return x.DynamicPartMapping
	}
	return nil
}

type CreateDynamicPartMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDynamicPartMappingResponse) Reset() {
	*x = CreateDynamicPartMappingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDynamicPartMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDynamicPartMappingResponse) ProtoMessage() {}

func (x *CreateDynamicPartMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDynamicPartMappingResponse.ProtoReflect.Descriptor instead.
func (*CreateDynamicPartMappingResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDynamicPartMappingResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateStaticPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staticPart is the data required to create a new static part.
	StaticPart *StaticPart `protobuf:"bytes,1,opt,name=staticPart,proto3" json:"staticPart,omitempty"`
}

func (x *CreateStaticPartRequest) Reset() {
	*x = CreateStaticPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStaticPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticPartRequest) ProtoMessage() {}

func (x *CreateStaticPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticPartRequest.ProtoReflect.Descriptor instead.
func (*CreateStaticPartRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{14}
}

func (x *CreateStaticPartRequest) GetStaticPart() *StaticPart {
	if x != nil {
		return x.StaticPart
	}
	return nil
}

type CreateStaticPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created static part.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateStaticPartResponse) Reset() {
	*x = CreateStaticPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStaticPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStaticPartResponse) ProtoMessage() {}

func (x *CreateStaticPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStaticPartResponse.ProtoReflect.Descriptor instead.
func (*CreateStaticPartResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{15}
}

func (x *CreateStaticPartResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateDynamicPartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dynamicPart is the data required to create a new dynamic part.
	DynamicPart *DynamicPart `protobuf:"bytes,1,opt,name=dynamicPart,proto3" json:"dynamicPart,omitempty"`
}

func (x *CreateDynamicPartRequest) Reset() {
	*x = CreateDynamicPartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDynamicPartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDynamicPartRequest) ProtoMessage() {}

func (x *CreateDynamicPartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDynamicPartRequest.ProtoReflect.Descriptor instead.
func (*CreateDynamicPartRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDynamicPartRequest) GetDynamicPart() *DynamicPart {
	if x != nil {
		return x.DynamicPart
	}
	return nil
}

type CreateDynamicPartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created dynamic part.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDynamicPartResponse) Reset() {
	*x = CreateDynamicPartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDynamicPartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDynamicPartResponse) ProtoMessage() {}

func (x *CreateDynamicPartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDynamicPartResponse.ProtoReflect.Descriptor instead.
func (*CreateDynamicPartResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDynamicPartResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreatePropRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// prop is the data required to create a new prop.
	Prop *Prop `protobuf:"bytes,1,opt,name=prop,proto3" json:"prop,omitempty"`
}

func (x *CreatePropRequest) Reset() {
	*x = CreatePropRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropRequest) ProtoMessage() {}

func (x *CreatePropRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropRequest.ProtoReflect.Descriptor instead.
func (*CreatePropRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{18}
}

func (x *CreatePropRequest) GetProp() *Prop {
	if x != nil {
		return x.Prop
	}
	return nil
}

type CreatePropResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created prop.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePropResponse) Reset() {
	*x = CreatePropResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePropResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePropResponse) ProtoMessage() {}

func (x *CreatePropResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePropResponse.ProtoReflect.Descriptor instead.
func (*CreatePropResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePropResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateAnimationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// animation is the data required to create a new animation.
	Animation *Animation `protobuf:"bytes,1,opt,name=animation,proto3" json:"animation,omitempty"`
}

func (x *CreateAnimationRequest) Reset() {
	*x = CreateAnimationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnimationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnimationRequest) ProtoMessage() {}

func (x *CreateAnimationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnimationRequest.ProtoReflect.Descriptor instead.
func (*CreateAnimationRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{20}
}

func (x *CreateAnimationRequest) GetAnimation() *Animation {
	if x != nil {
		return x.Animation
	}
	return nil
}

type CreateAnimationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created animation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateAnimationResponse) Reset() {
	*x = CreateAnimationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnimationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnimationResponse) ProtoMessage() {}

func (x *CreateAnimationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnimationResponse.ProtoReflect.Descriptor instead.
func (*CreateAnimationResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{21}
}

func (x *CreateAnimationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SaveAnimationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// animationIdentifier is the ID for the animation that will be used to render the output.
	AnimationIdentifier string `protobuf:"bytes,1,opt,name=animationIdentifier,proto3" json:"animationIdentifier,omitempty"`
	// dynamicIdentifiers is a mapping of required dynamic types to their given identifiers.
	//
	// Note: the keys must be able to be evaluated to DynamicPartType.
	DynamicIdentifiers map[string]string `protobuf:"bytes,2,rep,name=dynamicIdentifiers,proto3" json:"dynamicIdentifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// staticIdentifiers is a mapping of required static types to their given identifiers.
	//
	// Note: the keys must be able to be evaluated to StaticPartType.
	StaticIdentifiers map[string]string `protobuf:"bytes,3,rep,name=staticIdentifiers,proto3" json:"staticIdentifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// propIdentifier is the ID for a given prop to render within an animation.
	PropIdentifier string `protobuf:"bytes,4,opt,name=propIdentifier,proto3" json:"propIdentifier,omitempty"`
}

func (x *SaveAnimationRequest) Reset() {
	*x = SaveAnimationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAnimationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAnimationRequest) ProtoMessage() {}

func (x *SaveAnimationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAnimationRequest.ProtoReflect.Descriptor instead.
func (*SaveAnimationRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{22}
}

func (x *SaveAnimationRequest) GetAnimationIdentifier() string {
	if x != nil {
		return x.AnimationIdentifier
	}
	return ""
}

func (x *SaveAnimationRequest) GetDynamicIdentifiers() map[string]string {
	if x != nil {
		return x.DynamicIdentifiers
	}
	return nil
}

func (x *SaveAnimationRequest) GetStaticIdentifiers() map[string]string {
	if x != nil {
		return x.StaticIdentifiers
	}
	return nil
}

func (x *SaveAnimationRequest) GetPropIdentifier() string {
	if x != nil {
		return x.PropIdentifier
	}
	return ""
}

type SaveAnimationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id is the identifier of the newly-created animation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SaveAnimationResponse) Reset() {
	*x = SaveAnimationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveAnimationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveAnimationResponse) ProtoMessage() {}

func (x *SaveAnimationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveAnimationResponse.ProtoReflect.Descriptor instead.
func (*SaveAnimationResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{23}
}

func (x *SaveAnimationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListAnimationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bodyTypeIdentifier is the ID for the body type to list items for.
	BodyTypeIdentifier string `protobuf:"bytes,1,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
}

func (x *ListAnimationsRequest) Reset() {
	*x = ListAnimationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationsRequest) ProtoMessage() {}

func (x *ListAnimationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationsRequest.ProtoReflect.Descriptor instead.
func (*ListAnimationsRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{24}
}

func (x *ListAnimationsRequest) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

type ListAnimationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Animations map[string]*Animation `protobuf:"bytes,1,rep,name=animations,proto3" json:"animations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListAnimationsResponse) Reset() {
	*x = ListAnimationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnimationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnimationsResponse) ProtoMessage() {}

func (x *ListAnimationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnimationsResponse.ProtoReflect.Descriptor instead.
func (*ListAnimationsResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{25}
}

func (x *ListAnimationsResponse) GetAnimations() map[string]*Animation {
	if x != nil {
		return x.Animations
	}
	return nil
}

type ListBodyTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListBodyTypesRequest) Reset() {
	*x = ListBodyTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBodyTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBodyTypesRequest) ProtoMessage() {}

func (x *ListBodyTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBodyTypesRequest.ProtoReflect.Descriptor instead.
func (*ListBodyTypesRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{26}
}

type ListBodyTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types map[string]*BodyType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListBodyTypesResponse) Reset() {
	*x = ListBodyTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBodyTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBodyTypesResponse) ProtoMessage() {}

func (x *ListBodyTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBodyTypesResponse.ProtoReflect.Descriptor instead.
func (*ListBodyTypesResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{27}
}

func (x *ListBodyTypesResponse) GetTypes() map[string]*BodyType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListStaticPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bodyTypeIdentifier is the ID for the body type to list items for.
	BodyTypeIdentifier string `protobuf:"bytes,1,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	// types, if provided, filters the results of the items that are returned.
	Types []StaticPartType `protobuf:"varint,2,rep,packed,name=types,proto3,enum=lantspants.lootloadout.characterimage.StaticPartType" json:"types,omitempty"`
}

func (x *ListStaticPartsRequest) Reset() {
	*x = ListStaticPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaticPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaticPartsRequest) ProtoMessage() {}

func (x *ListStaticPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaticPartsRequest.ProtoReflect.Descriptor instead.
func (*ListStaticPartsRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{28}
}

func (x *ListStaticPartsRequest) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *ListStaticPartsRequest) GetTypes() []StaticPartType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListStaticPartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts map[string]*StaticPart `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListStaticPartsResponse) Reset() {
	*x = ListStaticPartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStaticPartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStaticPartsResponse) ProtoMessage() {}

func (x *ListStaticPartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStaticPartsResponse.ProtoReflect.Descriptor instead.
func (*ListStaticPartsResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{29}
}

func (x *ListStaticPartsResponse) GetParts() map[string]*StaticPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ListDynamicPartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bodyTypeIdentifier is the ID for the body type to list items for.
	BodyTypeIdentifier string `protobuf:"bytes,1,opt,name=bodyTypeIdentifier,proto3" json:"bodyTypeIdentifier,omitempty"`
	// types, if provided, filters the results of the items that are returned.
	Types []DynamicPartType `protobuf:"varint,2,rep,packed,name=types,proto3,enum=lantspants.lootloadout.characterimage.DynamicPartType" json:"types,omitempty"`
}

func (x *ListDynamicPartsRequest) Reset() {
	*x = ListDynamicPartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDynamicPartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDynamicPartsRequest) ProtoMessage() {}

func (x *ListDynamicPartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDynamicPartsRequest.ProtoReflect.Descriptor instead.
func (*ListDynamicPartsRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{30}
}

func (x *ListDynamicPartsRequest) GetBodyTypeIdentifier() string {
	if x != nil {
		return x.BodyTypeIdentifier
	}
	return ""
}

func (x *ListDynamicPartsRequest) GetTypes() []DynamicPartType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListDynamicPartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts map[string]*DynamicPart `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListDynamicPartsResponse) Reset() {
	*x = ListDynamicPartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDynamicPartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDynamicPartsResponse) ProtoMessage() {}

func (x *ListDynamicPartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDynamicPartsResponse.ProtoReflect.Descriptor instead.
func (*ListDynamicPartsResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{31}
}

func (x *ListDynamicPartsResponse) GetParts() map[string]*DynamicPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ListPropsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// types, if provided, filters the results of the items that are returned.
	Types []PropType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=lantspants.lootloadout.characterimage.PropType" json:"types,omitempty"`
}

func (x *ListPropsRequest) Reset() {
	*x = ListPropsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPropsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPropsRequest) ProtoMessage() {}

func (x *ListPropsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPropsRequest.ProtoReflect.Descriptor instead.
func (*ListPropsRequest) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{32}
}

func (x *ListPropsRequest) GetTypes() []PropType {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListPropsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Props map[string]*Prop `protobuf:"bytes,1,rep,name=props,proto3" json:"props,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListPropsResponse) Reset() {
	*x = ListPropsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPropsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPropsResponse) ProtoMessage() {}

func (x *ListPropsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPropsResponse.ProtoReflect.Descriptor instead.
func (*ListPropsResponse) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{33}
}

func (x *ListPropsResponse) GetProps() map[string]*Prop {
	if x != nil {
		return x.Props
	}
	return nil
}

// Frame describes the animation data for a single frame of animation.
type Animation_Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// image describes the bytes for the image (this is in .png format).
	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// parts describes the positioning of any static parts in the animation.
	//
	// Note: the keys must be able to be evaluated to StaticPartType.
	Parts map[string]*Positioning `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// prop describes the positioning of the prop used with this animation.
	Prop *Positioning `protobuf:"bytes,3,opt,name=prop,proto3" json:"prop,omitempty"`
	// expression defines the expressive state of the character. This will impact any parts that
	// show expression (e.g. eyes).
	Expression ExpressionType `protobuf:"varint,4,opt,name=expression,proto3,enum=lantspants.lootloadout.characterimage.ExpressionType" json:"expression,omitempty"`
}

func (x *Animation_Frame) Reset() {
	*x = Animation_Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_characterimage_characterimage_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Animation_Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Animation_Frame) ProtoMessage() {}

func (x *Animation_Frame) ProtoReflect() protoreflect.Message {
	mi := &file_characterimage_characterimage_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Animation_Frame.ProtoReflect.Descriptor instead.
func (*Animation_Frame) Descriptor() ([]byte, []int) {
	return file_characterimage_characterimage_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Animation_Frame) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Animation_Frame) GetParts() map[string]*Positioning {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *Animation_Frame) GetProp() *Positioning {
	if x != nil {
		return x.Prop
	}
	return nil
}

func (x *Animation_Frame) GetExpression() ExpressionType {
	if x != nil {
		return x.Expression
	}
	return ExpressionType_NEUTRAL
}

var File_characterimage_characterimage_proto protoreflect.FileDescriptor

var file_characterimage_characterimage_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x2a, 0x02, 0x10, 0x20, 0x52, 0x01, 0x78, 0x12, 0x15, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x10, 0x20, 0x52, 0x01, 0x79,
	0x22, 0x93, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x2a, 0x03, 0x18, 0xe8, 0x02, 0x52, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x05, 0x0a, 0x09, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x1a, 0x97, 0x03, 0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x7a, 0x03, 0x18, 0x80, 0x08, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f,
	0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x12, 0x5f,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x6c, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01,
	0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01,
	0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x7a, 0x03, 0x18, 0x80, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c,
	0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x7a, 0x03, 0x18, 0x80, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0xf6, 0x01, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x7a, 0x03, 0x18, 0x80, 0x02, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c,
	0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0x28, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x96,
	0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x73, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x61, 0x72, 0x74, 0x22, 0x2a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x7a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f,
	0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x8f, 0x04, 0x0a, 0x14, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x13,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x80, 0x01,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f,
	0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x45, 0x0a, 0x17, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x44, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f,
	0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xf8, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f,
	0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6f, 0x0a, 0x0f, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f,
	0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c,
	0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd5, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x1a, 0x65,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x5e, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4c, 0x45,
	0x45, 0x5f, 0x31, 0x48, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x4c, 0x45, 0x45, 0x5f, 0x32, 0x48, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x31, 0x48, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x32, 0x48, 0x10, 0x03, 0x2a, 0x4c, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50,
	0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x59, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x4c,
	0x45, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4c, 0x45,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x41, 0x52, 0x4d, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x03,
	0x2a, 0x1d, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x32,
	0xa1, 0x0f, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x2e,
	0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c,
	0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x2e, 0x6c,
	0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f,
	0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xce, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x46, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64,
	0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61,
	0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98,
	0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x38, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x76, 0x65, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x12, 0x3e,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x37,
	0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74,
	0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x6c, 0x6f, 0x6f, 0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x6f,
	0x74, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_characterimage_characterimage_proto_rawDescOnce sync.Once
	file_characterimage_characterimage_proto_rawDescData = file_characterimage_characterimage_proto_rawDesc
)

func file_characterimage_characterimage_proto_rawDescGZIP() []byte {
	file_characterimage_characterimage_proto_rawDescOnce.Do(func() {
		file_characterimage_characterimage_proto_rawDescData = protoimpl.X.CompressGZIP(file_characterimage_characterimage_proto_rawDescData)
	})
	return file_characterimage_characterimage_proto_rawDescData
}

var file_characterimage_characterimage_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_characterimage_characterimage_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_characterimage_characterimage_proto_goTypes = []interface{}{
	(PropType)(0),                            // 0: lantspants.lootloadout.characterimage.PropType
	(StaticPartType)(0),                      // 1: lantspants.lootloadout.characterimage.StaticPartType
	(DynamicPartType)(0),                     // 2: lantspants.lootloadout.characterimage.DynamicPartType
	(ExpressionType)(0),                      // 3: lantspants.lootloadout.characterimage.ExpressionType
	(*Coordinates)(nil),                      // 4: lantspants.lootloadout.characterimage.Coordinates
	(*Positioning)(nil),                      // 5: lantspants.lootloadout.characterimage.Positioning
	(*Animation)(nil),                        // 6: lantspants.lootloadout.characterimage.Animation
	(*BodyType)(nil),                         // 7: lantspants.lootloadout.characterimage.BodyType
	(*DynamicPartMapping)(nil),               // 8: lantspants.lootloadout.characterimage.DynamicPartMapping
	(*StaticPart)(nil),                       // 9: lantspants.lootloadout.characterimage.StaticPart
	(*DynamicPart)(nil),                      // 10: lantspants.lootloadout.characterimage.DynamicPart
	(*Prop)(nil),                             // 11: lantspants.lootloadout.characterimage.Prop
	(*CreateBodyTypeRequest)(nil),            // 12: lantspants.lootloadout.characterimage.CreateBodyTypeRequest
	(*CreateBodyTypeResponse)(nil),           // 13: lantspants.lootloadout.characterimage.CreateBodyTypeResponse
	(*GetBodyTypeRequest)(nil),               // 14: lantspants.lootloadout.characterimage.GetBodyTypeRequest
	(*GetBodyTypeResponse)(nil),              // 15: lantspants.lootloadout.characterimage.GetBodyTypeResponse
	(*CreateDynamicPartMappingRequest)(nil),  // 16: lantspants.lootloadout.characterimage.CreateDynamicPartMappingRequest
	(*CreateDynamicPartMappingResponse)(nil), // 17: lantspants.lootloadout.characterimage.CreateDynamicPartMappingResponse
	(*CreateStaticPartRequest)(nil),          // 18: lantspants.lootloadout.characterimage.CreateStaticPartRequest
	(*CreateStaticPartResponse)(nil),         // 19: lantspants.lootloadout.characterimage.CreateStaticPartResponse
	(*CreateDynamicPartRequest)(nil),         // 20: lantspants.lootloadout.characterimage.CreateDynamicPartRequest
	(*CreateDynamicPartResponse)(nil),        // 21: lantspants.lootloadout.characterimage.CreateDynamicPartResponse
	(*CreatePropRequest)(nil),                // 22: lantspants.lootloadout.characterimage.CreatePropRequest
	(*CreatePropResponse)(nil),               // 23: lantspants.lootloadout.characterimage.CreatePropResponse
	(*CreateAnimationRequest)(nil),           // 24: lantspants.lootloadout.characterimage.CreateAnimationRequest
	(*CreateAnimationResponse)(nil),          // 25: lantspants.lootloadout.characterimage.CreateAnimationResponse
	(*SaveAnimationRequest)(nil),             // 26: lantspants.lootloadout.characterimage.SaveAnimationRequest
	(*SaveAnimationResponse)(nil),            // 27: lantspants.lootloadout.characterimage.SaveAnimationResponse
	(*ListAnimationsRequest)(nil),            // 28: lantspants.lootloadout.characterimage.ListAnimationsRequest
	(*ListAnimationsResponse)(nil),           // 29: lantspants.lootloadout.characterimage.ListAnimationsResponse
	(*ListBodyTypesRequest)(nil),             // 30: lantspants.lootloadout.characterimage.ListBodyTypesRequest
	(*ListBodyTypesResponse)(nil),            // 31: lantspants.lootloadout.characterimage.ListBodyTypesResponse
	(*ListStaticPartsRequest)(nil),           // 32: lantspants.lootloadout.characterimage.ListStaticPartsRequest
	(*ListStaticPartsResponse)(nil),          // 33: lantspants.lootloadout.characterimage.ListStaticPartsResponse
	(*ListDynamicPartsRequest)(nil),          // 34: lantspants.lootloadout.characterimage.ListDynamicPartsRequest
	(*ListDynamicPartsResponse)(nil),         // 35: lantspants.lootloadout.characterimage.ListDynamicPartsResponse
	(*ListPropsRequest)(nil),                 // 36: lantspants.lootloadout.characterimage.ListPropsRequest
	(*ListPropsResponse)(nil),                // 37: lantspants.lootloadout.characterimage.ListPropsResponse
	(*Animation_Frame)(nil),                  // 38: lantspants.lootloadout.characterimage.Animation.Frame
	nil,                                      // 39: lantspants.lootloadout.characterimage.Animation.Frame.PartsEntry
	nil,                                      // 40: lantspants.lootloadout.characterimage.BodyType.PartMapsEntry
	nil,                                      // 41: lantspants.lootloadout.characterimage.SaveAnimationRequest.DynamicIdentifiersEntry
	nil,                                      // 42: lantspants.lootloadout.characterimage.SaveAnimationRequest.StaticIdentifiersEntry
	nil,                                      // 43: lantspants.lootloadout.characterimage.ListAnimationsResponse.AnimationsEntry
	nil,                                      // 44: lantspants.lootloadout.characterimage.ListBodyTypesResponse.TypesEntry
	nil,                                      // 45: lantspants.lootloadout.characterimage.ListStaticPartsResponse.PartsEntry
	nil,                                      // 46: lantspants.lootloadout.characterimage.ListDynamicPartsResponse.PartsEntry
	nil,                                      // 47: lantspants.lootloadout.characterimage.ListPropsResponse.PropsEntry
}
var file_characterimage_characterimage_proto_depIdxs = []int32{
	4,  // 0: lantspants.lootloadout.characterimage.Positioning.coordinates:type_name -> lantspants.lootloadout.characterimage.Coordinates
	0,  // 1: lantspants.lootloadout.characterimage.Animation.allowed:type_name -> lantspants.lootloadout.characterimage.PropType
	38, // 2: lantspants.lootloadout.characterimage.Animation.frames:type_name -> lantspants.lootloadout.characterimage.Animation.Frame
	40, // 3: lantspants.lootloadout.characterimage.BodyType.partMaps:type_name -> lantspants.lootloadout.characterimage.BodyType.PartMapsEntry
	2,  // 4: lantspants.lootloadout.characterimage.DynamicPartMapping.type:type_name -> lantspants.lootloadout.characterimage.DynamicPartType
	1,  // 5: lantspants.lootloadout.characterimage.StaticPart.type:type_name -> lantspants.lootloadout.characterimage.StaticPartType
	4,  // 6: lantspants.lootloadout.characterimage.StaticPart.anchor:type_name -> lantspants.lootloadout.characterimage.Coordinates
	2,  // 7: lantspants.lootloadout.characterimage.DynamicPart.type:type_name -> lantspants.lootloadout.characterimage.DynamicPartType
	0,  // 8: lantspants.lootloadout.characterimage.Prop.type:type_name -> lantspants.lootloadout.characterimage.PropType
	4,  // 9: lantspants.lootloadout.characterimage.Prop.anchor:type_name -> lantspants.lootloadout.characterimage.Coordinates
	7,  // 10: lantspants.lootloadout.characterimage.CreateBodyTypeRequest.body:type_name -> lantspants.lootloadout.characterimage.BodyType
	7,  // 11: lantspants.lootloadout.characterimage.GetBodyTypeResponse.body:type_name -> lantspants.lootloadout.characterimage.BodyType
	8,  // 12: lantspants.lootloadout.characterimage.CreateDynamicPartMappingRequest.dynamicPartMapping:type_name -> lantspants.lootloadout.characterimage.DynamicPartMapping
	9,  // 13: lantspants.lootloadout.characterimage.CreateStaticPartRequest.staticPart:type_name -> lantspants.lootloadout.characterimage.StaticPart
	10, // 14: lantspants.lootloadout.characterimage.CreateDynamicPartRequest.dynamicPart:type_name -> lantspants.lootloadout.characterimage.DynamicPart
	11, // 15: lantspants.lootloadout.characterimage.CreatePropRequest.prop:type_name -> lantspants.lootloadout.characterimage.Prop
	6,  // 16: lantspants.lootloadout.characterimage.CreateAnimationRequest.animation:type_name -> lantspants.lootloadout.characterimage.Animation
	41, // 17: lantspants.lootloadout.characterimage.SaveAnimationRequest.dynamicIdentifiers:type_name -> lantspants.lootloadout.characterimage.SaveAnimationRequest.DynamicIdentifiersEntry
	42, // 18: lantspants.lootloadout.characterimage.SaveAnimationRequest.staticIdentifiers:type_name -> lantspants.lootloadout.characterimage.SaveAnimationRequest.StaticIdentifiersEntry
	43, // 19: lantspants.lootloadout.characterimage.ListAnimationsResponse.animations:type_name -> lantspants.lootloadout.characterimage.ListAnimationsResponse.AnimationsEntry
	44, // 20: lantspants.lootloadout.characterimage.ListBodyTypesResponse.types:type_name -> lantspants.lootloadout.characterimage.ListBodyTypesResponse.TypesEntry
	1,  // 21: lantspants.lootloadout.characterimage.ListStaticPartsRequest.types:type_name -> lantspants.lootloadout.characterimage.StaticPartType
	45, // 22: lantspants.lootloadout.characterimage.ListStaticPartsResponse.parts:type_name -> lantspants.lootloadout.characterimage.ListStaticPartsResponse.PartsEntry
	2,  // 23: lantspants.lootloadout.characterimage.ListDynamicPartsRequest.types:type_name -> lantspants.lootloadout.characterimage.DynamicPartType
	46, // 24: lantspants.lootloadout.characterimage.ListDynamicPartsResponse.parts:type_name -> lantspants.lootloadout.characterimage.ListDynamicPartsResponse.PartsEntry
	0,  // 25: lantspants.lootloadout.characterimage.ListPropsRequest.types:type_name -> lantspants.lootloadout.characterimage.PropType
	47, // 26: lantspants.lootloadout.characterimage.ListPropsResponse.props:type_name -> lantspants.lootloadout.characterimage.ListPropsResponse.PropsEntry
	39, // 27: lantspants.lootloadout.characterimage.Animation.Frame.parts:type_name -> lantspants.lootloadout.characterimage.Animation.Frame.PartsEntry
	5,  // 28: lantspants.lootloadout.characterimage.Animation.Frame.prop:type_name -> lantspants.lootloadout.characterimage.Positioning
	3,  // 29: lantspants.lootloadout.characterimage.Animation.Frame.expression:type_name -> lantspants.lootloadout.characterimage.ExpressionType
	5,  // 30: lantspants.lootloadout.characterimage.Animation.Frame.PartsEntry.value:type_name -> lantspants.lootloadout.characterimage.Positioning
	6,  // 31: lantspants.lootloadout.characterimage.ListAnimationsResponse.AnimationsEntry.value:type_name -> lantspants.lootloadout.characterimage.Animation
	7,  // 32: lantspants.lootloadout.characterimage.ListBodyTypesResponse.TypesEntry.value:type_name -> lantspants.lootloadout.characterimage.BodyType
	9,  // 33: lantspants.lootloadout.characterimage.ListStaticPartsResponse.PartsEntry.value:type_name -> lantspants.lootloadout.characterimage.StaticPart
	10, // 34: lantspants.lootloadout.characterimage.ListDynamicPartsResponse.PartsEntry.value:type_name -> lantspants.lootloadout.characterimage.DynamicPart
	11, // 35: lantspants.lootloadout.characterimage.ListPropsResponse.PropsEntry.value:type_name -> lantspants.lootloadout.characterimage.Prop
	12, // 36: lantspants.lootloadout.characterimage.Images.CreateBodyType:input_type -> lantspants.lootloadout.characterimage.CreateBodyTypeRequest
	14, // 37: lantspants.lootloadout.characterimage.Images.GetBodyType:input_type -> lantspants.lootloadout.characterimage.GetBodyTypeRequest
	16, // 38: lantspants.lootloadout.characterimage.Images.CreateDynamicPartMapping:input_type -> lantspants.lootloadout.characterimage.CreateDynamicPartMappingRequest
	18, // 39: lantspants.lootloadout.characterimage.Images.CreateStaticPart:input_type -> lantspants.lootloadout.characterimage.CreateStaticPartRequest
	20, // 40: lantspants.lootloadout.characterimage.Images.CreateDynamicPart:input_type -> lantspants.lootloadout.characterimage.CreateDynamicPartRequest
	22, // 41: lantspants.lootloadout.characterimage.Images.CreateProp:input_type -> lantspants.lootloadout.characterimage.CreatePropRequest
	24, // 42: lantspants.lootloadout.characterimage.Images.CreateAnimation:input_type -> lantspants.lootloadout.characterimage.CreateAnimationRequest
	26, // 43: lantspants.lootloadout.characterimage.Images.SaveAnimation:input_type -> lantspants.lootloadout.characterimage.SaveAnimationRequest
	28, // 44: lantspants.lootloadout.characterimage.Images.ListAnimations:input_type -> lantspants.lootloadout.characterimage.ListAnimationsRequest
	30, // 45: lantspants.lootloadout.characterimage.Images.ListBodyTypes:input_type -> lantspants.lootloadout.characterimage.ListBodyTypesRequest
	32, // 46: lantspants.lootloadout.characterimage.Images.ListStaticParts:input_type -> lantspants.lootloadout.characterimage.ListStaticPartsRequest
	34, // 47: lantspants.lootloadout.characterimage.Images.ListDynamicParts:input_type -> lantspants.lootloadout.characterimage.ListDynamicPartsRequest
	36, // 48: lantspants.lootloadout.characterimage.Images.ListProps:input_type -> lantspants.lootloadout.characterimage.ListPropsRequest
	13, // 49: lantspants.lootloadout.characterimage.Images.CreateBodyType:output_type -> lantspants.lootloadout.characterimage.CreateBodyTypeResponse
	15, // 50: lantspants.lootloadout.characterimage.Images.GetBodyType:output_type -> lantspants.lootloadout.characterimage.GetBodyTypeResponse
	17, // 51: lantspants.lootloadout.characterimage.Images.CreateDynamicPartMapping:output_type -> lantspants.lootloadout.characterimage.CreateDynamicPartMappingResponse
	19, // 52: lantspants.lootloadout.characterimage.Images.CreateStaticPart:output_type -> lantspants.lootloadout.characterimage.CreateStaticPartResponse
	21, // 53: lantspants.lootloadout.characterimage.Images.CreateDynamicPart:output_type -> lantspants.lootloadout.characterimage.CreateDynamicPartResponse
	23, // 54: lantspants.lootloadout.characterimage.Images.CreateProp:output_type -> lantspants.lootloadout.characterimage.CreatePropResponse
	25, // 55: lantspants.lootloadout.characterimage.Images.CreateAnimation:output_type -> lantspants.lootloadout.characterimage.CreateAnimationResponse
	27, // 56: lantspants.lootloadout.characterimage.Images.SaveAnimation:output_type -> lantspants.lootloadout.characterimage.SaveAnimationResponse
	29, // 57: lantspants.lootloadout.characterimage.Images.ListAnimations:output_type -> lantspants.lootloadout.characterimage.ListAnimationsResponse
	31, // 58: lantspants.lootloadout.characterimage.Images.ListBodyTypes:output_type -> lantspants.lootloadout.characterimage.ListBodyTypesResponse
	33, // 59: lantspants.lootloadout.characterimage.Images.ListStaticParts:output_type -> lantspants.lootloadout.characterimage.ListStaticPartsResponse
	33, // 60: lantspants.lootloadout.characterimage.Images.ListDynamicParts:output_type -> lantspants.lootloadout.characterimage.ListStaticPartsResponse
	37, // 61: lantspants.lootloadout.characterimage.Images.ListProps:output_type -> lantspants.lootloadout.characterimage.ListPropsResponse
	49, // [49:62] is the sub-list for method output_type
	36, // [36:49] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_characterimage_characterimage_proto_init() }
func file_characterimage_characterimage_proto_init() {
	if File_characterimage_characterimage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_characterimage_characterimage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Positioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Animation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPartMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBodyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBodyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBodyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBodyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDynamicPartMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDynamicPartMappingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStaticPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStaticPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDynamicPartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDynamicPartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePropResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnimationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAnimationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAnimationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveAnimationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAnimationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBodyTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBodyTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaticPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStaticPartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDynamicPartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDynamicPartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPropsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPropsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_characterimage_characterimage_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Animation_Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_characterimage_characterimage_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_characterimage_characterimage_proto_goTypes,
		DependencyIndexes: file_characterimage_characterimage_proto_depIdxs,
		EnumInfos:         file_characterimage_characterimage_proto_enumTypes,
		MessageInfos:      file_characterimage_characterimage_proto_msgTypes,
	}.Build()
	File_characterimage_characterimage_proto = out.File
	file_characterimage_characterimage_proto_rawDesc = nil
	file_characterimage_characterimage_proto_goTypes = nil
	file_characterimage_characterimage_proto_depIdxs = nil
}
