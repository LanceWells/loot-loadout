// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: characterimage/characterimage.proto

package characterimage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Coordinates with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coordinates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coordinates with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CoordinatesMultiError, or
// nil if none found.
func (m *Coordinates) ValidateAll() error {
	return m.validate(true)
}

func (m *Coordinates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetX() >= 32 {
		err := CoordinatesValidationError{
			field:  "X",
			reason: "value must be less than 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetY() >= 32 {
		err := CoordinatesValidationError{
			field:  "Y",
			reason: "value must be less than 32",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CoordinatesMultiError(errors)
	}

	return nil
}

// CoordinatesMultiError is an error wrapping multiple validation errors
// returned by Coordinates.ValidateAll() if the designated constraints aren't met.
type CoordinatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CoordinatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CoordinatesMultiError) AllErrors() []error { return m }

// CoordinatesValidationError is the validation error returned by
// Coordinates.Validate if the designated constraints aren't met.
type CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinatesValidationError) ErrorName() string { return "CoordinatesValidationError" }

// Error satisfies the builtin error interface
func (e CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinatesValidationError{}

// Validate checks the field values on Positioning with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Positioning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Positioning with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositioningMultiError, or
// nil if none found.
func (m *Positioning) ValidateAll() error {
	return m.validate(true)
}

func (m *Positioning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCoordinates() == nil {
		err := PositioningValidationError{
			field:  "Coordinates",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCoordinates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PositioningValidationError{
					field:  "Coordinates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PositioningValidationError{
					field:  "Coordinates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PositioningValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRotation() > 360 {
		err := PositioningValidationError{
			field:  "Rotation",
			reason: "value must be less than or equal to 360",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PositioningMultiError(errors)
	}

	return nil
}

// PositioningMultiError is an error wrapping multiple validation errors
// returned by Positioning.ValidateAll() if the designated constraints aren't met.
type PositioningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositioningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositioningMultiError) AllErrors() []error { return m }

// PositioningValidationError is the validation error returned by
// Positioning.Validate if the designated constraints aren't met.
type PositioningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositioningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositioningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositioningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositioningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositioningValidationError) ErrorName() string { return "PositioningValidationError" }

// Error satisfies the builtin error interface
func (e PositioningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPositioning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositioningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositioningValidationError{}

// Validate checks the field values on Animation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Animation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Animation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnimationMultiError, or nil
// if none found.
func (m *Animation) ValidateAll() error {
	return m.validate(true)
}

func (m *Animation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := AnimationValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := AnimationValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetFrames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnimationValidationError{
						field:  fmt.Sprintf("Frames[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnimationValidationError{
						field:  fmt.Sprintf("Frames[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnimationValidationError{
					field:  fmt.Sprintf("Frames[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AnimationMultiError(errors)
	}

	return nil
}

// AnimationMultiError is an error wrapping multiple validation errors returned
// by Animation.ValidateAll() if the designated constraints aren't met.
type AnimationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnimationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnimationMultiError) AllErrors() []error { return m }

// AnimationValidationError is the validation error returned by
// Animation.Validate if the designated constraints aren't met.
type AnimationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimationValidationError) ErrorName() string { return "AnimationValidationError" }

// Error satisfies the builtin error interface
func (e AnimationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimationValidationError{}

// Validate checks the field values on BodyType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BodyType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BodyType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BodyTypeMultiError, or nil
// if none found.
func (m *BodyType) ValidateAll() error {
	return m.validate(true)
}

func (m *BodyType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := BodyTypeValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PartMaps

	if len(errors) > 0 {
		return BodyTypeMultiError(errors)
	}

	return nil
}

// BodyTypeMultiError is an error wrapping multiple validation errors returned
// by BodyType.ValidateAll() if the designated constraints aren't met.
type BodyTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyTypeMultiError) AllErrors() []error { return m }

// BodyTypeValidationError is the validation error returned by
// BodyType.Validate if the designated constraints aren't met.
type BodyTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyTypeValidationError) ErrorName() string { return "BodyTypeValidationError" }

// Error satisfies the builtin error interface
func (e BodyTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBodyType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyTypeValidationError{}

// Validate checks the field values on StaticPart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StaticPart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StaticPart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StaticPartMultiError, or
// nil if none found.
func (m *StaticPart) ValidateAll() error {
	return m.validate(true)
}

func (m *StaticPart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := StaticPartValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := StaticPartValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := StaticPartType_name[int32(m.GetType())]; !ok {
		err := StaticPartValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetImage()) > 256 {
		err := StaticPartValidationError{
			field:  "Image",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAnchor() == nil {
		err := StaticPartValidationError{
			field:  "Anchor",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAnchor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StaticPartValidationError{
					field:  "Anchor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StaticPartValidationError{
					field:  "Anchor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnchor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StaticPartValidationError{
				field:  "Anchor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StaticPartMultiError(errors)
	}

	return nil
}

// StaticPartMultiError is an error wrapping multiple validation errors
// returned by StaticPart.ValidateAll() if the designated constraints aren't met.
type StaticPartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaticPartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaticPartMultiError) AllErrors() []error { return m }

// StaticPartValidationError is the validation error returned by
// StaticPart.Validate if the designated constraints aren't met.
type StaticPartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaticPartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaticPartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaticPartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaticPartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaticPartValidationError) ErrorName() string { return "StaticPartValidationError" }

// Error satisfies the builtin error interface
func (e StaticPartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaticPart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaticPartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaticPartValidationError{}

// Validate checks the field values on DynamicPart with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DynamicPart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DynamicPart with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DynamicPartMultiError, or
// nil if none found.
func (m *DynamicPart) ValidateAll() error {
	return m.validate(true)
}

func (m *DynamicPart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := DynamicPartValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := DynamicPartValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DynamicPartType_name[int32(m.GetType())]; !ok {
		err := DynamicPartValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetImage()) > 256 {
		err := DynamicPartValidationError{
			field:  "Image",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DynamicPartMultiError(errors)
	}

	return nil
}

// DynamicPartMultiError is an error wrapping multiple validation errors
// returned by DynamicPart.ValidateAll() if the designated constraints aren't met.
type DynamicPartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DynamicPartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DynamicPartMultiError) AllErrors() []error { return m }

// DynamicPartValidationError is the validation error returned by
// DynamicPart.Validate if the designated constraints aren't met.
type DynamicPartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DynamicPartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DynamicPartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DynamicPartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DynamicPartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DynamicPartValidationError) ErrorName() string { return "DynamicPartValidationError" }

// Error satisfies the builtin error interface
func (e DynamicPartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDynamicPart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DynamicPartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DynamicPartValidationError{}

// Validate checks the field values on Prop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Prop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Prop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PropMultiError, or nil if none found.
func (m *Prop) ValidateAll() error {
	return m.validate(true)
}

func (m *Prop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := PropValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PropType_name[int32(m.GetType())]; !ok {
		err := PropValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetImage()) > 256 {
		err := PropValidationError{
			field:  "Image",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAnchor() == nil {
		err := PropValidationError{
			field:  "Anchor",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAnchor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PropValidationError{
					field:  "Anchor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PropValidationError{
					field:  "Anchor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnchor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PropValidationError{
				field:  "Anchor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PropMultiError(errors)
	}

	return nil
}

// PropMultiError is an error wrapping multiple validation errors returned by
// Prop.ValidateAll() if the designated constraints aren't met.
type PropMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropMultiError) AllErrors() []error { return m }

// PropValidationError is the validation error returned by Prop.Validate if the
// designated constraints aren't met.
type PropValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropValidationError) ErrorName() string { return "PropValidationError" }

// Error satisfies the builtin error interface
func (e PropValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropValidationError{}

// Validate checks the field values on CreateBodyTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBodyTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBodyTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBodyTypeRequestMultiError, or nil if none found.
func (m *CreateBodyTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBodyTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBody() == nil {
		err := CreateBodyTypeRequestValidationError{
			field:  "Body",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBodyTypeRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBodyTypeRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBodyTypeRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBodyTypeRequestMultiError(errors)
	}

	return nil
}

// CreateBodyTypeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBodyTypeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBodyTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBodyTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBodyTypeRequestMultiError) AllErrors() []error { return m }

// CreateBodyTypeRequestValidationError is the validation error returned by
// CreateBodyTypeRequest.Validate if the designated constraints aren't met.
type CreateBodyTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBodyTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBodyTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBodyTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBodyTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBodyTypeRequestValidationError) ErrorName() string {
	return "CreateBodyTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBodyTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBodyTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBodyTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBodyTypeRequestValidationError{}

// Validate checks the field values on CreateBodyTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBodyTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBodyTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBodyTypeResponseMultiError, or nil if none found.
func (m *CreateBodyTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBodyTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateBodyTypeResponseMultiError(errors)
	}

	return nil
}

// CreateBodyTypeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBodyTypeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBodyTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBodyTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBodyTypeResponseMultiError) AllErrors() []error { return m }

// CreateBodyTypeResponseValidationError is the validation error returned by
// CreateBodyTypeResponse.Validate if the designated constraints aren't met.
type CreateBodyTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBodyTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBodyTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBodyTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBodyTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBodyTypeResponseValidationError) ErrorName() string {
	return "CreateBodyTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBodyTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBodyTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBodyTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBodyTypeResponseValidationError{}

// Validate checks the field values on CreateStaticPartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStaticPartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaticPartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaticPartRequestMultiError, or nil if none found.
func (m *CreateStaticPartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaticPartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStaticPart() == nil {
		err := CreateStaticPartRequestValidationError{
			field:  "StaticPart",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStaticPart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStaticPartRequestValidationError{
					field:  "StaticPart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStaticPartRequestValidationError{
					field:  "StaticPart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaticPart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStaticPartRequestValidationError{
				field:  "StaticPart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStaticPartRequestMultiError(errors)
	}

	return nil
}

// CreateStaticPartRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStaticPartRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStaticPartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaticPartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaticPartRequestMultiError) AllErrors() []error { return m }

// CreateStaticPartRequestValidationError is the validation error returned by
// CreateStaticPartRequest.Validate if the designated constraints aren't met.
type CreateStaticPartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaticPartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaticPartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaticPartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaticPartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaticPartRequestValidationError) ErrorName() string {
	return "CreateStaticPartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStaticPartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaticPartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaticPartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaticPartRequestValidationError{}

// Validate checks the field values on CreateStaticPartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStaticPartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaticPartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaticPartResponseMultiError, or nil if none found.
func (m *CreateStaticPartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaticPartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateStaticPartResponseMultiError(errors)
	}

	return nil
}

// CreateStaticPartResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStaticPartResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStaticPartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaticPartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaticPartResponseMultiError) AllErrors() []error { return m }

// CreateStaticPartResponseValidationError is the validation error returned by
// CreateStaticPartResponse.Validate if the designated constraints aren't met.
type CreateStaticPartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaticPartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaticPartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaticPartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaticPartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaticPartResponseValidationError) ErrorName() string {
	return "CreateStaticPartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStaticPartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaticPartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaticPartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaticPartResponseValidationError{}

// Validate checks the field values on CreateDynamicPartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDynamicPartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDynamicPartRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDynamicPartRequestMultiError, or nil if none found.
func (m *CreateDynamicPartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDynamicPartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDynamicPart() == nil {
		err := CreateDynamicPartRequestValidationError{
			field:  "DynamicPart",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDynamicPart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDynamicPartRequestValidationError{
					field:  "DynamicPart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDynamicPartRequestValidationError{
					field:  "DynamicPart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDynamicPart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDynamicPartRequestValidationError{
				field:  "DynamicPart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDynamicPartRequestMultiError(errors)
	}

	return nil
}

// CreateDynamicPartRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDynamicPartRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDynamicPartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDynamicPartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDynamicPartRequestMultiError) AllErrors() []error { return m }

// CreateDynamicPartRequestValidationError is the validation error returned by
// CreateDynamicPartRequest.Validate if the designated constraints aren't met.
type CreateDynamicPartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDynamicPartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDynamicPartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDynamicPartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDynamicPartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDynamicPartRequestValidationError) ErrorName() string {
	return "CreateDynamicPartRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDynamicPartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDynamicPartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDynamicPartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDynamicPartRequestValidationError{}

// Validate checks the field values on CreateDynamicPartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDynamicPartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDynamicPartResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDynamicPartResponseMultiError, or nil if none found.
func (m *CreateDynamicPartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDynamicPartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDynamicPartResponseMultiError(errors)
	}

	return nil
}

// CreateDynamicPartResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDynamicPartResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDynamicPartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDynamicPartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDynamicPartResponseMultiError) AllErrors() []error { return m }

// CreateDynamicPartResponseValidationError is the validation error returned by
// CreateDynamicPartResponse.Validate if the designated constraints aren't met.
type CreateDynamicPartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDynamicPartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDynamicPartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDynamicPartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDynamicPartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDynamicPartResponseValidationError) ErrorName() string {
	return "CreateDynamicPartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDynamicPartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDynamicPartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDynamicPartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDynamicPartResponseValidationError{}

// Validate checks the field values on CreatePropRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePropRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePropRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePropRequestMultiError, or nil if none found.
func (m *CreatePropRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePropRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProp() == nil {
		err := CreatePropRequestValidationError{
			field:  "Prop",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePropRequestValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePropRequestValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePropRequestValidationError{
				field:  "Prop",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePropRequestMultiError(errors)
	}

	return nil
}

// CreatePropRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePropRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePropRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePropRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePropRequestMultiError) AllErrors() []error { return m }

// CreatePropRequestValidationError is the validation error returned by
// CreatePropRequest.Validate if the designated constraints aren't met.
type CreatePropRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePropRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePropRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePropRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePropRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePropRequestValidationError) ErrorName() string {
	return "CreatePropRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePropRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePropRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePropRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePropRequestValidationError{}

// Validate checks the field values on CreatePropResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePropResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePropResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePropResponseMultiError, or nil if none found.
func (m *CreatePropResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePropResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePropResponseMultiError(errors)
	}

	return nil
}

// CreatePropResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePropResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePropResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePropResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePropResponseMultiError) AllErrors() []error { return m }

// CreatePropResponseValidationError is the validation error returned by
// CreatePropResponse.Validate if the designated constraints aren't met.
type CreatePropResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePropResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePropResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePropResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePropResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePropResponseValidationError) ErrorName() string {
	return "CreatePropResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePropResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePropResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePropResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePropResponseValidationError{}

// Validate checks the field values on CreateAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAnimationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAnimationRequestMultiError, or nil if none found.
func (m *CreateAnimationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAnimationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAnimation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAnimationRequestValidationError{
					field:  "Animation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAnimationRequestValidationError{
					field:  "Animation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnimation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAnimationRequestValidationError{
				field:  "Animation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAnimationRequestMultiError(errors)
	}

	return nil
}

// CreateAnimationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAnimationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAnimationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnimationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnimationRequestMultiError) AllErrors() []error { return m }

// CreateAnimationRequestValidationError is the validation error returned by
// CreateAnimationRequest.Validate if the designated constraints aren't met.
type CreateAnimationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnimationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnimationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnimationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnimationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnimationRequestValidationError) ErrorName() string {
	return "CreateAnimationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnimationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnimationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnimationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnimationRequestValidationError{}

// Validate checks the field values on CreateAnimationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAnimationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAnimationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAnimationResponseMultiError, or nil if none found.
func (m *CreateAnimationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAnimationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAnimationResponseMultiError(errors)
	}

	return nil
}

// CreateAnimationResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAnimationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAnimationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAnimationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAnimationResponseMultiError) AllErrors() []error { return m }

// CreateAnimationResponseValidationError is the validation error returned by
// CreateAnimationResponse.Validate if the designated constraints aren't met.
type CreateAnimationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnimationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnimationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnimationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnimationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnimationResponseValidationError) ErrorName() string {
	return "CreateAnimationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnimationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnimationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnimationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnimationResponseValidationError{}

// Validate checks the field values on GetAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAnimationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAnimationRequestMultiError, or nil if none found.
func (m *GetAnimationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnimationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAnimationIdentifier()) < 1 {
		err := GetAnimationRequestValidationError{
			field:  "AnimationIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DynamicIdentifiers

	// no validation rules for StaticIdentifiers

	// no validation rules for PropIdentifier

	if len(errors) > 0 {
		return GetAnimationRequestMultiError(errors)
	}

	return nil
}

// GetAnimationRequestMultiError is an error wrapping multiple validation
// errors returned by GetAnimationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAnimationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnimationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnimationRequestMultiError) AllErrors() []error { return m }

// GetAnimationRequestValidationError is the validation error returned by
// GetAnimationRequest.Validate if the designated constraints aren't met.
type GetAnimationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationRequestValidationError) ErrorName() string {
	return "GetAnimationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationRequestValidationError{}

// Validate checks the field values on GetAnimationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAnimationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnimationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAnimationResponseMultiError, or nil if none found.
func (m *GetAnimationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnimationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAnimationResponseMultiError(errors)
	}

	return nil
}

// GetAnimationResponseMultiError is an error wrapping multiple validation
// errors returned by GetAnimationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAnimationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnimationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnimationResponseMultiError) AllErrors() []error { return m }

// GetAnimationResponseValidationError is the validation error returned by
// GetAnimationResponse.Validate if the designated constraints aren't met.
type GetAnimationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationResponseValidationError) ErrorName() string {
	return "GetAnimationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationResponseValidationError{}

// Validate checks the field values on ListAnimationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAnimationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAnimationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAnimationsRequestMultiError, or nil if none found.
func (m *ListAnimationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAnimationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := ListAnimationsRequestValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListAnimationsRequestMultiError(errors)
	}

	return nil
}

// ListAnimationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAnimationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAnimationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAnimationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAnimationsRequestMultiError) AllErrors() []error { return m }

// ListAnimationsRequestValidationError is the validation error returned by
// ListAnimationsRequest.Validate if the designated constraints aren't met.
type ListAnimationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAnimationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAnimationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAnimationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAnimationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAnimationsRequestValidationError) ErrorName() string {
	return "ListAnimationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAnimationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAnimationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAnimationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAnimationsRequestValidationError{}

// Validate checks the field values on ListAnimationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAnimationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAnimationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAnimationsResponseMultiError, or nil if none found.
func (m *ListAnimationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAnimationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAnimations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAnimationsResponseValidationError{
						field:  fmt.Sprintf("Animations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAnimationsResponseValidationError{
						field:  fmt.Sprintf("Animations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAnimationsResponseValidationError{
					field:  fmt.Sprintf("Animations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAnimationsResponseMultiError(errors)
	}

	return nil
}

// ListAnimationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAnimationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAnimationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAnimationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAnimationsResponseMultiError) AllErrors() []error { return m }

// ListAnimationsResponseValidationError is the validation error returned by
// ListAnimationsResponse.Validate if the designated constraints aren't met.
type ListAnimationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAnimationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAnimationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAnimationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAnimationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAnimationsResponseValidationError) ErrorName() string {
	return "ListAnimationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAnimationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAnimationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAnimationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAnimationsResponseValidationError{}

// Validate checks the field values on ListBodyTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBodyTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBodyTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBodyTypesRequestMultiError, or nil if none found.
func (m *ListBodyTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBodyTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBodyTypesRequestMultiError(errors)
	}

	return nil
}

// ListBodyTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListBodyTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBodyTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBodyTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBodyTypesRequestMultiError) AllErrors() []error { return m }

// ListBodyTypesRequestValidationError is the validation error returned by
// ListBodyTypesRequest.Validate if the designated constraints aren't met.
type ListBodyTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBodyTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBodyTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBodyTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBodyTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBodyTypesRequestValidationError) ErrorName() string {
	return "ListBodyTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBodyTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBodyTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBodyTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBodyTypesRequestValidationError{}

// Validate checks the field values on ListBodyTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBodyTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBodyTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBodyTypesResponseMultiError, or nil if none found.
func (m *ListBodyTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBodyTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBodyTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBodyTypesResponseValidationError{
						field:  fmt.Sprintf("Types[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBodyTypesResponseValidationError{
					field:  fmt.Sprintf("Types[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBodyTypesResponseMultiError(errors)
	}

	return nil
}

// ListBodyTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListBodyTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBodyTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBodyTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBodyTypesResponseMultiError) AllErrors() []error { return m }

// ListBodyTypesResponseValidationError is the validation error returned by
// ListBodyTypesResponse.Validate if the designated constraints aren't met.
type ListBodyTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBodyTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBodyTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBodyTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBodyTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBodyTypesResponseValidationError) ErrorName() string {
	return "ListBodyTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBodyTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBodyTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBodyTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBodyTypesResponseValidationError{}

// Validate checks the field values on ListStaticPartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaticPartsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaticPartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaticPartsRequestMultiError, or nil if none found.
func (m *ListStaticPartsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaticPartsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := ListStaticPartsRequestValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStaticPartsRequestMultiError(errors)
	}

	return nil
}

// ListStaticPartsRequestMultiError is an error wrapping multiple validation
// errors returned by ListStaticPartsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStaticPartsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaticPartsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaticPartsRequestMultiError) AllErrors() []error { return m }

// ListStaticPartsRequestValidationError is the validation error returned by
// ListStaticPartsRequest.Validate if the designated constraints aren't met.
type ListStaticPartsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaticPartsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaticPartsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaticPartsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaticPartsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaticPartsRequestValidationError) ErrorName() string {
	return "ListStaticPartsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaticPartsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaticPartsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaticPartsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaticPartsRequestValidationError{}

// Validate checks the field values on ListStaticPartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStaticPartsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaticPartsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStaticPartsResponseMultiError, or nil if none found.
func (m *ListStaticPartsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaticPartsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaticPartsResponseValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaticPartsResponseValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaticPartsResponseValidationError{
					field:  fmt.Sprintf("Parts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaticPartsResponseMultiError(errors)
	}

	return nil
}

// ListStaticPartsResponseMultiError is an error wrapping multiple validation
// errors returned by ListStaticPartsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStaticPartsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaticPartsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaticPartsResponseMultiError) AllErrors() []error { return m }

// ListStaticPartsResponseValidationError is the validation error returned by
// ListStaticPartsResponse.Validate if the designated constraints aren't met.
type ListStaticPartsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaticPartsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaticPartsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaticPartsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaticPartsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaticPartsResponseValidationError) ErrorName() string {
	return "ListStaticPartsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStaticPartsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaticPartsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaticPartsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaticPartsResponseValidationError{}

// Validate checks the field values on ListDynamicPartsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDynamicPartsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDynamicPartsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDynamicPartsRequestMultiError, or nil if none found.
func (m *ListDynamicPartsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDynamicPartsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBodyTypeIdentifier()) < 1 {
		err := ListDynamicPartsRequestValidationError{
			field:  "BodyTypeIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDynamicPartsRequestMultiError(errors)
	}

	return nil
}

// ListDynamicPartsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDynamicPartsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDynamicPartsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDynamicPartsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDynamicPartsRequestMultiError) AllErrors() []error { return m }

// ListDynamicPartsRequestValidationError is the validation error returned by
// ListDynamicPartsRequest.Validate if the designated constraints aren't met.
type ListDynamicPartsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDynamicPartsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDynamicPartsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDynamicPartsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDynamicPartsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDynamicPartsRequestValidationError) ErrorName() string {
	return "ListDynamicPartsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDynamicPartsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDynamicPartsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDynamicPartsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDynamicPartsRequestValidationError{}

// Validate checks the field values on ListDynamicPartsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDynamicPartsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDynamicPartsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDynamicPartsResponseMultiError, or nil if none found.
func (m *ListDynamicPartsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDynamicPartsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDynamicPartsResponseValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDynamicPartsResponseValidationError{
						field:  fmt.Sprintf("Parts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDynamicPartsResponseValidationError{
					field:  fmt.Sprintf("Parts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDynamicPartsResponseMultiError(errors)
	}

	return nil
}

// ListDynamicPartsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDynamicPartsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDynamicPartsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDynamicPartsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDynamicPartsResponseMultiError) AllErrors() []error { return m }

// ListDynamicPartsResponseValidationError is the validation error returned by
// ListDynamicPartsResponse.Validate if the designated constraints aren't met.
type ListDynamicPartsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDynamicPartsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDynamicPartsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDynamicPartsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDynamicPartsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDynamicPartsResponseValidationError) ErrorName() string {
	return "ListDynamicPartsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDynamicPartsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDynamicPartsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDynamicPartsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDynamicPartsResponseValidationError{}

// Validate checks the field values on ListPropsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPropsRequestMultiError, or nil if none found.
func (m *ListPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPropsRequestMultiError(errors)
	}

	return nil
}

// ListPropsRequestMultiError is an error wrapping multiple validation errors
// returned by ListPropsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPropsRequestMultiError) AllErrors() []error { return m }

// ListPropsRequestValidationError is the validation error returned by
// ListPropsRequest.Validate if the designated constraints aren't met.
type ListPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPropsRequestValidationError) ErrorName() string { return "ListPropsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPropsRequestValidationError{}

// Validate checks the field values on ListPropsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPropsResponseMultiError, or nil if none found.
func (m *ListPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPropsResponseValidationError{
						field:  fmt.Sprintf("Props[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPropsResponseValidationError{
						field:  fmt.Sprintf("Props[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPropsResponseValidationError{
					field:  fmt.Sprintf("Props[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPropsResponseMultiError(errors)
	}

	return nil
}

// ListPropsResponseMultiError is an error wrapping multiple validation errors
// returned by ListPropsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPropsResponseMultiError) AllErrors() []error { return m }

// ListPropsResponseValidationError is the validation error returned by
// ListPropsResponse.Validate if the designated constraints aren't met.
type ListPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPropsResponseValidationError) ErrorName() string {
	return "ListPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPropsResponseValidationError{}

// Validate checks the field values on Animation_Frame with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Animation_Frame) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Animation_Frame with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Animation_FrameMultiError, or nil if none found.
func (m *Animation_Frame) ValidateAll() error {
	return m.validate(true)
}

func (m *Animation_Frame) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetImage()) > 1024 {
		err := Animation_FrameValidationError{
			field:  "Image",
			reason: "value length must be at most 1024 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetParts()))
		i := 0
		for key := range m.GetParts() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetParts()[key]
			_ = val

			// no validation rules for Parts[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Animation_FrameValidationError{
							field:  fmt.Sprintf("Parts[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Animation_FrameValidationError{
							field:  fmt.Sprintf("Parts[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Animation_FrameValidationError{
						field:  fmt.Sprintf("Parts[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetProp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Animation_FrameValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Animation_FrameValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Animation_FrameValidationError{
				field:  "Prop",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Animation_FrameMultiError(errors)
	}

	return nil
}

// Animation_FrameMultiError is an error wrapping multiple validation errors
// returned by Animation_Frame.ValidateAll() if the designated constraints
// aren't met.
type Animation_FrameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Animation_FrameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Animation_FrameMultiError) AllErrors() []error { return m }

// Animation_FrameValidationError is the validation error returned by
// Animation_Frame.Validate if the designated constraints aren't met.
type Animation_FrameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Animation_FrameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Animation_FrameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Animation_FrameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Animation_FrameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Animation_FrameValidationError) ErrorName() string { return "Animation_FrameValidationError" }

// Error satisfies the builtin error interface
func (e Animation_FrameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimation_Frame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Animation_FrameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Animation_FrameValidationError{}
