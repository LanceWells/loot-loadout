// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: characterimage/characterimage.proto

package characterimage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImagesClient is the client API for Images service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesClient interface {
	// CreateBodyType creates a new base body type. The body type is the basic template for all other
	// character imagery. For example, this method could be used to create a new body type for an
	// equine, effeminite model or for a draconic, male model.
	CreateBodyType(ctx context.Context, in *CreateBodyTypeRequest, opts ...grpc.CallOption) (*CreateBodyTypeResponse, error)
	// CreateStaticPart provides a static image of some body part. These body parts do not move, and
	// are only translated via simple means (rotation at 45degree increments).
	CreateStaticPart(ctx context.Context, in *CreateStaticPartRequest, opts ...grpc.CallOption) (*CreateStaticPartResponse, error)
	// CreateDynamicPart creates a new body part for use with a specific body type. This is something
	// like an appendage. These body parts are able to move.
	CreateDynamicPart(ctx context.Context, in *CreateDynamicPartRequest, opts ...grpc.CallOption) (*CreateDynamicPartResponse, error)
	// CreateProp creates a new prop for use with any body type. These may be a variety of things not
	// covered by the other categories. These may be items or various accessories. These are included
	// as something for a character to interact with during an animation.
	CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*CreatePropResponse, error)
	// CreateAnimation creates a new animation. Please note that any still poses are animations, just
	// done with a single frame. This is the core of what brings together all the disparate data about
	// what a character should look like.
	CreateAnimation(ctx context.Context, in *CreateAnimationRequest, opts ...grpc.CallOption) (*CreateAnimationResponse, error)
	// GetAnimation sends all of the information required to piece-together an animation to the
	// backend. In response, a complete set of frames will be provided that may be used to render the
	// desired animation on the frontend.
	GetAnimation(ctx context.Context, in *GetAnimationRequest, opts ...grpc.CallOption) (*GetAnimationResponse, error)
	// ListAnimations returns a list of all of the available animations for a given body type.
	ListAnimations(ctx context.Context, in *ListAnimationsRequest, opts ...grpc.CallOption) (*ListAnimationsResponse, error)
	// ListBodyTypes returns a list of all available body types.
	ListBodyTypes(ctx context.Context, in *ListBodyTypesRequest, opts ...grpc.CallOption) (*ListBodyTypesResponse, error)
	// ListStaticParts returns a list of all available static parts of the given type.
	ListStaticParts(ctx context.Context, in *ListStaticPartsRequest, opts ...grpc.CallOption) (*ListStaticPartsResponse, error)
	// ListDynamicParts returns a list of all available dynamic parts of the given type.
	ListDynamicParts(ctx context.Context, in *ListDynamicPartsRequest, opts ...grpc.CallOption) (*ListStaticPartsResponse, error)
	// ListProps returns a list of all available props of the given type.
	ListProps(ctx context.Context, in *ListPropsRequest, opts ...grpc.CallOption) (*ListPropsResponse, error)
}

type imagesClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesClient(cc grpc.ClientConnInterface) ImagesClient {
	return &imagesClient{cc}
}

func (c *imagesClient) CreateBodyType(ctx context.Context, in *CreateBodyTypeRequest, opts ...grpc.CallOption) (*CreateBodyTypeResponse, error) {
	out := new(CreateBodyTypeResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/CreateBodyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateStaticPart(ctx context.Context, in *CreateStaticPartRequest, opts ...grpc.CallOption) (*CreateStaticPartResponse, error) {
	out := new(CreateStaticPartResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/CreateStaticPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateDynamicPart(ctx context.Context, in *CreateDynamicPartRequest, opts ...grpc.CallOption) (*CreateDynamicPartResponse, error) {
	out := new(CreateDynamicPartResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/CreateDynamicPart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateProp(ctx context.Context, in *CreatePropRequest, opts ...grpc.CallOption) (*CreatePropResponse, error) {
	out := new(CreatePropResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/CreateProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) CreateAnimation(ctx context.Context, in *CreateAnimationRequest, opts ...grpc.CallOption) (*CreateAnimationResponse, error) {
	out := new(CreateAnimationResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/CreateAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) GetAnimation(ctx context.Context, in *GetAnimationRequest, opts ...grpc.CallOption) (*GetAnimationResponse, error) {
	out := new(GetAnimationResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/GetAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListAnimations(ctx context.Context, in *ListAnimationsRequest, opts ...grpc.CallOption) (*ListAnimationsResponse, error) {
	out := new(ListAnimationsResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/ListAnimations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListBodyTypes(ctx context.Context, in *ListBodyTypesRequest, opts ...grpc.CallOption) (*ListBodyTypesResponse, error) {
	out := new(ListBodyTypesResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/ListBodyTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListStaticParts(ctx context.Context, in *ListStaticPartsRequest, opts ...grpc.CallOption) (*ListStaticPartsResponse, error) {
	out := new(ListStaticPartsResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/ListStaticParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListDynamicParts(ctx context.Context, in *ListDynamicPartsRequest, opts ...grpc.CallOption) (*ListStaticPartsResponse, error) {
	out := new(ListStaticPartsResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/ListDynamicParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesClient) ListProps(ctx context.Context, in *ListPropsRequest, opts ...grpc.CallOption) (*ListPropsResponse, error) {
	out := new(ListPropsResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.characterimage.Images/ListProps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServer is the server API for Images service.
// All implementations must embed UnimplementedImagesServer
// for forward compatibility
type ImagesServer interface {
	// CreateBodyType creates a new base body type. The body type is the basic template for all other
	// character imagery. For example, this method could be used to create a new body type for an
	// equine, effeminite model or for a draconic, male model.
	CreateBodyType(context.Context, *CreateBodyTypeRequest) (*CreateBodyTypeResponse, error)
	// CreateStaticPart provides a static image of some body part. These body parts do not move, and
	// are only translated via simple means (rotation at 45degree increments).
	CreateStaticPart(context.Context, *CreateStaticPartRequest) (*CreateStaticPartResponse, error)
	// CreateDynamicPart creates a new body part for use with a specific body type. This is something
	// like an appendage. These body parts are able to move.
	CreateDynamicPart(context.Context, *CreateDynamicPartRequest) (*CreateDynamicPartResponse, error)
	// CreateProp creates a new prop for use with any body type. These may be a variety of things not
	// covered by the other categories. These may be items or various accessories. These are included
	// as something for a character to interact with during an animation.
	CreateProp(context.Context, *CreatePropRequest) (*CreatePropResponse, error)
	// CreateAnimation creates a new animation. Please note that any still poses are animations, just
	// done with a single frame. This is the core of what brings together all the disparate data about
	// what a character should look like.
	CreateAnimation(context.Context, *CreateAnimationRequest) (*CreateAnimationResponse, error)
	// GetAnimation sends all of the information required to piece-together an animation to the
	// backend. In response, a complete set of frames will be provided that may be used to render the
	// desired animation on the frontend.
	GetAnimation(context.Context, *GetAnimationRequest) (*GetAnimationResponse, error)
	// ListAnimations returns a list of all of the available animations for a given body type.
	ListAnimations(context.Context, *ListAnimationsRequest) (*ListAnimationsResponse, error)
	// ListBodyTypes returns a list of all available body types.
	ListBodyTypes(context.Context, *ListBodyTypesRequest) (*ListBodyTypesResponse, error)
	// ListStaticParts returns a list of all available static parts of the given type.
	ListStaticParts(context.Context, *ListStaticPartsRequest) (*ListStaticPartsResponse, error)
	// ListDynamicParts returns a list of all available dynamic parts of the given type.
	ListDynamicParts(context.Context, *ListDynamicPartsRequest) (*ListStaticPartsResponse, error)
	// ListProps returns a list of all available props of the given type.
	ListProps(context.Context, *ListPropsRequest) (*ListPropsResponse, error)
	mustEmbedUnimplementedImagesServer()
}

// UnimplementedImagesServer must be embedded to have forward compatible implementations.
type UnimplementedImagesServer struct {
}

func (UnimplementedImagesServer) CreateBodyType(context.Context, *CreateBodyTypeRequest) (*CreateBodyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBodyType not implemented")
}
func (UnimplementedImagesServer) CreateStaticPart(context.Context, *CreateStaticPartRequest) (*CreateStaticPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticPart not implemented")
}
func (UnimplementedImagesServer) CreateDynamicPart(context.Context, *CreateDynamicPartRequest) (*CreateDynamicPartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDynamicPart not implemented")
}
func (UnimplementedImagesServer) CreateProp(context.Context, *CreatePropRequest) (*CreatePropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProp not implemented")
}
func (UnimplementedImagesServer) CreateAnimation(context.Context, *CreateAnimationRequest) (*CreateAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimation not implemented")
}
func (UnimplementedImagesServer) GetAnimation(context.Context, *GetAnimationRequest) (*GetAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimation not implemented")
}
func (UnimplementedImagesServer) ListAnimations(context.Context, *ListAnimationsRequest) (*ListAnimationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimations not implemented")
}
func (UnimplementedImagesServer) ListBodyTypes(context.Context, *ListBodyTypesRequest) (*ListBodyTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBodyTypes not implemented")
}
func (UnimplementedImagesServer) ListStaticParts(context.Context, *ListStaticPartsRequest) (*ListStaticPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaticParts not implemented")
}
func (UnimplementedImagesServer) ListDynamicParts(context.Context, *ListDynamicPartsRequest) (*ListStaticPartsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDynamicParts not implemented")
}
func (UnimplementedImagesServer) ListProps(context.Context, *ListPropsRequest) (*ListPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProps not implemented")
}
func (UnimplementedImagesServer) mustEmbedUnimplementedImagesServer() {}

// UnsafeImagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesServer will
// result in compilation errors.
type UnsafeImagesServer interface {
	mustEmbedUnimplementedImagesServer()
}

func RegisterImagesServer(s grpc.ServiceRegistrar, srv ImagesServer) {
	s.RegisterService(&Images_ServiceDesc, srv)
}

func _Images_CreateBodyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBodyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateBodyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/CreateBodyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateBodyType(ctx, req.(*CreateBodyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateStaticPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateStaticPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/CreateStaticPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateStaticPart(ctx, req.(*CreateStaticPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateDynamicPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDynamicPartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateDynamicPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/CreateDynamicPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateDynamicPart(ctx, req.(*CreateDynamicPartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/CreateProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateProp(ctx, req.(*CreatePropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_CreateAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).CreateAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/CreateAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).CreateAnimation(ctx, req.(*CreateAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_GetAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).GetAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/GetAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).GetAnimation(ctx, req.(*GetAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListAnimations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnimationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).ListAnimations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/ListAnimations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).ListAnimations(ctx, req.(*ListAnimationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListBodyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBodyTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).ListBodyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/ListBodyTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).ListBodyTypes(ctx, req.(*ListBodyTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListStaticParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaticPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).ListStaticParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/ListStaticParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).ListStaticParts(ctx, req.(*ListStaticPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListDynamicParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDynamicPartsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).ListDynamicParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/ListDynamicParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).ListDynamicParts(ctx, req.(*ListDynamicPartsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Images_ListProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServer).ListProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.characterimage.Images/ListProps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServer).ListProps(ctx, req.(*ListPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Images_ServiceDesc is the grpc.ServiceDesc for Images service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Images_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lantspants.lootloadout.characterimage.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBodyType",
			Handler:    _Images_CreateBodyType_Handler,
		},
		{
			MethodName: "CreateStaticPart",
			Handler:    _Images_CreateStaticPart_Handler,
		},
		{
			MethodName: "CreateDynamicPart",
			Handler:    _Images_CreateDynamicPart_Handler,
		},
		{
			MethodName: "CreateProp",
			Handler:    _Images_CreateProp_Handler,
		},
		{
			MethodName: "CreateAnimation",
			Handler:    _Images_CreateAnimation_Handler,
		},
		{
			MethodName: "GetAnimation",
			Handler:    _Images_GetAnimation_Handler,
		},
		{
			MethodName: "ListAnimations",
			Handler:    _Images_ListAnimations_Handler,
		},
		{
			MethodName: "ListBodyTypes",
			Handler:    _Images_ListBodyTypes_Handler,
		},
		{
			MethodName: "ListStaticParts",
			Handler:    _Images_ListStaticParts_Handler,
		},
		{
			MethodName: "ListDynamicParts",
			Handler:    _Images_ListDynamicParts_Handler,
		},
		{
			MethodName: "ListProps",
			Handler:    _Images_ListProps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "characterimage/characterimage.proto",
}
