// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: publicapi/publicapi.proto

package publicapi

import (
	context "context"
	roomsocket "github.com/lantspants/lootloadout/api/roomsocket"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomsClient is the client API for Rooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsClient interface {
	// ConnectToRoom is a server-streaming endpoint for interacting with the room.
	ConnectToRoom(ctx context.Context, in *roomsocket.ConnectToRoomRequest, opts ...grpc.CallOption) (Rooms_ConnectToRoomClient, error)
	// SendMessage sends a message to the chat room.
	SendMessage(ctx context.Context, in *roomsocket.ChatCommand, opts ...grpc.CallOption) (*roomsocket.ChatCommandResponse, error)
	// CreateRoom creates a room with a new ID.
	CreateRoom(ctx context.Context, in *roomsocket.CreateRoomRequest, opts ...grpc.CallOption) (*roomsocket.CreateRoomResponse, error)
	// DeleteRoom deletes a room with the specified ID.
	DeleteRoom(ctx context.Context, in *roomsocket.DeleteRoomRequest, opts ...grpc.CallOption) (*roomsocket.DeleteRoomResponse, error)
}

type roomsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsClient(cc grpc.ClientConnInterface) RoomsClient {
	return &roomsClient{cc}
}

func (c *roomsClient) ConnectToRoom(ctx context.Context, in *roomsocket.ConnectToRoomRequest, opts ...grpc.CallOption) (Rooms_ConnectToRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rooms_ServiceDesc.Streams[0], "/lantspants.lootloadout.publicapi.Rooms/ConnectToRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomsConnectToRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rooms_ConnectToRoomClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type roomsConnectToRoomClient struct {
	grpc.ClientStream
}

func (x *roomsConnectToRoomClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomsClient) SendMessage(ctx context.Context, in *roomsocket.ChatCommand, opts ...grpc.CallOption) (*roomsocket.ChatCommandResponse, error) {
	out := new(roomsocket.ChatCommandResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.publicapi.Rooms/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) CreateRoom(ctx context.Context, in *roomsocket.CreateRoomRequest, opts ...grpc.CallOption) (*roomsocket.CreateRoomResponse, error) {
	out := new(roomsocket.CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.publicapi.Rooms/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) DeleteRoom(ctx context.Context, in *roomsocket.DeleteRoomRequest, opts ...grpc.CallOption) (*roomsocket.DeleteRoomResponse, error) {
	out := new(roomsocket.DeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.publicapi.Rooms/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServer is the server API for Rooms service.
// All implementations must embed UnimplementedRoomsServer
// for forward compatibility
type RoomsServer interface {
	// ConnectToRoom is a server-streaming endpoint for interacting with the room.
	ConnectToRoom(*roomsocket.ConnectToRoomRequest, Rooms_ConnectToRoomServer) error
	// SendMessage sends a message to the chat room.
	SendMessage(context.Context, *roomsocket.ChatCommand) (*roomsocket.ChatCommandResponse, error)
	// CreateRoom creates a room with a new ID.
	CreateRoom(context.Context, *roomsocket.CreateRoomRequest) (*roomsocket.CreateRoomResponse, error)
	// DeleteRoom deletes a room with the specified ID.
	DeleteRoom(context.Context, *roomsocket.DeleteRoomRequest) (*roomsocket.DeleteRoomResponse, error)
	mustEmbedUnimplementedRoomsServer()
}

// UnimplementedRoomsServer must be embedded to have forward compatible implementations.
type UnimplementedRoomsServer struct {
}

func (UnimplementedRoomsServer) ConnectToRoom(*roomsocket.ConnectToRoomRequest, Rooms_ConnectToRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToRoom not implemented")
}
func (UnimplementedRoomsServer) SendMessage(context.Context, *roomsocket.ChatCommand) (*roomsocket.ChatCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRoomsServer) CreateRoom(context.Context, *roomsocket.CreateRoomRequest) (*roomsocket.CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomsServer) DeleteRoom(context.Context, *roomsocket.DeleteRoomRequest) (*roomsocket.DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomsServer) mustEmbedUnimplementedRoomsServer() {}

// UnsafeRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServer will
// result in compilation errors.
type UnsafeRoomsServer interface {
	mustEmbedUnimplementedRoomsServer()
}

func RegisterRoomsServer(s grpc.ServiceRegistrar, srv RoomsServer) {
	s.RegisterService(&Rooms_ServiceDesc, srv)
}

func _Rooms_ConnectToRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(roomsocket.ConnectToRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomsServer).ConnectToRoom(m, &roomsConnectToRoomServer{stream})
}

type Rooms_ConnectToRoomServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type roomsConnectToRoomServer struct {
	grpc.ServerStream
}

func (x *roomsConnectToRoomServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rooms_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(roomsocket.ChatCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.publicapi.Rooms/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).SendMessage(ctx, req.(*roomsocket.ChatCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(roomsocket.CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.publicapi.Rooms/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).CreateRoom(ctx, req.(*roomsocket.CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(roomsocket.DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.publicapi.Rooms/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).DeleteRoom(ctx, req.(*roomsocket.DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rooms_ServiceDesc is the grpc.ServiceDesc for Rooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lantspants.lootloadout.publicapi.Rooms",
	HandlerType: (*RoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Rooms_SendMessage_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Rooms_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Rooms_DeleteRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToRoom",
			Handler:       _Rooms_ConnectToRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "publicapi/publicapi.proto",
}
