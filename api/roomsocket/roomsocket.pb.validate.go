// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: roomsocket/roomsocket.proto

package roomsocket

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCommand with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatCommandMultiError, or
// nil if none found.
func (m *ChatCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoomId()) < 1 {
		err := ChatCommandValidationError{
			field:  "RoomId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.ChatCommandOptions.(type) {

	case *ChatCommand_Message:

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCommandValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCommandValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCommandValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ChatCommand_Command:

		if all {
			switch v := interface{}(m.GetCommand()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatCommandValidationError{
						field:  "Command",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatCommandValidationError{
						field:  "Command",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCommand()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatCommandValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := ChatCommandValidationError{
			field:  "ChatCommandOptions",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ChatCommandMultiError(errors)
	}

	return nil
}

// ChatCommandMultiError is an error wrapping multiple validation errors
// returned by ChatCommand.ValidateAll() if the designated constraints aren't met.
type ChatCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCommandMultiError) AllErrors() []error { return m }

// ChatCommandValidationError is the validation error returned by
// ChatCommand.Validate if the designated constraints aren't met.
type ChatCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCommandValidationError) ErrorName() string { return "ChatCommandValidationError" }

// Error satisfies the builtin error interface
func (e ChatCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCommandValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for CharacterId

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on CharacterCommand with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CharacterCommand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterCommand with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterCommandMultiError, or nil if none found.
func (m *CharacterCommand) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterCommand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCharacterId()) < 1 {
		err := CharacterCommandValidationError{
			field:  "CharacterId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CharacterCommandValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CharacterCommandValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CharacterCommandValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.DisplayOptions.(type) {

	case *CharacterCommand_Animation_:

		if all {
			switch v := interface{}(m.GetAnimation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterCommandValidationError{
						field:  "Animation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterCommandValidationError{
						field:  "Animation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAnimation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterCommandValidationError{
					field:  "Animation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CharacterCommand_Expression_:

		if all {
			switch v := interface{}(m.GetExpression()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CharacterCommandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CharacterCommandValidationError{
						field:  "Expression",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CharacterCommandValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CharacterCommandMultiError(errors)
	}

	return nil
}

// CharacterCommandMultiError is an error wrapping multiple validation errors
// returned by CharacterCommand.ValidateAll() if the designated constraints
// aren't met.
type CharacterCommandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterCommandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterCommandMultiError) AllErrors() []error { return m }

// CharacterCommandValidationError is the validation error returned by
// CharacterCommand.Validate if the designated constraints aren't met.
type CharacterCommandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterCommandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterCommandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterCommandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterCommandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterCommandValidationError) ErrorName() string { return "CharacterCommandValidationError" }

// Error satisfies the builtin error interface
func (e CharacterCommandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterCommand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterCommandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterCommandValidationError{}

// Validate checks the field values on ConnectToRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConnectToRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectToRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConnectToRoomRequestMultiError, or nil if none found.
func (m *ConnectToRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectToRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoomId()) < 1 {
		err := ConnectToRoomRequestValidationError{
			field:  "RoomId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConnectToRoomRequestMultiError(errors)
	}

	return nil
}

// ConnectToRoomRequestMultiError is an error wrapping multiple validation
// errors returned by ConnectToRoomRequest.ValidateAll() if the designated
// constraints aren't met.
type ConnectToRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectToRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectToRoomRequestMultiError) AllErrors() []error { return m }

// ConnectToRoomRequestValidationError is the validation error returned by
// ConnectToRoomRequest.Validate if the designated constraints aren't met.
type ConnectToRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectToRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectToRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectToRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectToRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectToRoomRequestValidationError) ErrorName() string {
	return "ConnectToRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConnectToRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectToRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectToRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectToRoomRequestValidationError{}

// Validate checks the field values on ChatCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatCommandResponseMultiError, or nil if none found.
func (m *ChatCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChatCommandResponseMultiError(errors)
	}

	return nil
}

// ChatCommandResponseMultiError is an error wrapping multiple validation
// errors returned by ChatCommandResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatCommandResponseMultiError) AllErrors() []error { return m }

// ChatCommandResponseValidationError is the validation error returned by
// ChatCommandResponse.Validate if the designated constraints aren't met.
type ChatCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatCommandResponseValidationError) ErrorName() string {
	return "ChatCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatCommandResponseValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on DeleteRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomRequestMultiError, or nil if none found.
func (m *DeleteRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoomId()) < 1 {
		err := DeleteRoomRequestValidationError{
			field:  "RoomId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoomRequestMultiError(errors)
	}

	return nil
}

// DeleteRoomRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomRequestMultiError) AllErrors() []error { return m }

// DeleteRoomRequestValidationError is the validation error returned by
// DeleteRoomRequest.Validate if the designated constraints aren't met.
type DeleteRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomRequestValidationError) ErrorName() string {
	return "DeleteRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomRequestValidationError{}

// Validate checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomResponseMultiError, or nil if none found.
func (m *DeleteRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoomResponseMultiError(errors)
	}

	return nil
}

// DeleteRoomResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomResponseMultiError) AllErrors() []error { return m }

// DeleteRoomResponseValidationError is the validation error returned by
// DeleteRoomResponse.Validate if the designated constraints aren't met.
type DeleteRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomResponseValidationError) ErrorName() string {
	return "DeleteRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomResponseValidationError{}

// Validate checks the field values on CharacterCommand_Location with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterCommand_Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterCommand_Location with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterCommand_LocationMultiError, or nil if none found.
func (m *CharacterCommand_Location) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterCommand_Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return CharacterCommand_LocationMultiError(errors)
	}

	return nil
}

// CharacterCommand_LocationMultiError is an error wrapping multiple validation
// errors returned by CharacterCommand_Location.ValidateAll() if the
// designated constraints aren't met.
type CharacterCommand_LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterCommand_LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterCommand_LocationMultiError) AllErrors() []error { return m }

// CharacterCommand_LocationValidationError is the validation error returned by
// CharacterCommand_Location.Validate if the designated constraints aren't met.
type CharacterCommand_LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterCommand_LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterCommand_LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterCommand_LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterCommand_LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterCommand_LocationValidationError) ErrorName() string {
	return "CharacterCommand_LocationValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterCommand_LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterCommand_Location.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterCommand_LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterCommand_LocationValidationError{}

// Validate checks the field values on CharacterCommand_Animation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterCommand_Animation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterCommand_Animation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterCommand_AnimationMultiError, or nil if none found.
func (m *CharacterCommand_Animation) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterCommand_Animation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAnimationId()) < 1 {
		err := CharacterCommand_AnimationValidationError{
			field:  "AnimationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CharacterCommand_AnimationMultiError(errors)
	}

	return nil
}

// CharacterCommand_AnimationMultiError is an error wrapping multiple
// validation errors returned by CharacterCommand_Animation.ValidateAll() if
// the designated constraints aren't met.
type CharacterCommand_AnimationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterCommand_AnimationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterCommand_AnimationMultiError) AllErrors() []error { return m }

// CharacterCommand_AnimationValidationError is the validation error returned
// by CharacterCommand_Animation.Validate if the designated constraints aren't met.
type CharacterCommand_AnimationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterCommand_AnimationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterCommand_AnimationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterCommand_AnimationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterCommand_AnimationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterCommand_AnimationValidationError) ErrorName() string {
	return "CharacterCommand_AnimationValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterCommand_AnimationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterCommand_Animation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterCommand_AnimationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterCommand_AnimationValidationError{}

// Validate checks the field values on CharacterCommand_Expression with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CharacterCommand_Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CharacterCommand_Expression with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CharacterCommand_ExpressionMultiError, or nil if none found.
func (m *CharacterCommand_Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *CharacterCommand_Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetExpressionId()) < 1 {
		err := CharacterCommand_ExpressionValidationError{
			field:  "ExpressionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CharacterCommand_ExpressionMultiError(errors)
	}

	return nil
}

// CharacterCommand_ExpressionMultiError is an error wrapping multiple
// validation errors returned by CharacterCommand_Expression.ValidateAll() if
// the designated constraints aren't met.
type CharacterCommand_ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CharacterCommand_ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CharacterCommand_ExpressionMultiError) AllErrors() []error { return m }

// CharacterCommand_ExpressionValidationError is the validation error returned
// by CharacterCommand_Expression.Validate if the designated constraints
// aren't met.
type CharacterCommand_ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CharacterCommand_ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CharacterCommand_ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CharacterCommand_ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CharacterCommand_ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CharacterCommand_ExpressionValidationError) ErrorName() string {
	return "CharacterCommand_ExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e CharacterCommand_ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCharacterCommand_Expression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CharacterCommand_ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CharacterCommand_ExpressionValidationError{}
