// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: roomsocket/roomsocket.proto

package roomsocket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomSocketClient is the client API for RoomSocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomSocketClient interface {
	// ConnectToRoom is a server-streaming endpoint for interacting with the room.
	ConnectToRoom(ctx context.Context, in *ConnectToRoomRequest, opts ...grpc.CallOption) (RoomSocket_ConnectToRoomClient, error)
	// SendMessage sends a message to the chat room.
	SendMessage(ctx context.Context, in *ChatCommand, opts ...grpc.CallOption) (*ChatCommandResponse, error)
	// CreateRoom creates a room with a new ID.
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	// DeleteRoom deletes a room with the specified ID.
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
}

type roomSocketClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomSocketClient(cc grpc.ClientConnInterface) RoomSocketClient {
	return &roomSocketClient{cc}
}

func (c *roomSocketClient) ConnectToRoom(ctx context.Context, in *ConnectToRoomRequest, opts ...grpc.CallOption) (RoomSocket_ConnectToRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomSocket_ServiceDesc.Streams[0], "/lantspants.lootloadout.roomsocket.RoomSocket/ConnectToRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomSocketConnectToRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomSocket_ConnectToRoomClient interface {
	Recv() (*ChatCommand, error)
	grpc.ClientStream
}

type roomSocketConnectToRoomClient struct {
	grpc.ClientStream
}

func (x *roomSocketConnectToRoomClient) Recv() (*ChatCommand, error) {
	m := new(ChatCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomSocketClient) SendMessage(ctx context.Context, in *ChatCommand, opts ...grpc.CallOption) (*ChatCommandResponse, error) {
	out := new(ChatCommandResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.roomsocket.RoomSocket/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomSocketClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.roomsocket.RoomSocket/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomSocketClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/lantspants.lootloadout.roomsocket.RoomSocket/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomSocketServer is the server API for RoomSocket service.
// All implementations must embed UnimplementedRoomSocketServer
// for forward compatibility
type RoomSocketServer interface {
	// ConnectToRoom is a server-streaming endpoint for interacting with the room.
	ConnectToRoom(*ConnectToRoomRequest, RoomSocket_ConnectToRoomServer) error
	// SendMessage sends a message to the chat room.
	SendMessage(context.Context, *ChatCommand) (*ChatCommandResponse, error)
	// CreateRoom creates a room with a new ID.
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	// DeleteRoom deletes a room with the specified ID.
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	mustEmbedUnimplementedRoomSocketServer()
}

// UnimplementedRoomSocketServer must be embedded to have forward compatible implementations.
type UnimplementedRoomSocketServer struct {
}

func (UnimplementedRoomSocketServer) ConnectToRoom(*ConnectToRoomRequest, RoomSocket_ConnectToRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToRoom not implemented")
}
func (UnimplementedRoomSocketServer) SendMessage(context.Context, *ChatCommand) (*ChatCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRoomSocketServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomSocketServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomSocketServer) mustEmbedUnimplementedRoomSocketServer() {}

// UnsafeRoomSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomSocketServer will
// result in compilation errors.
type UnsafeRoomSocketServer interface {
	mustEmbedUnimplementedRoomSocketServer()
}

func RegisterRoomSocketServer(s grpc.ServiceRegistrar, srv RoomSocketServer) {
	s.RegisterService(&RoomSocket_ServiceDesc, srv)
}

func _RoomSocket_ConnectToRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectToRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomSocketServer).ConnectToRoom(m, &roomSocketConnectToRoomServer{stream})
}

type RoomSocket_ConnectToRoomServer interface {
	Send(*ChatCommand) error
	grpc.ServerStream
}

type roomSocketConnectToRoomServer struct {
	grpc.ServerStream
}

func (x *roomSocketConnectToRoomServer) Send(m *ChatCommand) error {
	return x.ServerStream.SendMsg(m)
}

func _RoomSocket_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSocketServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.roomsocket.RoomSocket/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSocketServer).SendMessage(ctx, req.(*ChatCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomSocket_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSocketServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.roomsocket.RoomSocket/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSocketServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomSocket_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSocketServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lantspants.lootloadout.roomsocket.RoomSocket/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSocketServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomSocket_ServiceDesc is the grpc.ServiceDesc for RoomSocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomSocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lantspants.lootloadout.roomsocket.RoomSocket",
	HandlerType: (*RoomSocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _RoomSocket_SendMessage_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _RoomSocket_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _RoomSocket_DeleteRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToRoom",
			Handler:       _RoomSocket_ConnectToRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "roomsocket/roomsocket.proto",
}
