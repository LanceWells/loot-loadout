// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: publicapi/publicapi.proto

package lootloadout

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomSocketClient is the client API for RoomSocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomSocketClient interface {
	GetRoomSocket(ctx context.Context, in *GetRoomSocketRequest, opts ...grpc.CallOption) (*GetRoomSocketResponse, error)
}

type roomSocketClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomSocketClient(cc grpc.ClientConnInterface) RoomSocketClient {
	return &roomSocketClient{cc}
}

func (c *roomSocketClient) GetRoomSocket(ctx context.Context, in *GetRoomSocketRequest, opts ...grpc.CallOption) (*GetRoomSocketResponse, error) {
	out := new(GetRoomSocketResponse)
	err := c.cc.Invoke(ctx, "/lootloadout.RoomSocket/GetRoomSocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomSocketServer is the server API for RoomSocket service.
// All implementations must embed UnimplementedRoomSocketServer
// for forward compatibility
type RoomSocketServer interface {
	GetRoomSocket(context.Context, *GetRoomSocketRequest) (*GetRoomSocketResponse, error)
	mustEmbedUnimplementedRoomSocketServer()
}

// UnimplementedRoomSocketServer must be embedded to have forward compatible implementations.
type UnimplementedRoomSocketServer struct {
}

func (UnimplementedRoomSocketServer) GetRoomSocket(context.Context, *GetRoomSocketRequest) (*GetRoomSocketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomSocket not implemented")
}
func (UnimplementedRoomSocketServer) mustEmbedUnimplementedRoomSocketServer() {}

// UnsafeRoomSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomSocketServer will
// result in compilation errors.
type UnsafeRoomSocketServer interface {
	mustEmbedUnimplementedRoomSocketServer()
}

func RegisterRoomSocketServer(s grpc.ServiceRegistrar, srv RoomSocketServer) {
	s.RegisterService(&RoomSocket_ServiceDesc, srv)
}

func _RoomSocket_GetRoomSocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomSocketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomSocketServer).GetRoomSocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lootloadout.RoomSocket/GetRoomSocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomSocketServer).GetRoomSocket(ctx, req.(*GetRoomSocketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomSocket_ServiceDesc is the grpc.ServiceDesc for RoomSocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomSocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lootloadout.RoomSocket",
	HandlerType: (*RoomSocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomSocket",
			Handler:    _RoomSocket_GetRoomSocket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicapi/publicapi.proto",
}
