// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AnimationFrame is an object representing the database table.
type AnimationFrame struct {
	ID          int            `boil:"id" json:"id" toml:"id" yaml:"id"`
	AnimationID int            `boil:"animation_id" json:"animation_id" toml:"animation_id" yaml:"animation_id"`
	FrameIndex  int            `boil:"frame_index" json:"frame_index" toml:"frame_index" yaml:"frame_index"`
	Expression  ExpressionType `boil:"expression" json:"expression" toml:"expression" yaml:"expression"`

	R *animationFrameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L animationFrameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnimationFrameColumns = struct {
	ID          string
	AnimationID string
	FrameIndex  string
	Expression  string
}{
	ID:          "id",
	AnimationID: "animation_id",
	FrameIndex:  "frame_index",
	Expression:  "expression",
}

var AnimationFrameTableColumns = struct {
	ID          string
	AnimationID string
	FrameIndex  string
	Expression  string
}{
	ID:          "animation_frame.id",
	AnimationID: "animation_frame.animation_id",
	FrameIndex:  "animation_frame.frame_index",
	Expression:  "animation_frame.expression",
}

// Generated where

type whereHelperExpressionType struct{ field string }

func (w whereHelperExpressionType) EQ(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperExpressionType) NEQ(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperExpressionType) LT(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperExpressionType) LTE(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperExpressionType) GT(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperExpressionType) GTE(x ExpressionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AnimationFrameWhere = struct {
	ID          whereHelperint
	AnimationID whereHelperint
	FrameIndex  whereHelperint
	Expression  whereHelperExpressionType
}{
	ID:          whereHelperint{field: "\"animation_frame\".\"id\""},
	AnimationID: whereHelperint{field: "\"animation_frame\".\"animation_id\""},
	FrameIndex:  whereHelperint{field: "\"animation_frame\".\"frame_index\""},
	Expression:  whereHelperExpressionType{field: "\"animation_frame\".\"expression\""},
}

// AnimationFrameRels is where relationship names are stored.
var AnimationFrameRels = struct {
	Animation                     string
	AnimationFramePixels          string
	AnimationFramePropPositions   string
	AnimationFrameStaticPositions string
}{
	Animation:                     "Animation",
	AnimationFramePixels:          "AnimationFramePixels",
	AnimationFramePropPositions:   "AnimationFramePropPositions",
	AnimationFrameStaticPositions: "AnimationFrameStaticPositions",
}

// animationFrameR is where relationships are stored.
type animationFrameR struct {
	Animation                     *Animation                        `boil:"Animation" json:"Animation" toml:"Animation" yaml:"Animation"`
	AnimationFramePixels          AnimationFramePixelSlice          `boil:"AnimationFramePixels" json:"AnimationFramePixels" toml:"AnimationFramePixels" yaml:"AnimationFramePixels"`
	AnimationFramePropPositions   AnimationFramePropPositionSlice   `boil:"AnimationFramePropPositions" json:"AnimationFramePropPositions" toml:"AnimationFramePropPositions" yaml:"AnimationFramePropPositions"`
	AnimationFrameStaticPositions AnimationFrameStaticPositionSlice `boil:"AnimationFrameStaticPositions" json:"AnimationFrameStaticPositions" toml:"AnimationFrameStaticPositions" yaml:"AnimationFrameStaticPositions"`
}

// NewStruct creates a new relationship struct
func (*animationFrameR) NewStruct() *animationFrameR {
	return &animationFrameR{}
}

func (r *animationFrameR) GetAnimation() *Animation {
	if r == nil {
		return nil
	}
	return r.Animation
}

func (r *animationFrameR) GetAnimationFramePixels() AnimationFramePixelSlice {
	if r == nil {
		return nil
	}
	return r.AnimationFramePixels
}

func (r *animationFrameR) GetAnimationFramePropPositions() AnimationFramePropPositionSlice {
	if r == nil {
		return nil
	}
	return r.AnimationFramePropPositions
}

func (r *animationFrameR) GetAnimationFrameStaticPositions() AnimationFrameStaticPositionSlice {
	if r == nil {
		return nil
	}
	return r.AnimationFrameStaticPositions
}

// animationFrameL is where Load methods for each relationship are stored.
type animationFrameL struct{}

var (
	animationFrameAllColumns            = []string{"id", "animation_id", "frame_index", "expression"}
	animationFrameColumnsWithoutDefault = []string{"animation_id", "frame_index", "expression"}
	animationFrameColumnsWithDefault    = []string{"id"}
	animationFramePrimaryKeyColumns     = []string{"id"}
	animationFrameGeneratedColumns      = []string{}
)

type (
	// AnimationFrameSlice is an alias for a slice of pointers to AnimationFrame.
	// This should almost always be used instead of []AnimationFrame.
	AnimationFrameSlice []*AnimationFrame
	// AnimationFrameHook is the signature for custom AnimationFrame hook methods
	AnimationFrameHook func(context.Context, boil.ContextExecutor, *AnimationFrame) error

	animationFrameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	animationFrameType                 = reflect.TypeOf(&AnimationFrame{})
	animationFrameMapping              = queries.MakeStructMapping(animationFrameType)
	animationFramePrimaryKeyMapping, _ = queries.BindMapping(animationFrameType, animationFrameMapping, animationFramePrimaryKeyColumns)
	animationFrameInsertCacheMut       sync.RWMutex
	animationFrameInsertCache          = make(map[string]insertCache)
	animationFrameUpdateCacheMut       sync.RWMutex
	animationFrameUpdateCache          = make(map[string]updateCache)
	animationFrameUpsertCacheMut       sync.RWMutex
	animationFrameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var animationFrameAfterSelectHooks []AnimationFrameHook

var animationFrameBeforeInsertHooks []AnimationFrameHook
var animationFrameAfterInsertHooks []AnimationFrameHook

var animationFrameBeforeUpdateHooks []AnimationFrameHook
var animationFrameAfterUpdateHooks []AnimationFrameHook

var animationFrameBeforeDeleteHooks []AnimationFrameHook
var animationFrameAfterDeleteHooks []AnimationFrameHook

var animationFrameBeforeUpsertHooks []AnimationFrameHook
var animationFrameAfterUpsertHooks []AnimationFrameHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnimationFrame) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnimationFrame) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnimationFrame) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnimationFrame) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnimationFrame) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnimationFrame) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnimationFrame) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnimationFrame) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnimationFrame) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFrameAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnimationFrameHook registers your hook function for all future operations.
func AddAnimationFrameHook(hookPoint boil.HookPoint, animationFrameHook AnimationFrameHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		animationFrameAfterSelectHooks = append(animationFrameAfterSelectHooks, animationFrameHook)
	case boil.BeforeInsertHook:
		animationFrameBeforeInsertHooks = append(animationFrameBeforeInsertHooks, animationFrameHook)
	case boil.AfterInsertHook:
		animationFrameAfterInsertHooks = append(animationFrameAfterInsertHooks, animationFrameHook)
	case boil.BeforeUpdateHook:
		animationFrameBeforeUpdateHooks = append(animationFrameBeforeUpdateHooks, animationFrameHook)
	case boil.AfterUpdateHook:
		animationFrameAfterUpdateHooks = append(animationFrameAfterUpdateHooks, animationFrameHook)
	case boil.BeforeDeleteHook:
		animationFrameBeforeDeleteHooks = append(animationFrameBeforeDeleteHooks, animationFrameHook)
	case boil.AfterDeleteHook:
		animationFrameAfterDeleteHooks = append(animationFrameAfterDeleteHooks, animationFrameHook)
	case boil.BeforeUpsertHook:
		animationFrameBeforeUpsertHooks = append(animationFrameBeforeUpsertHooks, animationFrameHook)
	case boil.AfterUpsertHook:
		animationFrameAfterUpsertHooks = append(animationFrameAfterUpsertHooks, animationFrameHook)
	}
}

// One returns a single animationFrame record from the query.
func (q animationFrameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnimationFrame, error) {
	o := &AnimationFrame{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for animation_frame")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnimationFrame records from the query.
func (q animationFrameQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnimationFrameSlice, error) {
	var o []*AnimationFrame

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnimationFrame slice")
	}

	if len(animationFrameAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnimationFrame records in the query.
func (q animationFrameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count animation_frame rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q animationFrameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if animation_frame exists")
	}

	return count > 0, nil
}

// Animation pointed to by the foreign key.
func (o *AnimationFrame) Animation(mods ...qm.QueryMod) animationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnimationID),
	}

	queryMods = append(queryMods, mods...)

	return Animations(queryMods...)
}

// AnimationFramePixels retrieves all the animation_frame_pixel's AnimationFramePixels with an executor.
func (o *AnimationFrame) AnimationFramePixels(mods ...qm.QueryMod) animationFramePixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"animation_frame_pixel\".\"animation_frame_id\"=?", o.ID),
	)

	return AnimationFramePixels(queryMods...)
}

// AnimationFramePropPositions retrieves all the animation_frame_prop_position's AnimationFramePropPositions with an executor.
func (o *AnimationFrame) AnimationFramePropPositions(mods ...qm.QueryMod) animationFramePropPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"animation_frame_prop_position\".\"animation_frame_id\"=?", o.ID),
	)

	return AnimationFramePropPositions(queryMods...)
}

// AnimationFrameStaticPositions retrieves all the animation_frame_static_position's AnimationFrameStaticPositions with an executor.
func (o *AnimationFrame) AnimationFrameStaticPositions(mods ...qm.QueryMod) animationFrameStaticPositionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"animation_frame_static_position\".\"animation_frame_id\"=?", o.ID),
	)

	return AnimationFrameStaticPositions(queryMods...)
}

// LoadAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (animationFrameL) LoadAnimation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFrame interface{}, mods queries.Applicator) error {
	var slice []*AnimationFrame
	var object *AnimationFrame

	if singular {
		object = maybeAnimationFrame.(*AnimationFrame)
	} else {
		slice = *maybeAnimationFrame.(*[]*AnimationFrame)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFrameR{}
		}
		args = append(args, object.AnimationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFrameR{}
			}

			for _, a := range args {
				if a == obj.AnimationID {
					continue Outer
				}
			}

			args = append(args, obj.AnimationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation`),
		qm.WhereIn(`animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Animation")
	}

	var resultSlice []*Animation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation")
	}

	if len(animationFrameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Animation = foreign
		if foreign.R == nil {
			foreign.R = &animationR{}
		}
		foreign.R.AnimationFrames = append(foreign.R.AnimationFrames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnimationID == foreign.ID {
				local.R.Animation = foreign
				if foreign.R == nil {
					foreign.R = &animationR{}
				}
				foreign.R.AnimationFrames = append(foreign.R.AnimationFrames, local)
				break
			}
		}
	}

	return nil
}

// LoadAnimationFramePixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (animationFrameL) LoadAnimationFramePixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFrame interface{}, mods queries.Applicator) error {
	var slice []*AnimationFrame
	var object *AnimationFrame

	if singular {
		object = maybeAnimationFrame.(*AnimationFrame)
	} else {
		slice = *maybeAnimationFrame.(*[]*AnimationFrame)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFrameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFrameR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame_pixel`),
		qm.WhereIn(`animation_frame_pixel.animation_frame_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load animation_frame_pixel")
	}

	var resultSlice []*AnimationFramePixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice animation_frame_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on animation_frame_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame_pixel")
	}

	if len(animationFramePixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnimationFramePixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &animationFramePixelR{}
			}
			foreign.R.AnimationFrame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AnimationFrameID {
				local.R.AnimationFramePixels = append(local.R.AnimationFramePixels, foreign)
				if foreign.R == nil {
					foreign.R = &animationFramePixelR{}
				}
				foreign.R.AnimationFrame = local
				break
			}
		}
	}

	return nil
}

// LoadAnimationFramePropPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (animationFrameL) LoadAnimationFramePropPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFrame interface{}, mods queries.Applicator) error {
	var slice []*AnimationFrame
	var object *AnimationFrame

	if singular {
		object = maybeAnimationFrame.(*AnimationFrame)
	} else {
		slice = *maybeAnimationFrame.(*[]*AnimationFrame)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFrameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFrameR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame_prop_position`),
		qm.WhereIn(`animation_frame_prop_position.animation_frame_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load animation_frame_prop_position")
	}

	var resultSlice []*AnimationFramePropPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice animation_frame_prop_position")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on animation_frame_prop_position")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame_prop_position")
	}

	if len(animationFramePropPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnimationFramePropPositions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &animationFramePropPositionR{}
			}
			foreign.R.AnimationFrame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AnimationFrameID {
				local.R.AnimationFramePropPositions = append(local.R.AnimationFramePropPositions, foreign)
				if foreign.R == nil {
					foreign.R = &animationFramePropPositionR{}
				}
				foreign.R.AnimationFrame = local
				break
			}
		}
	}

	return nil
}

// LoadAnimationFrameStaticPositions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (animationFrameL) LoadAnimationFrameStaticPositions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFrame interface{}, mods queries.Applicator) error {
	var slice []*AnimationFrame
	var object *AnimationFrame

	if singular {
		object = maybeAnimationFrame.(*AnimationFrame)
	} else {
		slice = *maybeAnimationFrame.(*[]*AnimationFrame)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFrameR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFrameR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame_static_position`),
		qm.WhereIn(`animation_frame_static_position.animation_frame_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load animation_frame_static_position")
	}

	var resultSlice []*AnimationFrameStaticPosition
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice animation_frame_static_position")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on animation_frame_static_position")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame_static_position")
	}

	if len(animationFrameStaticPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnimationFrameStaticPositions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &animationFrameStaticPositionR{}
			}
			foreign.R.AnimationFrame = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AnimationFrameID {
				local.R.AnimationFrameStaticPositions = append(local.R.AnimationFrameStaticPositions, foreign)
				if foreign.R == nil {
					foreign.R = &animationFrameStaticPositionR{}
				}
				foreign.R.AnimationFrame = local
				break
			}
		}
	}

	return nil
}

// SetAnimation of the animationFrame to the related item.
// Sets o.R.Animation to related.
// Adds o to related.R.AnimationFrames.
func (o *AnimationFrame) SetAnimation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Animation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"animation_frame\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, animationFramePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnimationID = related.ID
	if o.R == nil {
		o.R = &animationFrameR{
			Animation: related,
		}
	} else {
		o.R.Animation = related
	}

	if related.R == nil {
		related.R = &animationR{
			AnimationFrames: AnimationFrameSlice{o},
		}
	} else {
		related.R.AnimationFrames = append(related.R.AnimationFrames, o)
	}

	return nil
}

// AddAnimationFramePixels adds the given related objects to the existing relationships
// of the animation_frame, optionally inserting them as new records.
// Appends related to o.R.AnimationFramePixels.
// Sets related.R.AnimationFrame appropriately.
func (o *AnimationFrame) AddAnimationFramePixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnimationFramePixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AnimationFrameID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"animation_frame_id"}),
				strmangle.WhereClause("\"", "\"", 2, animationFramePixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ColorStringID, rel.AnimationFrameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AnimationFrameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &animationFrameR{
			AnimationFramePixels: related,
		}
	} else {
		o.R.AnimationFramePixels = append(o.R.AnimationFramePixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &animationFramePixelR{
				AnimationFrame: o,
			}
		} else {
			rel.R.AnimationFrame = o
		}
	}
	return nil
}

// AddAnimationFramePropPositions adds the given related objects to the existing relationships
// of the animation_frame, optionally inserting them as new records.
// Appends related to o.R.AnimationFramePropPositions.
// Sets related.R.AnimationFrame appropriately.
func (o *AnimationFrame) AddAnimationFramePropPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnimationFramePropPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AnimationFrameID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"animation_frame_prop_position\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"animation_frame_id"}),
				strmangle.WhereClause("\"", "\"", 2, animationFramePropPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AnimationFrameID, rel.PartType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AnimationFrameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &animationFrameR{
			AnimationFramePropPositions: related,
		}
	} else {
		o.R.AnimationFramePropPositions = append(o.R.AnimationFramePropPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &animationFramePropPositionR{
				AnimationFrame: o,
			}
		} else {
			rel.R.AnimationFrame = o
		}
	}
	return nil
}

// AddAnimationFrameStaticPositions adds the given related objects to the existing relationships
// of the animation_frame, optionally inserting them as new records.
// Appends related to o.R.AnimationFrameStaticPositions.
// Sets related.R.AnimationFrame appropriately.
func (o *AnimationFrame) AddAnimationFrameStaticPositions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnimationFrameStaticPosition) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AnimationFrameID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"animation_frame_static_position\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"animation_frame_id"}),
				strmangle.WhereClause("\"", "\"", 2, animationFrameStaticPositionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.AnimationFrameID, rel.PartType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AnimationFrameID = o.ID
		}
	}

	if o.R == nil {
		o.R = &animationFrameR{
			AnimationFrameStaticPositions: related,
		}
	} else {
		o.R.AnimationFrameStaticPositions = append(o.R.AnimationFrameStaticPositions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &animationFrameStaticPositionR{
				AnimationFrame: o,
			}
		} else {
			rel.R.AnimationFrame = o
		}
	}
	return nil
}

// AnimationFrames retrieves all the records using an executor.
func AnimationFrames(mods ...qm.QueryMod) animationFrameQuery {
	mods = append(mods, qm.From("\"animation_frame\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"animation_frame\".*"})
	}

	return animationFrameQuery{q}
}

// FindAnimationFrame retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnimationFrame(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AnimationFrame, error) {
	animationFrameObj := &AnimationFrame{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"animation_frame\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, animationFrameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from animation_frame")
	}

	if err = animationFrameObj.doAfterSelectHooks(ctx, exec); err != nil {
		return animationFrameObj, err
	}

	return animationFrameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnimationFrame) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFrameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	animationFrameInsertCacheMut.RLock()
	cache, cached := animationFrameInsertCache[key]
	animationFrameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			animationFrameAllColumns,
			animationFrameColumnsWithDefault,
			animationFrameColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(animationFrameType, animationFrameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(animationFrameType, animationFrameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"animation_frame\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"animation_frame\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into animation_frame")
	}

	if !cached {
		animationFrameInsertCacheMut.Lock()
		animationFrameInsertCache[key] = cache
		animationFrameInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnimationFrame.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnimationFrame) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	animationFrameUpdateCacheMut.RLock()
	cache, cached := animationFrameUpdateCache[key]
	animationFrameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			animationFrameAllColumns,
			animationFramePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update animation_frame, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"animation_frame\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, animationFramePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(animationFrameType, animationFrameMapping, append(wl, animationFramePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update animation_frame row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for animation_frame")
	}

	if !cached {
		animationFrameUpdateCacheMut.Lock()
		animationFrameUpdateCache[key] = cache
		animationFrameUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q animationFrameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for animation_frame")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for animation_frame")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnimationFrameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"animation_frame\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, animationFramePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in animationFrame slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all animationFrame")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnimationFrame) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFrameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	animationFrameUpsertCacheMut.RLock()
	cache, cached := animationFrameUpsertCache[key]
	animationFrameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			animationFrameAllColumns,
			animationFrameColumnsWithDefault,
			animationFrameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			animationFrameAllColumns,
			animationFramePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert animation_frame, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(animationFramePrimaryKeyColumns))
			copy(conflict, animationFramePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"animation_frame\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(animationFrameType, animationFrameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(animationFrameType, animationFrameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert animation_frame")
	}

	if !cached {
		animationFrameUpsertCacheMut.Lock()
		animationFrameUpsertCache[key] = cache
		animationFrameUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnimationFrame record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnimationFrame) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnimationFrame provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), animationFramePrimaryKeyMapping)
	sql := "DELETE FROM \"animation_frame\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from animation_frame")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for animation_frame")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q animationFrameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no animationFrameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animation_frame")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnimationFrameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(animationFrameBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"animation_frame\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animationFrame slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame")
	}

	if len(animationFrameAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnimationFrame) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnimationFrame(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnimationFrameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnimationFrameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"animation_frame\".* FROM \"animation_frame\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnimationFrameSlice")
	}

	*o = slice

	return nil
}

// AnimationFrameExists checks if the AnimationFrame row exists.
func AnimationFrameExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"animation_frame\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if animation_frame exists")
	}

	return exists, nil
}
