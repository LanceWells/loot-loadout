// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AnimationFramePixel is an object representing the database table.
type AnimationFramePixel struct {
	ColorStringID    int   `boil:"color_string_id" json:"color_string_id" toml:"color_string_id" yaml:"color_string_id"`
	AnimationFrameID int   `boil:"animation_frame_id" json:"animation_frame_id" toml:"animation_frame_id" yaml:"animation_frame_id"`
	X                int16 `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y                int16 `boil:"y" json:"y" toml:"y" yaml:"y"`

	R *animationFramePixelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L animationFramePixelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnimationFramePixelColumns = struct {
	ColorStringID    string
	AnimationFrameID string
	X                string
	Y                string
}{
	ColorStringID:    "color_string_id",
	AnimationFrameID: "animation_frame_id",
	X:                "x",
	Y:                "y",
}

var AnimationFramePixelTableColumns = struct {
	ColorStringID    string
	AnimationFrameID string
	X                string
	Y                string
}{
	ColorStringID:    "animation_frame_pixel.color_string_id",
	AnimationFrameID: "animation_frame_pixel.animation_frame_id",
	X:                "animation_frame_pixel.x",
	Y:                "animation_frame_pixel.y",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AnimationFramePixelWhere = struct {
	ColorStringID    whereHelperint
	AnimationFrameID whereHelperint
	X                whereHelperint16
	Y                whereHelperint16
}{
	ColorStringID:    whereHelperint{field: "\"animation_frame_pixel\".\"color_string_id\""},
	AnimationFrameID: whereHelperint{field: "\"animation_frame_pixel\".\"animation_frame_id\""},
	X:                whereHelperint16{field: "\"animation_frame_pixel\".\"x\""},
	Y:                whereHelperint16{field: "\"animation_frame_pixel\".\"y\""},
}

// AnimationFramePixelRels is where relationship names are stored.
var AnimationFramePixelRels = struct {
	AnimationFrame string
	ColorString    string
}{
	AnimationFrame: "AnimationFrame",
	ColorString:    "ColorString",
}

// animationFramePixelR is where relationships are stored.
type animationFramePixelR struct {
	AnimationFrame *AnimationFrame `boil:"AnimationFrame" json:"AnimationFrame" toml:"AnimationFrame" yaml:"AnimationFrame"`
	ColorString    *ColorString    `boil:"ColorString" json:"ColorString" toml:"ColorString" yaml:"ColorString"`
}

// NewStruct creates a new relationship struct
func (*animationFramePixelR) NewStruct() *animationFramePixelR {
	return &animationFramePixelR{}
}

func (r *animationFramePixelR) GetAnimationFrame() *AnimationFrame {
	if r == nil {
		return nil
	}
	return r.AnimationFrame
}

func (r *animationFramePixelR) GetColorString() *ColorString {
	if r == nil {
		return nil
	}
	return r.ColorString
}

// animationFramePixelL is where Load methods for each relationship are stored.
type animationFramePixelL struct{}

var (
	animationFramePixelAllColumns            = []string{"color_string_id", "animation_frame_id", "x", "y"}
	animationFramePixelColumnsWithoutDefault = []string{"color_string_id", "animation_frame_id", "x", "y"}
	animationFramePixelColumnsWithDefault    = []string{}
	animationFramePixelPrimaryKeyColumns     = []string{"color_string_id", "animation_frame_id"}
	animationFramePixelGeneratedColumns      = []string{}
)

type (
	// AnimationFramePixelSlice is an alias for a slice of pointers to AnimationFramePixel.
	// This should almost always be used instead of []AnimationFramePixel.
	AnimationFramePixelSlice []*AnimationFramePixel
	// AnimationFramePixelHook is the signature for custom AnimationFramePixel hook methods
	AnimationFramePixelHook func(context.Context, boil.ContextExecutor, *AnimationFramePixel) error

	animationFramePixelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	animationFramePixelType                 = reflect.TypeOf(&AnimationFramePixel{})
	animationFramePixelMapping              = queries.MakeStructMapping(animationFramePixelType)
	animationFramePixelPrimaryKeyMapping, _ = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, animationFramePixelPrimaryKeyColumns)
	animationFramePixelInsertCacheMut       sync.RWMutex
	animationFramePixelInsertCache          = make(map[string]insertCache)
	animationFramePixelUpdateCacheMut       sync.RWMutex
	animationFramePixelUpdateCache          = make(map[string]updateCache)
	animationFramePixelUpsertCacheMut       sync.RWMutex
	animationFramePixelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var animationFramePixelAfterSelectHooks []AnimationFramePixelHook

var animationFramePixelBeforeInsertHooks []AnimationFramePixelHook
var animationFramePixelAfterInsertHooks []AnimationFramePixelHook

var animationFramePixelBeforeUpdateHooks []AnimationFramePixelHook
var animationFramePixelAfterUpdateHooks []AnimationFramePixelHook

var animationFramePixelBeforeDeleteHooks []AnimationFramePixelHook
var animationFramePixelAfterDeleteHooks []AnimationFramePixelHook

var animationFramePixelBeforeUpsertHooks []AnimationFramePixelHook
var animationFramePixelAfterUpsertHooks []AnimationFramePixelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnimationFramePixel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnimationFramePixel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnimationFramePixel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnimationFramePixel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnimationFramePixel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnimationFramePixel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnimationFramePixel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnimationFramePixel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnimationFramePixel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePixelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnimationFramePixelHook registers your hook function for all future operations.
func AddAnimationFramePixelHook(hookPoint boil.HookPoint, animationFramePixelHook AnimationFramePixelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		animationFramePixelAfterSelectHooks = append(animationFramePixelAfterSelectHooks, animationFramePixelHook)
	case boil.BeforeInsertHook:
		animationFramePixelBeforeInsertHooks = append(animationFramePixelBeforeInsertHooks, animationFramePixelHook)
	case boil.AfterInsertHook:
		animationFramePixelAfterInsertHooks = append(animationFramePixelAfterInsertHooks, animationFramePixelHook)
	case boil.BeforeUpdateHook:
		animationFramePixelBeforeUpdateHooks = append(animationFramePixelBeforeUpdateHooks, animationFramePixelHook)
	case boil.AfterUpdateHook:
		animationFramePixelAfterUpdateHooks = append(animationFramePixelAfterUpdateHooks, animationFramePixelHook)
	case boil.BeforeDeleteHook:
		animationFramePixelBeforeDeleteHooks = append(animationFramePixelBeforeDeleteHooks, animationFramePixelHook)
	case boil.AfterDeleteHook:
		animationFramePixelAfterDeleteHooks = append(animationFramePixelAfterDeleteHooks, animationFramePixelHook)
	case boil.BeforeUpsertHook:
		animationFramePixelBeforeUpsertHooks = append(animationFramePixelBeforeUpsertHooks, animationFramePixelHook)
	case boil.AfterUpsertHook:
		animationFramePixelAfterUpsertHooks = append(animationFramePixelAfterUpsertHooks, animationFramePixelHook)
	}
}

// One returns a single animationFramePixel record from the query.
func (q animationFramePixelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnimationFramePixel, error) {
	o := &AnimationFramePixel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for animation_frame_pixel")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnimationFramePixel records from the query.
func (q animationFramePixelQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnimationFramePixelSlice, error) {
	var o []*AnimationFramePixel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnimationFramePixel slice")
	}

	if len(animationFramePixelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnimationFramePixel records in the query.
func (q animationFramePixelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count animation_frame_pixel rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q animationFramePixelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if animation_frame_pixel exists")
	}

	return count > 0, nil
}

// AnimationFrame pointed to by the foreign key.
func (o *AnimationFramePixel) AnimationFrame(mods ...qm.QueryMod) animationFrameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnimationFrameID),
	}

	queryMods = append(queryMods, mods...)

	return AnimationFrames(queryMods...)
}

// ColorString pointed to by the foreign key.
func (o *AnimationFramePixel) ColorString(mods ...qm.QueryMod) colorStringQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ColorStringID),
	}

	queryMods = append(queryMods, mods...)

	return ColorStrings(queryMods...)
}

// LoadAnimationFrame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (animationFramePixelL) LoadAnimationFrame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFramePixel interface{}, mods queries.Applicator) error {
	var slice []*AnimationFramePixel
	var object *AnimationFramePixel

	if singular {
		object = maybeAnimationFramePixel.(*AnimationFramePixel)
	} else {
		slice = *maybeAnimationFramePixel.(*[]*AnimationFramePixel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFramePixelR{}
		}
		args = append(args, object.AnimationFrameID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFramePixelR{}
			}

			for _, a := range args {
				if a == obj.AnimationFrameID {
					continue Outer
				}
			}

			args = append(args, obj.AnimationFrameID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame`),
		qm.WhereIn(`animation_frame.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnimationFrame")
	}

	var resultSlice []*AnimationFrame
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnimationFrame")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for animation_frame")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame")
	}

	if len(animationFramePixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AnimationFrame = foreign
		if foreign.R == nil {
			foreign.R = &animationFrameR{}
		}
		foreign.R.AnimationFramePixels = append(foreign.R.AnimationFramePixels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnimationFrameID == foreign.ID {
				local.R.AnimationFrame = foreign
				if foreign.R == nil {
					foreign.R = &animationFrameR{}
				}
				foreign.R.AnimationFramePixels = append(foreign.R.AnimationFramePixels, local)
				break
			}
		}
	}

	return nil
}

// LoadColorString allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (animationFramePixelL) LoadColorString(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFramePixel interface{}, mods queries.Applicator) error {
	var slice []*AnimationFramePixel
	var object *AnimationFramePixel

	if singular {
		object = maybeAnimationFramePixel.(*AnimationFramePixel)
	} else {
		slice = *maybeAnimationFramePixel.(*[]*AnimationFramePixel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFramePixelR{}
		}
		args = append(args, object.ColorStringID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFramePixelR{}
			}

			for _, a := range args {
				if a == obj.ColorStringID {
					continue Outer
				}
			}

			args = append(args, obj.ColorStringID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`color_string`),
		qm.WhereIn(`color_string.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ColorString")
	}

	var resultSlice []*ColorString
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ColorString")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for color_string")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for color_string")
	}

	if len(animationFramePixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ColorString = foreign
		if foreign.R == nil {
			foreign.R = &colorStringR{}
		}
		foreign.R.AnimationFramePixels = append(foreign.R.AnimationFramePixels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ColorStringID == foreign.ID {
				local.R.ColorString = foreign
				if foreign.R == nil {
					foreign.R = &colorStringR{}
				}
				foreign.R.AnimationFramePixels = append(foreign.R.AnimationFramePixels, local)
				break
			}
		}
	}

	return nil
}

// SetAnimationFrame of the animationFramePixel to the related item.
// Sets o.R.AnimationFrame to related.
// Adds o to related.R.AnimationFramePixels.
func (o *AnimationFramePixel) SetAnimationFrame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnimationFrame) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"animation_frame_id"}),
		strmangle.WhereClause("\"", "\"", 2, animationFramePixelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ColorStringID, o.AnimationFrameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnimationFrameID = related.ID
	if o.R == nil {
		o.R = &animationFramePixelR{
			AnimationFrame: related,
		}
	} else {
		o.R.AnimationFrame = related
	}

	if related.R == nil {
		related.R = &animationFrameR{
			AnimationFramePixels: AnimationFramePixelSlice{o},
		}
	} else {
		related.R.AnimationFramePixels = append(related.R.AnimationFramePixels, o)
	}

	return nil
}

// SetColorString of the animationFramePixel to the related item.
// Sets o.R.ColorString to related.
// Adds o to related.R.AnimationFramePixels.
func (o *AnimationFramePixel) SetColorString(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ColorString) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"color_string_id"}),
		strmangle.WhereClause("\"", "\"", 2, animationFramePixelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ColorStringID, o.AnimationFrameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ColorStringID = related.ID
	if o.R == nil {
		o.R = &animationFramePixelR{
			ColorString: related,
		}
	} else {
		o.R.ColorString = related
	}

	if related.R == nil {
		related.R = &colorStringR{
			AnimationFramePixels: AnimationFramePixelSlice{o},
		}
	} else {
		related.R.AnimationFramePixels = append(related.R.AnimationFramePixels, o)
	}

	return nil
}

// AnimationFramePixels retrieves all the records using an executor.
func AnimationFramePixels(mods ...qm.QueryMod) animationFramePixelQuery {
	mods = append(mods, qm.From("\"animation_frame_pixel\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"animation_frame_pixel\".*"})
	}

	return animationFramePixelQuery{q}
}

// FindAnimationFramePixel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnimationFramePixel(ctx context.Context, exec boil.ContextExecutor, colorStringID int, animationFrameID int, selectCols ...string) (*AnimationFramePixel, error) {
	animationFramePixelObj := &AnimationFramePixel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"animation_frame_pixel\" where \"color_string_id\"=$1 AND \"animation_frame_id\"=$2", sel,
	)

	q := queries.Raw(query, colorStringID, animationFrameID)

	err := q.Bind(ctx, exec, animationFramePixelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from animation_frame_pixel")
	}

	if err = animationFramePixelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return animationFramePixelObj, err
	}

	return animationFramePixelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnimationFramePixel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame_pixel provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFramePixelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	animationFramePixelInsertCacheMut.RLock()
	cache, cached := animationFramePixelInsertCache[key]
	animationFramePixelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			animationFramePixelAllColumns,
			animationFramePixelColumnsWithDefault,
			animationFramePixelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"animation_frame_pixel\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"animation_frame_pixel\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into animation_frame_pixel")
	}

	if !cached {
		animationFramePixelInsertCacheMut.Lock()
		animationFramePixelInsertCache[key] = cache
		animationFramePixelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnimationFramePixel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnimationFramePixel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	animationFramePixelUpdateCacheMut.RLock()
	cache, cached := animationFramePixelUpdateCache[key]
	animationFramePixelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			animationFramePixelAllColumns,
			animationFramePixelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update animation_frame_pixel, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, animationFramePixelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, append(wl, animationFramePixelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update animation_frame_pixel row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for animation_frame_pixel")
	}

	if !cached {
		animationFramePixelUpdateCacheMut.Lock()
		animationFramePixelUpdateCache[key] = cache
		animationFramePixelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q animationFramePixelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for animation_frame_pixel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for animation_frame_pixel")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnimationFramePixelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePixelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, animationFramePixelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in animationFramePixel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all animationFramePixel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnimationFramePixel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame_pixel provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFramePixelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	animationFramePixelUpsertCacheMut.RLock()
	cache, cached := animationFramePixelUpsertCache[key]
	animationFramePixelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			animationFramePixelAllColumns,
			animationFramePixelColumnsWithDefault,
			animationFramePixelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			animationFramePixelAllColumns,
			animationFramePixelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert animation_frame_pixel, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(animationFramePixelPrimaryKeyColumns))
			copy(conflict, animationFramePixelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"animation_frame_pixel\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(animationFramePixelType, animationFramePixelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert animation_frame_pixel")
	}

	if !cached {
		animationFramePixelUpsertCacheMut.Lock()
		animationFramePixelUpsertCache[key] = cache
		animationFramePixelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnimationFramePixel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnimationFramePixel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnimationFramePixel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), animationFramePixelPrimaryKeyMapping)
	sql := "DELETE FROM \"animation_frame_pixel\" WHERE \"color_string_id\"=$1 AND \"animation_frame_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from animation_frame_pixel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for animation_frame_pixel")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q animationFramePixelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no animationFramePixelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animation_frame_pixel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame_pixel")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnimationFramePixelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(animationFramePixelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePixelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"animation_frame_pixel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePixelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animationFramePixel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame_pixel")
	}

	if len(animationFramePixelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnimationFramePixel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnimationFramePixel(ctx, exec, o.ColorStringID, o.AnimationFrameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnimationFramePixelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnimationFramePixelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePixelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"animation_frame_pixel\".* FROM \"animation_frame_pixel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePixelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnimationFramePixelSlice")
	}

	*o = slice

	return nil
}

// AnimationFramePixelExists checks if the AnimationFramePixel row exists.
func AnimationFramePixelExists(ctx context.Context, exec boil.ContextExecutor, colorStringID int, animationFrameID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"animation_frame_pixel\" where \"color_string_id\"=$1 AND \"animation_frame_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, colorStringID, animationFrameID)
	}
	row := exec.QueryRowContext(ctx, sql, colorStringID, animationFrameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if animation_frame_pixel exists")
	}

	return exists, nil
}
