// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnimationFramePixels(t *testing.T) {
	t.Parallel()

	query := AnimationFramePixels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnimationFramePixelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePixelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnimationFramePixels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePixelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFramePixelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePixelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnimationFramePixelExists(ctx, tx, o.ColorStringID, o.AnimationFrameID)
	if err != nil {
		t.Errorf("Unable to check if AnimationFramePixel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnimationFramePixelExists to return true, but got false.")
	}
}

func testAnimationFramePixelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	animationFramePixelFound, err := FindAnimationFramePixel(ctx, tx, o.ColorStringID, o.AnimationFrameID)
	if err != nil {
		t.Error(err)
	}

	if animationFramePixelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnimationFramePixelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnimationFramePixels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePixelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnimationFramePixels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnimationFramePixelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	animationFramePixelOne := &AnimationFramePixel{}
	animationFramePixelTwo := &AnimationFramePixel{}
	if err = randomize.Struct(seed, animationFramePixelOne, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFramePixelTwo, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFramePixelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFramePixelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFramePixels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnimationFramePixelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	animationFramePixelOne := &AnimationFramePixel{}
	animationFramePixelTwo := &AnimationFramePixel{}
	if err = randomize.Struct(seed, animationFramePixelOne, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFramePixelTwo, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFramePixelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFramePixelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func animationFramePixelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func animationFramePixelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePixel) error {
	*o = AnimationFramePixel{}
	return nil
}

func testAnimationFramePixelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnimationFramePixel{}
	o := &AnimationFramePixel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel object: %s", err)
	}

	AddAnimationFramePixelHook(boil.BeforeInsertHook, animationFramePixelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	animationFramePixelBeforeInsertHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.AfterInsertHook, animationFramePixelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	animationFramePixelAfterInsertHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.AfterSelectHook, animationFramePixelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	animationFramePixelAfterSelectHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.BeforeUpdateHook, animationFramePixelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	animationFramePixelBeforeUpdateHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.AfterUpdateHook, animationFramePixelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	animationFramePixelAfterUpdateHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.BeforeDeleteHook, animationFramePixelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	animationFramePixelBeforeDeleteHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.AfterDeleteHook, animationFramePixelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	animationFramePixelAfterDeleteHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.BeforeUpsertHook, animationFramePixelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	animationFramePixelBeforeUpsertHooks = []AnimationFramePixelHook{}

	AddAnimationFramePixelHook(boil.AfterUpsertHook, animationFramePixelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	animationFramePixelAfterUpsertHooks = []AnimationFramePixelHook{}
}

func testAnimationFramePixelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFramePixelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(animationFramePixelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFramePixelToOneAnimationFrameUsingAnimationFrame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnimationFramePixel
	var foreign AnimationFrame

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, animationFrameDBTypes, false, animationFrameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrame struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AnimationFrameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AnimationFrame().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnimationFramePixelSlice{&local}
	if err = local.L.LoadAnimationFrame(ctx, tx, false, (*[]*AnimationFramePixel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AnimationFrame = nil
	if err = local.L.LoadAnimationFrame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnimationFramePixelToOneColorStringUsingColorString(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnimationFramePixel
	var foreign ColorString

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, animationFramePixelDBTypes, false, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, colorStringDBTypes, false, colorStringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColorString struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ColorStringID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ColorString().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnimationFramePixelSlice{&local}
	if err = local.L.LoadColorString(ctx, tx, false, (*[]*AnimationFramePixel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ColorString == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ColorString = nil
	if err = local.L.LoadColorString(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ColorString == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnimationFramePixelToOneSetOpAnimationFrameUsingAnimationFrame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnimationFramePixel
	var b, c AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationFramePixelDBTypes, false, strmangle.SetComplement(animationFramePixelPrimaryKeyColumns, animationFramePixelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnimationFrame{&b, &c} {
		err = a.SetAnimationFrame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AnimationFrame != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnimationFramePixels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AnimationFrameID != x.ID {
			t.Error("foreign key was wrong value", a.AnimationFrameID)
		}

		if exists, err := AnimationFramePixelExists(ctx, tx, a.ColorStringID, a.AnimationFrameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testAnimationFramePixelToOneSetOpColorStringUsingColorString(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnimationFramePixel
	var b, c ColorString

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationFramePixelDBTypes, false, strmangle.SetComplement(animationFramePixelPrimaryKeyColumns, animationFramePixelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, colorStringDBTypes, false, strmangle.SetComplement(colorStringPrimaryKeyColumns, colorStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, colorStringDBTypes, false, strmangle.SetComplement(colorStringPrimaryKeyColumns, colorStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ColorString{&b, &c} {
		err = a.SetColorString(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ColorString != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnimationFramePixels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ColorStringID != x.ID {
			t.Error("foreign key was wrong value", a.ColorStringID)
		}

		if exists, err := AnimationFramePixelExists(ctx, tx, a.ColorStringID, a.AnimationFrameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAnimationFramePixelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePixelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFramePixelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePixelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFramePixels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	animationFramePixelDBTypes = map[string]string{`ColorStringID`: `integer`, `AnimationFrameID`: `integer`, `X`: `smallint`, `Y`: `smallint`}
	_                          = bytes.MinRead
)

func testAnimationFramePixelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(animationFramePixelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(animationFramePixelAllColumns) == len(animationFramePixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnimationFramePixelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(animationFramePixelAllColumns) == len(animationFramePixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePixel{}
	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFramePixelDBTypes, true, animationFramePixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(animationFramePixelAllColumns, animationFramePixelPrimaryKeyColumns) {
		fields = animationFramePixelAllColumns
	} else {
		fields = strmangle.SetComplement(
			animationFramePixelAllColumns,
			animationFramePixelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnimationFramePixelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnimationFramePixelsUpsert(t *testing.T) {
	t.Parallel()

	if len(animationFramePixelAllColumns) == len(animationFramePixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnimationFramePixel{}
	if err = randomize.Struct(seed, &o, animationFramePixelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFramePixel: %s", err)
	}

	count, err := AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, animationFramePixelDBTypes, false, animationFramePixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePixel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFramePixel: %s", err)
	}

	count, err = AnimationFramePixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
