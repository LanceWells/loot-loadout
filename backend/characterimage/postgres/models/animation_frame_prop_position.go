// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AnimationFramePropPosition is an object representing the database table.
type AnimationFramePropPosition struct {
	AnimationFrameID int   `boil:"animation_frame_id" json:"animation_frame_id" toml:"animation_frame_id" yaml:"animation_frame_id"`
	X                int16 `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y                int16 `boil:"y" json:"y" toml:"y" yaml:"y"`
	Rotation         int16 `boil:"rotation" json:"rotation" toml:"rotation" yaml:"rotation"`

	R *animationFramePropPositionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L animationFramePropPositionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AnimationFramePropPositionColumns = struct {
	AnimationFrameID string
	X                string
	Y                string
	Rotation         string
}{
	AnimationFrameID: "animation_frame_id",
	X:                "x",
	Y:                "y",
	Rotation:         "rotation",
}

var AnimationFramePropPositionTableColumns = struct {
	AnimationFrameID string
	X                string
	Y                string
	Rotation         string
}{
	AnimationFrameID: "animation_frame_prop_position.animation_frame_id",
	X:                "animation_frame_prop_position.x",
	Y:                "animation_frame_prop_position.y",
	Rotation:         "animation_frame_prop_position.rotation",
}

// Generated where

var AnimationFramePropPositionWhere = struct {
	AnimationFrameID whereHelperint
	X                whereHelperint16
	Y                whereHelperint16
	Rotation         whereHelperint16
}{
	AnimationFrameID: whereHelperint{field: "\"animation_frame_prop_position\".\"animation_frame_id\""},
	X:                whereHelperint16{field: "\"animation_frame_prop_position\".\"x\""},
	Y:                whereHelperint16{field: "\"animation_frame_prop_position\".\"y\""},
	Rotation:         whereHelperint16{field: "\"animation_frame_prop_position\".\"rotation\""},
}

// AnimationFramePropPositionRels is where relationship names are stored.
var AnimationFramePropPositionRels = struct {
	AnimationFrame string
}{
	AnimationFrame: "AnimationFrame",
}

// animationFramePropPositionR is where relationships are stored.
type animationFramePropPositionR struct {
	AnimationFrame *AnimationFrame `boil:"AnimationFrame" json:"AnimationFrame" toml:"AnimationFrame" yaml:"AnimationFrame"`
}

// NewStruct creates a new relationship struct
func (*animationFramePropPositionR) NewStruct() *animationFramePropPositionR {
	return &animationFramePropPositionR{}
}

func (r *animationFramePropPositionR) GetAnimationFrame() *AnimationFrame {
	if r == nil {
		return nil
	}
	return r.AnimationFrame
}

// animationFramePropPositionL is where Load methods for each relationship are stored.
type animationFramePropPositionL struct{}

var (
	animationFramePropPositionAllColumns            = []string{"animation_frame_id", "x", "y", "rotation"}
	animationFramePropPositionColumnsWithoutDefault = []string{"animation_frame_id", "x", "y", "rotation"}
	animationFramePropPositionColumnsWithDefault    = []string{}
	animationFramePropPositionPrimaryKeyColumns     = []string{"animation_frame_id"}
	animationFramePropPositionGeneratedColumns      = []string{}
)

type (
	// AnimationFramePropPositionSlice is an alias for a slice of pointers to AnimationFramePropPosition.
	// This should almost always be used instead of []AnimationFramePropPosition.
	AnimationFramePropPositionSlice []*AnimationFramePropPosition
	// AnimationFramePropPositionHook is the signature for custom AnimationFramePropPosition hook methods
	AnimationFramePropPositionHook func(context.Context, boil.ContextExecutor, *AnimationFramePropPosition) error

	animationFramePropPositionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	animationFramePropPositionType                 = reflect.TypeOf(&AnimationFramePropPosition{})
	animationFramePropPositionMapping              = queries.MakeStructMapping(animationFramePropPositionType)
	animationFramePropPositionPrimaryKeyMapping, _ = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, animationFramePropPositionPrimaryKeyColumns)
	animationFramePropPositionInsertCacheMut       sync.RWMutex
	animationFramePropPositionInsertCache          = make(map[string]insertCache)
	animationFramePropPositionUpdateCacheMut       sync.RWMutex
	animationFramePropPositionUpdateCache          = make(map[string]updateCache)
	animationFramePropPositionUpsertCacheMut       sync.RWMutex
	animationFramePropPositionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var animationFramePropPositionAfterSelectHooks []AnimationFramePropPositionHook

var animationFramePropPositionBeforeInsertHooks []AnimationFramePropPositionHook
var animationFramePropPositionAfterInsertHooks []AnimationFramePropPositionHook

var animationFramePropPositionBeforeUpdateHooks []AnimationFramePropPositionHook
var animationFramePropPositionAfterUpdateHooks []AnimationFramePropPositionHook

var animationFramePropPositionBeforeDeleteHooks []AnimationFramePropPositionHook
var animationFramePropPositionAfterDeleteHooks []AnimationFramePropPositionHook

var animationFramePropPositionBeforeUpsertHooks []AnimationFramePropPositionHook
var animationFramePropPositionAfterUpsertHooks []AnimationFramePropPositionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AnimationFramePropPosition) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AnimationFramePropPosition) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AnimationFramePropPosition) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AnimationFramePropPosition) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AnimationFramePropPosition) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AnimationFramePropPosition) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AnimationFramePropPosition) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AnimationFramePropPosition) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AnimationFramePropPosition) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range animationFramePropPositionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAnimationFramePropPositionHook registers your hook function for all future operations.
func AddAnimationFramePropPositionHook(hookPoint boil.HookPoint, animationFramePropPositionHook AnimationFramePropPositionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		animationFramePropPositionAfterSelectHooks = append(animationFramePropPositionAfterSelectHooks, animationFramePropPositionHook)
	case boil.BeforeInsertHook:
		animationFramePropPositionBeforeInsertHooks = append(animationFramePropPositionBeforeInsertHooks, animationFramePropPositionHook)
	case boil.AfterInsertHook:
		animationFramePropPositionAfterInsertHooks = append(animationFramePropPositionAfterInsertHooks, animationFramePropPositionHook)
	case boil.BeforeUpdateHook:
		animationFramePropPositionBeforeUpdateHooks = append(animationFramePropPositionBeforeUpdateHooks, animationFramePropPositionHook)
	case boil.AfterUpdateHook:
		animationFramePropPositionAfterUpdateHooks = append(animationFramePropPositionAfterUpdateHooks, animationFramePropPositionHook)
	case boil.BeforeDeleteHook:
		animationFramePropPositionBeforeDeleteHooks = append(animationFramePropPositionBeforeDeleteHooks, animationFramePropPositionHook)
	case boil.AfterDeleteHook:
		animationFramePropPositionAfterDeleteHooks = append(animationFramePropPositionAfterDeleteHooks, animationFramePropPositionHook)
	case boil.BeforeUpsertHook:
		animationFramePropPositionBeforeUpsertHooks = append(animationFramePropPositionBeforeUpsertHooks, animationFramePropPositionHook)
	case boil.AfterUpsertHook:
		animationFramePropPositionAfterUpsertHooks = append(animationFramePropPositionAfterUpsertHooks, animationFramePropPositionHook)
	}
}

// One returns a single animationFramePropPosition record from the query.
func (q animationFramePropPositionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AnimationFramePropPosition, error) {
	o := &AnimationFramePropPosition{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for animation_frame_prop_position")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AnimationFramePropPosition records from the query.
func (q animationFramePropPositionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AnimationFramePropPositionSlice, error) {
	var o []*AnimationFramePropPosition

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AnimationFramePropPosition slice")
	}

	if len(animationFramePropPositionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AnimationFramePropPosition records in the query.
func (q animationFramePropPositionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count animation_frame_prop_position rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q animationFramePropPositionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if animation_frame_prop_position exists")
	}

	return count > 0, nil
}

// AnimationFrame pointed to by the foreign key.
func (o *AnimationFramePropPosition) AnimationFrame(mods ...qm.QueryMod) animationFrameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AnimationFrameID),
	}

	queryMods = append(queryMods, mods...)

	return AnimationFrames(queryMods...)
}

// LoadAnimationFrame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (animationFramePropPositionL) LoadAnimationFrame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAnimationFramePropPosition interface{}, mods queries.Applicator) error {
	var slice []*AnimationFramePropPosition
	var object *AnimationFramePropPosition

	if singular {
		object = maybeAnimationFramePropPosition.(*AnimationFramePropPosition)
	} else {
		slice = *maybeAnimationFramePropPosition.(*[]*AnimationFramePropPosition)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &animationFramePropPositionR{}
		}
		args = append(args, object.AnimationFrameID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &animationFramePropPositionR{}
			}

			for _, a := range args {
				if a == obj.AnimationFrameID {
					continue Outer
				}
			}

			args = append(args, obj.AnimationFrameID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame`),
		qm.WhereIn(`animation_frame.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AnimationFrame")
	}

	var resultSlice []*AnimationFrame
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AnimationFrame")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for animation_frame")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame")
	}

	if len(animationFramePropPositionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AnimationFrame = foreign
		if foreign.R == nil {
			foreign.R = &animationFrameR{}
		}
		foreign.R.AnimationFramePropPosition = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AnimationFrameID == foreign.ID {
				local.R.AnimationFrame = foreign
				if foreign.R == nil {
					foreign.R = &animationFrameR{}
				}
				foreign.R.AnimationFramePropPosition = local
				break
			}
		}
	}

	return nil
}

// SetAnimationFrame of the animationFramePropPosition to the related item.
// Sets o.R.AnimationFrame to related.
// Adds o to related.R.AnimationFramePropPosition.
func (o *AnimationFramePropPosition) SetAnimationFrame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AnimationFrame) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"animation_frame_prop_position\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"animation_frame_id"}),
		strmangle.WhereClause("\"", "\"", 2, animationFramePropPositionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AnimationFrameID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AnimationFrameID = related.ID
	if o.R == nil {
		o.R = &animationFramePropPositionR{
			AnimationFrame: related,
		}
	} else {
		o.R.AnimationFrame = related
	}

	if related.R == nil {
		related.R = &animationFrameR{
			AnimationFramePropPosition: o,
		}
	} else {
		related.R.AnimationFramePropPosition = o
	}

	return nil
}

// AnimationFramePropPositions retrieves all the records using an executor.
func AnimationFramePropPositions(mods ...qm.QueryMod) animationFramePropPositionQuery {
	mods = append(mods, qm.From("\"animation_frame_prop_position\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"animation_frame_prop_position\".*"})
	}

	return animationFramePropPositionQuery{q}
}

// FindAnimationFramePropPosition retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAnimationFramePropPosition(ctx context.Context, exec boil.ContextExecutor, animationFrameID int, selectCols ...string) (*AnimationFramePropPosition, error) {
	animationFramePropPositionObj := &AnimationFramePropPosition{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"animation_frame_prop_position\" where \"animation_frame_id\"=$1", sel,
	)

	q := queries.Raw(query, animationFrameID)

	err := q.Bind(ctx, exec, animationFramePropPositionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from animation_frame_prop_position")
	}

	if err = animationFramePropPositionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return animationFramePropPositionObj, err
	}

	return animationFramePropPositionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AnimationFramePropPosition) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame_prop_position provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFramePropPositionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	animationFramePropPositionInsertCacheMut.RLock()
	cache, cached := animationFramePropPositionInsertCache[key]
	animationFramePropPositionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			animationFramePropPositionAllColumns,
			animationFramePropPositionColumnsWithDefault,
			animationFramePropPositionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"animation_frame_prop_position\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"animation_frame_prop_position\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into animation_frame_prop_position")
	}

	if !cached {
		animationFramePropPositionInsertCacheMut.Lock()
		animationFramePropPositionInsertCache[key] = cache
		animationFramePropPositionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AnimationFramePropPosition.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AnimationFramePropPosition) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	animationFramePropPositionUpdateCacheMut.RLock()
	cache, cached := animationFramePropPositionUpdateCache[key]
	animationFramePropPositionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			animationFramePropPositionAllColumns,
			animationFramePropPositionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update animation_frame_prop_position, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"animation_frame_prop_position\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, animationFramePropPositionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, append(wl, animationFramePropPositionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update animation_frame_prop_position row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for animation_frame_prop_position")
	}

	if !cached {
		animationFramePropPositionUpdateCacheMut.Lock()
		animationFramePropPositionUpdateCache[key] = cache
		animationFramePropPositionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q animationFramePropPositionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for animation_frame_prop_position")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for animation_frame_prop_position")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AnimationFramePropPositionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePropPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"animation_frame_prop_position\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, animationFramePropPositionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in animationFramePropPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all animationFramePropPosition")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AnimationFramePropPosition) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no animation_frame_prop_position provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(animationFramePropPositionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	animationFramePropPositionUpsertCacheMut.RLock()
	cache, cached := animationFramePropPositionUpsertCache[key]
	animationFramePropPositionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			animationFramePropPositionAllColumns,
			animationFramePropPositionColumnsWithDefault,
			animationFramePropPositionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			animationFramePropPositionAllColumns,
			animationFramePropPositionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert animation_frame_prop_position, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(animationFramePropPositionPrimaryKeyColumns))
			copy(conflict, animationFramePropPositionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"animation_frame_prop_position\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(animationFramePropPositionType, animationFramePropPositionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert animation_frame_prop_position")
	}

	if !cached {
		animationFramePropPositionUpsertCacheMut.Lock()
		animationFramePropPositionUpsertCache[key] = cache
		animationFramePropPositionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AnimationFramePropPosition record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AnimationFramePropPosition) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AnimationFramePropPosition provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), animationFramePropPositionPrimaryKeyMapping)
	sql := "DELETE FROM \"animation_frame_prop_position\" WHERE \"animation_frame_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from animation_frame_prop_position")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for animation_frame_prop_position")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q animationFramePropPositionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no animationFramePropPositionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animation_frame_prop_position")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame_prop_position")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AnimationFramePropPositionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(animationFramePropPositionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePropPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"animation_frame_prop_position\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePropPositionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from animationFramePropPosition slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for animation_frame_prop_position")
	}

	if len(animationFramePropPositionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AnimationFramePropPosition) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAnimationFramePropPosition(ctx, exec, o.AnimationFrameID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AnimationFramePropPositionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AnimationFramePropPositionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), animationFramePropPositionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"animation_frame_prop_position\".* FROM \"animation_frame_prop_position\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, animationFramePropPositionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AnimationFramePropPositionSlice")
	}

	*o = slice

	return nil
}

// AnimationFramePropPositionExists checks if the AnimationFramePropPosition row exists.
func AnimationFramePropPositionExists(ctx context.Context, exec boil.ContextExecutor, animationFrameID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"animation_frame_prop_position\" where \"animation_frame_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, animationFrameID)
	}
	row := exec.QueryRowContext(ctx, sql, animationFrameID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if animation_frame_prop_position exists")
	}

	return exists, nil
}
