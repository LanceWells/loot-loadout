// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnimationFramePropPositions(t *testing.T) {
	t.Parallel()

	query := AnimationFramePropPositions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnimationFramePropPositionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePropPositionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnimationFramePropPositions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePropPositionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFramePropPositionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFramePropPositionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnimationFramePropPositionExists(ctx, tx, o.AnimationFrameID)
	if err != nil {
		t.Errorf("Unable to check if AnimationFramePropPosition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnimationFramePropPositionExists to return true, but got false.")
	}
}

func testAnimationFramePropPositionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	animationFramePropPositionFound, err := FindAnimationFramePropPosition(ctx, tx, o.AnimationFrameID)
	if err != nil {
		t.Error(err)
	}

	if animationFramePropPositionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnimationFramePropPositionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnimationFramePropPositions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePropPositionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnimationFramePropPositions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnimationFramePropPositionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	animationFramePropPositionOne := &AnimationFramePropPosition{}
	animationFramePropPositionTwo := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, animationFramePropPositionOne, animationFramePropPositionDBTypes, false, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFramePropPositionTwo, animationFramePropPositionDBTypes, false, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFramePropPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFramePropPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFramePropPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnimationFramePropPositionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	animationFramePropPositionOne := &AnimationFramePropPosition{}
	animationFramePropPositionTwo := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, animationFramePropPositionOne, animationFramePropPositionDBTypes, false, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFramePropPositionTwo, animationFramePropPositionDBTypes, false, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFramePropPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFramePropPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func animationFramePropPositionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func animationFramePropPositionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFramePropPosition) error {
	*o = AnimationFramePropPosition{}
	return nil
}

func testAnimationFramePropPositionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnimationFramePropPosition{}
	o := &AnimationFramePropPosition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition object: %s", err)
	}

	AddAnimationFramePropPositionHook(boil.BeforeInsertHook, animationFramePropPositionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionBeforeInsertHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.AfterInsertHook, animationFramePropPositionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionAfterInsertHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.AfterSelectHook, animationFramePropPositionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionAfterSelectHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.BeforeUpdateHook, animationFramePropPositionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionBeforeUpdateHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.AfterUpdateHook, animationFramePropPositionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionAfterUpdateHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.BeforeDeleteHook, animationFramePropPositionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionBeforeDeleteHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.AfterDeleteHook, animationFramePropPositionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionAfterDeleteHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.BeforeUpsertHook, animationFramePropPositionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionBeforeUpsertHooks = []AnimationFramePropPositionHook{}

	AddAnimationFramePropPositionHook(boil.AfterUpsertHook, animationFramePropPositionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	animationFramePropPositionAfterUpsertHooks = []AnimationFramePropPositionHook{}
}

func testAnimationFramePropPositionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFramePropPositionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(animationFramePropPositionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFramePropPositionToOneAnimationFrameUsingAnimationFrame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnimationFramePropPosition
	var foreign AnimationFrame

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, animationFramePropPositionDBTypes, false, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, animationFrameDBTypes, false, animationFrameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrame struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AnimationFrameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AnimationFrame().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnimationFramePropPositionSlice{&local}
	if err = local.L.LoadAnimationFrame(ctx, tx, false, (*[]*AnimationFramePropPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AnimationFrame = nil
	if err = local.L.LoadAnimationFrame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnimationFramePropPositionToOneSetOpAnimationFrameUsingAnimationFrame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnimationFramePropPosition
	var b, c AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationFramePropPositionDBTypes, false, strmangle.SetComplement(animationFramePropPositionPrimaryKeyColumns, animationFramePropPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnimationFrame{&b, &c} {
		err = a.SetAnimationFrame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AnimationFrame != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnimationFramePropPosition != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AnimationFrameID != x.ID {
			t.Error("foreign key was wrong value", a.AnimationFrameID)
		}

		if exists, err := AnimationFramePropPositionExists(ctx, tx, a.AnimationFrameID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAnimationFramePropPositionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePropPositionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFramePropPositionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFramePropPositionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFramePropPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	animationFramePropPositionDBTypes = map[string]string{`AnimationFrameID`: `integer`, `X`: `smallint`, `Y`: `smallint`, `Rotation`: `smallint`}
	_                                 = bytes.MinRead
)

func testAnimationFramePropPositionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(animationFramePropPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(animationFramePropPositionAllColumns) == len(animationFramePropPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnimationFramePropPositionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(animationFramePropPositionAllColumns) == len(animationFramePropPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFramePropPosition{}
	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFramePropPositionDBTypes, true, animationFramePropPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(animationFramePropPositionAllColumns, animationFramePropPositionPrimaryKeyColumns) {
		fields = animationFramePropPositionAllColumns
	} else {
		fields = strmangle.SetComplement(
			animationFramePropPositionAllColumns,
			animationFramePropPositionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnimationFramePropPositionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnimationFramePropPositionsUpsert(t *testing.T) {
	t.Parallel()

	if len(animationFramePropPositionAllColumns) == len(animationFramePropPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnimationFramePropPosition{}
	if err = randomize.Struct(seed, &o, animationFramePropPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFramePropPosition: %s", err)
	}

	count, err := AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, animationFramePropPositionDBTypes, false, animationFramePropPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFramePropPosition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFramePropPosition: %s", err)
	}

	count, err = AnimationFramePropPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
