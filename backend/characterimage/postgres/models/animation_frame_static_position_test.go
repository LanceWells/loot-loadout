// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnimationFrameStaticPositions(t *testing.T) {
	t.Parallel()

	query := AnimationFrameStaticPositions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnimationFrameStaticPositionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFrameStaticPositionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AnimationFrameStaticPositions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFrameStaticPositionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFrameStaticPositionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationFrameStaticPositionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnimationFrameStaticPositionExists(ctx, tx, o.AnimationFrameID, o.PartType)
	if err != nil {
		t.Errorf("Unable to check if AnimationFrameStaticPosition exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnimationFrameStaticPositionExists to return true, but got false.")
	}
}

func testAnimationFrameStaticPositionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	animationFrameStaticPositionFound, err := FindAnimationFrameStaticPosition(ctx, tx, o.AnimationFrameID, o.PartType)
	if err != nil {
		t.Error(err)
	}

	if animationFrameStaticPositionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnimationFrameStaticPositionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AnimationFrameStaticPositions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnimationFrameStaticPositionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AnimationFrameStaticPositions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnimationFrameStaticPositionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	animationFrameStaticPositionOne := &AnimationFrameStaticPosition{}
	animationFrameStaticPositionTwo := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, animationFrameStaticPositionOne, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFrameStaticPositionTwo, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFrameStaticPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFrameStaticPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFrameStaticPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnimationFrameStaticPositionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	animationFrameStaticPositionOne := &AnimationFrameStaticPosition{}
	animationFrameStaticPositionTwo := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, animationFrameStaticPositionOne, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}
	if err = randomize.Struct(seed, animationFrameStaticPositionTwo, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationFrameStaticPositionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationFrameStaticPositionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func animationFrameStaticPositionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func animationFrameStaticPositionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AnimationFrameStaticPosition) error {
	*o = AnimationFrameStaticPosition{}
	return nil
}

func testAnimationFrameStaticPositionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AnimationFrameStaticPosition{}
	o := &AnimationFrameStaticPosition{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition object: %s", err)
	}

	AddAnimationFrameStaticPositionHook(boil.BeforeInsertHook, animationFrameStaticPositionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionBeforeInsertHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.AfterInsertHook, animationFrameStaticPositionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionAfterInsertHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.AfterSelectHook, animationFrameStaticPositionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionAfterSelectHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.BeforeUpdateHook, animationFrameStaticPositionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionBeforeUpdateHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.AfterUpdateHook, animationFrameStaticPositionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionAfterUpdateHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.BeforeDeleteHook, animationFrameStaticPositionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionBeforeDeleteHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.AfterDeleteHook, animationFrameStaticPositionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionAfterDeleteHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.BeforeUpsertHook, animationFrameStaticPositionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionBeforeUpsertHooks = []AnimationFrameStaticPositionHook{}

	AddAnimationFrameStaticPositionHook(boil.AfterUpsertHook, animationFrameStaticPositionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	animationFrameStaticPositionAfterUpsertHooks = []AnimationFrameStaticPositionHook{}
}

func testAnimationFrameStaticPositionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFrameStaticPositionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(animationFrameStaticPositionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationFrameStaticPositionToOneAnimationFrameUsingAnimationFrame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AnimationFrameStaticPosition
	var foreign AnimationFrame

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, animationFrameDBTypes, false, animationFrameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrame struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AnimationFrameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AnimationFrame().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnimationFrameStaticPositionSlice{&local}
	if err = local.L.LoadAnimationFrame(ctx, tx, false, (*[]*AnimationFrameStaticPosition)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AnimationFrame = nil
	if err = local.L.LoadAnimationFrame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AnimationFrame == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnimationFrameStaticPositionToOneSetOpAnimationFrameUsingAnimationFrame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AnimationFrameStaticPosition
	var b, c AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationFrameStaticPositionDBTypes, false, strmangle.SetComplement(animationFrameStaticPositionPrimaryKeyColumns, animationFrameStaticPositionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AnimationFrame{&b, &c} {
		err = a.SetAnimationFrame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AnimationFrame != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AnimationFrameStaticPositions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AnimationFrameID != x.ID {
			t.Error("foreign key was wrong value", a.AnimationFrameID)
		}

		if exists, err := AnimationFrameStaticPositionExists(ctx, tx, a.AnimationFrameID, a.PartType); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAnimationFrameStaticPositionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFrameStaticPositionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationFrameStaticPositionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationFrameStaticPositionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AnimationFrameStaticPositions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	animationFrameStaticPositionDBTypes = map[string]string{`AnimationFrameID`: `integer`, `PartType`: `enum.static_part_type('BODY','HEAD','HAIR','EYES','ACCESSORY_HEAD')`, `X`: `smallint`, `Y`: `smallint`, `Rotation`: `smallint`}
	_                                   = bytes.MinRead
)

func testAnimationFrameStaticPositionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(animationFrameStaticPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(animationFrameStaticPositionAllColumns) == len(animationFrameStaticPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnimationFrameStaticPositionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(animationFrameStaticPositionAllColumns) == len(animationFrameStaticPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationFrameStaticPositionDBTypes, true, animationFrameStaticPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(animationFrameStaticPositionAllColumns, animationFrameStaticPositionPrimaryKeyColumns) {
		fields = animationFrameStaticPositionAllColumns
	} else {
		fields = strmangle.SetComplement(
			animationFrameStaticPositionAllColumns,
			animationFrameStaticPositionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnimationFrameStaticPositionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnimationFrameStaticPositionsUpsert(t *testing.T) {
	t.Parallel()

	if len(animationFrameStaticPositionAllColumns) == len(animationFrameStaticPositionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AnimationFrameStaticPosition{}
	if err = randomize.Struct(seed, &o, animationFrameStaticPositionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFrameStaticPosition: %s", err)
	}

	count, err := AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, animationFrameStaticPositionDBTypes, false, animationFrameStaticPositionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AnimationFrameStaticPosition struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AnimationFrameStaticPosition: %s", err)
	}

	count, err = AnimationFrameStaticPositions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
