// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnimations(t *testing.T) {
	t.Parallel()

	query := Animations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnimationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Animations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnimationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnimationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Animation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnimationExists to return true, but got false.")
	}
}

func testAnimationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	animationFound, err := FindAnimation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if animationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnimationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Animations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnimationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Animations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnimationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	animationOne := &Animation{}
	animationTwo := &Animation{}
	if err = randomize.Struct(seed, animationOne, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}
	if err = randomize.Struct(seed, animationTwo, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Animations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnimationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	animationOne := &Animation{}
	animationTwo := &Animation{}
	if err = randomize.Struct(seed, animationOne, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}
	if err = randomize.Struct(seed, animationTwo, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = animationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = animationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func animationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func animationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Animation) error {
	*o = Animation{}
	return nil
}

func testAnimationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Animation{}
	o := &Animation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, animationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Animation object: %s", err)
	}

	AddAnimationHook(boil.BeforeInsertHook, animationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	animationBeforeInsertHooks = []AnimationHook{}

	AddAnimationHook(boil.AfterInsertHook, animationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	animationAfterInsertHooks = []AnimationHook{}

	AddAnimationHook(boil.AfterSelectHook, animationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	animationAfterSelectHooks = []AnimationHook{}

	AddAnimationHook(boil.BeforeUpdateHook, animationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	animationBeforeUpdateHooks = []AnimationHook{}

	AddAnimationHook(boil.AfterUpdateHook, animationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	animationAfterUpdateHooks = []AnimationHook{}

	AddAnimationHook(boil.BeforeDeleteHook, animationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	animationBeforeDeleteHooks = []AnimationHook{}

	AddAnimationHook(boil.AfterDeleteHook, animationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	animationAfterDeleteHooks = []AnimationHook{}

	AddAnimationHook(boil.BeforeUpsertHook, animationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	animationBeforeUpsertHooks = []AnimationHook{}

	AddAnimationHook(boil.AfterUpsertHook, animationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	animationAfterUpsertHooks = []AnimationHook{}
}

func testAnimationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(animationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnimationToManyAnimationFrames(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b, c AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, animationFrameDBTypes, false, animationFrameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, animationFrameDBTypes, false, animationFrameColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AnimationID, a.ID)
	queries.Assign(&c.AnimationID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AnimationFrames().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AnimationID, b.AnimationID) {
			bFound = true
		}
		if queries.Equal(v.AnimationID, c.AnimationID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AnimationSlice{&a}
	if err = a.L.LoadAnimationFrames(ctx, tx, false, (*[]*Animation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AnimationFrames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AnimationFrames = nil
	if err = a.L.LoadAnimationFrames(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AnimationFrames); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAnimationToManyAddOpAnimationFrames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b, c, d, e AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AnimationFrame{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AnimationFrame{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAnimationFrames(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AnimationID) {
			t.Error("foreign key was wrong value", a.ID, first.AnimationID)
		}
		if !queries.Equal(a.ID, second.AnimationID) {
			t.Error("foreign key was wrong value", a.ID, second.AnimationID)
		}

		if first.R.Animation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Animation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AnimationFrames[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AnimationFrames[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AnimationFrames().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAnimationToManySetOpAnimationFrames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b, c, d, e AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AnimationFrame{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAnimationFrames(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AnimationFrames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAnimationFrames(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AnimationFrames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AnimationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AnimationID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AnimationID) {
		t.Error("foreign key was wrong value", a.ID, d.AnimationID)
	}
	if !queries.Equal(a.ID, e.AnimationID) {
		t.Error("foreign key was wrong value", a.ID, e.AnimationID)
	}

	if b.R.Animation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Animation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Animation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Animation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AnimationFrames[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AnimationFrames[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAnimationToManyRemoveOpAnimationFrames(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b, c, d, e AnimationFrame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AnimationFrame{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationFrameDBTypes, false, strmangle.SetComplement(animationFramePrimaryKeyColumns, animationFrameColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAnimationFrames(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AnimationFrames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAnimationFrames(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AnimationFrames().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AnimationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AnimationID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Animation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Animation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Animation != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Animation != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AnimationFrames) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AnimationFrames[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AnimationFrames[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAnimationToOneBodyTypeUsingBodyType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Animation
	var foreign BodyType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BodyTypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BodyType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AnimationSlice{&local}
	if err = local.L.LoadBodyType(ctx, tx, false, (*[]*Animation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BodyType = nil
	if err = local.L.LoadBodyType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAnimationToOneSetOpBodyTypeUsingBodyType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b, c BodyType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BodyType{&b, &c} {
		err = a.SetBodyType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BodyType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Animations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BodyTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.BodyTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BodyTypeID))
		reflect.Indirect(reflect.ValueOf(&a.BodyTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BodyTypeID, x.ID) {
			t.Error("foreign key was wrong value", a.BodyTypeID, x.ID)
		}
	}
}

func testAnimationToOneRemoveOpBodyTypeUsingBodyType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Animation
	var b BodyType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBodyType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBodyType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BodyType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BodyType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BodyTypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Animations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAnimationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnimationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnimationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Animations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	animationDBTypes = map[string]string{`ID`: `integer`, `BodyTypeID`: `integer`, `DisplayName`: `character varying`, `PartType`: `ARRAYUSER-DEFINED`}
	_                = bytes.MinRead
)

func testAnimationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(animationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(animationAllColumns) == len(animationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationDBTypes, true, animationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnimationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(animationAllColumns) == len(animationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Animation{}
	if err = randomize.Struct(seed, o, animationDBTypes, true, animationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, animationDBTypes, true, animationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(animationAllColumns, animationPrimaryKeyColumns) {
		fields = animationAllColumns
	} else {
		fields = strmangle.SetComplement(
			animationAllColumns,
			animationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnimationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnimationsUpsert(t *testing.T) {
	t.Parallel()

	if len(animationAllColumns) == len(animationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Animation{}
	if err = randomize.Struct(seed, &o, animationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Animation: %s", err)
	}

	count, err := Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, animationDBTypes, false, animationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Animation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Animation: %s", err)
	}

	count, err = Animations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
