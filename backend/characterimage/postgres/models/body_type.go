// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BodyType is an object representing the database table.
type BodyType struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName string `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Height      int16  `boil:"height" json:"height" toml:"height" yaml:"height"`
	Width       int16  `boil:"width" json:"width" toml:"width" yaml:"width"`

	R *bodyTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bodyTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BodyTypeColumns = struct {
	ID          string
	DisplayName string
	Height      string
	Width       string
}{
	ID:          "id",
	DisplayName: "display_name",
	Height:      "height",
	Width:       "width",
}

var BodyTypeTableColumns = struct {
	ID          string
	DisplayName string
	Height      string
	Width       string
}{
	ID:          "body_type.id",
	DisplayName: "body_type.display_name",
	Height:      "body_type.height",
	Width:       "body_type.width",
}

// Generated where

var BodyTypeWhere = struct {
	ID          whereHelperint
	DisplayName whereHelperstring
	Height      whereHelperint16
	Width       whereHelperint16
}{
	ID:          whereHelperint{field: "\"body_type\".\"id\""},
	DisplayName: whereHelperstring{field: "\"body_type\".\"display_name\""},
	Height:      whereHelperint16{field: "\"body_type\".\"height\""},
	Width:       whereHelperint16{field: "\"body_type\".\"width\""},
}

// BodyTypeRels is where relationship names are stored.
var BodyTypeRels = struct {
	Animations          string
	DynamicPartMappings string
	StaticParts         string
}{
	Animations:          "Animations",
	DynamicPartMappings: "DynamicPartMappings",
	StaticParts:         "StaticParts",
}

// bodyTypeR is where relationships are stored.
type bodyTypeR struct {
	Animations          AnimationSlice          `boil:"Animations" json:"Animations" toml:"Animations" yaml:"Animations"`
	DynamicPartMappings DynamicPartMappingSlice `boil:"DynamicPartMappings" json:"DynamicPartMappings" toml:"DynamicPartMappings" yaml:"DynamicPartMappings"`
	StaticParts         StaticPartSlice         `boil:"StaticParts" json:"StaticParts" toml:"StaticParts" yaml:"StaticParts"`
}

// NewStruct creates a new relationship struct
func (*bodyTypeR) NewStruct() *bodyTypeR {
	return &bodyTypeR{}
}

func (r *bodyTypeR) GetAnimations() AnimationSlice {
	if r == nil {
		return nil
	}
	return r.Animations
}

func (r *bodyTypeR) GetDynamicPartMappings() DynamicPartMappingSlice {
	if r == nil {
		return nil
	}
	return r.DynamicPartMappings
}

func (r *bodyTypeR) GetStaticParts() StaticPartSlice {
	if r == nil {
		return nil
	}
	return r.StaticParts
}

// bodyTypeL is where Load methods for each relationship are stored.
type bodyTypeL struct{}

var (
	bodyTypeAllColumns            = []string{"id", "display_name", "height", "width"}
	bodyTypeColumnsWithoutDefault = []string{"display_name", "height", "width"}
	bodyTypeColumnsWithDefault    = []string{"id"}
	bodyTypePrimaryKeyColumns     = []string{"id"}
	bodyTypeGeneratedColumns      = []string{}
)

type (
	// BodyTypeSlice is an alias for a slice of pointers to BodyType.
	// This should almost always be used instead of []BodyType.
	BodyTypeSlice []*BodyType
	// BodyTypeHook is the signature for custom BodyType hook methods
	BodyTypeHook func(context.Context, boil.ContextExecutor, *BodyType) error

	bodyTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bodyTypeType                 = reflect.TypeOf(&BodyType{})
	bodyTypeMapping              = queries.MakeStructMapping(bodyTypeType)
	bodyTypePrimaryKeyMapping, _ = queries.BindMapping(bodyTypeType, bodyTypeMapping, bodyTypePrimaryKeyColumns)
	bodyTypeInsertCacheMut       sync.RWMutex
	bodyTypeInsertCache          = make(map[string]insertCache)
	bodyTypeUpdateCacheMut       sync.RWMutex
	bodyTypeUpdateCache          = make(map[string]updateCache)
	bodyTypeUpsertCacheMut       sync.RWMutex
	bodyTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bodyTypeAfterSelectHooks []BodyTypeHook

var bodyTypeBeforeInsertHooks []BodyTypeHook
var bodyTypeAfterInsertHooks []BodyTypeHook

var bodyTypeBeforeUpdateHooks []BodyTypeHook
var bodyTypeAfterUpdateHooks []BodyTypeHook

var bodyTypeBeforeDeleteHooks []BodyTypeHook
var bodyTypeAfterDeleteHooks []BodyTypeHook

var bodyTypeBeforeUpsertHooks []BodyTypeHook
var bodyTypeAfterUpsertHooks []BodyTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BodyType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BodyType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BodyType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BodyType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BodyType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BodyType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BodyType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BodyType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BodyType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bodyTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBodyTypeHook registers your hook function for all future operations.
func AddBodyTypeHook(hookPoint boil.HookPoint, bodyTypeHook BodyTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bodyTypeAfterSelectHooks = append(bodyTypeAfterSelectHooks, bodyTypeHook)
	case boil.BeforeInsertHook:
		bodyTypeBeforeInsertHooks = append(bodyTypeBeforeInsertHooks, bodyTypeHook)
	case boil.AfterInsertHook:
		bodyTypeAfterInsertHooks = append(bodyTypeAfterInsertHooks, bodyTypeHook)
	case boil.BeforeUpdateHook:
		bodyTypeBeforeUpdateHooks = append(bodyTypeBeforeUpdateHooks, bodyTypeHook)
	case boil.AfterUpdateHook:
		bodyTypeAfterUpdateHooks = append(bodyTypeAfterUpdateHooks, bodyTypeHook)
	case boil.BeforeDeleteHook:
		bodyTypeBeforeDeleteHooks = append(bodyTypeBeforeDeleteHooks, bodyTypeHook)
	case boil.AfterDeleteHook:
		bodyTypeAfterDeleteHooks = append(bodyTypeAfterDeleteHooks, bodyTypeHook)
	case boil.BeforeUpsertHook:
		bodyTypeBeforeUpsertHooks = append(bodyTypeBeforeUpsertHooks, bodyTypeHook)
	case boil.AfterUpsertHook:
		bodyTypeAfterUpsertHooks = append(bodyTypeAfterUpsertHooks, bodyTypeHook)
	}
}

// One returns a single bodyType record from the query.
func (q bodyTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BodyType, error) {
	o := &BodyType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for body_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BodyType records from the query.
func (q bodyTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (BodyTypeSlice, error) {
	var o []*BodyType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BodyType slice")
	}

	if len(bodyTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BodyType records in the query.
func (q bodyTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count body_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bodyTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if body_type exists")
	}

	return count > 0, nil
}

// Animations retrieves all the animation's Animations with an executor.
func (o *BodyType) Animations(mods ...qm.QueryMod) animationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"animation\".\"body_type_id\"=?", o.ID),
	)

	return Animations(queryMods...)
}

// DynamicPartMappings retrieves all the dynamic_part_mapping's DynamicPartMappings with an executor.
func (o *BodyType) DynamicPartMappings(mods ...qm.QueryMod) dynamicPartMappingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part_mapping\".\"body_type_id\"=?", o.ID),
	)

	return DynamicPartMappings(queryMods...)
}

// StaticParts retrieves all the static_part's StaticParts with an executor.
func (o *BodyType) StaticParts(mods ...qm.QueryMod) staticPartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"static_part\".\"body_type_id\"=?", o.ID),
	)

	return StaticParts(queryMods...)
}

// LoadAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bodyTypeL) LoadAnimations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBodyType interface{}, mods queries.Applicator) error {
	var slice []*BodyType
	var object *BodyType

	if singular {
		object = maybeBodyType.(*BodyType)
	} else {
		slice = *maybeBodyType.(*[]*BodyType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bodyTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bodyTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation`),
		qm.WhereIn(`animation.body_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load animation")
	}

	var resultSlice []*Animation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation")
	}

	if len(animationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Animations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &animationR{}
			}
			foreign.R.BodyType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BodyTypeID {
				local.R.Animations = append(local.R.Animations, foreign)
				if foreign.R == nil {
					foreign.R = &animationR{}
				}
				foreign.R.BodyType = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartMappings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bodyTypeL) LoadDynamicPartMappings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBodyType interface{}, mods queries.Applicator) error {
	var slice []*BodyType
	var object *BodyType

	if singular {
		object = maybeBodyType.(*BodyType)
	} else {
		slice = *maybeBodyType.(*[]*BodyType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bodyTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bodyTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_mapping`),
		qm.WhereIn(`dynamic_part_mapping.body_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part_mapping")
	}

	var resultSlice []*DynamicPartMapping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part_mapping")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part_mapping")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_mapping")
	}

	if len(dynamicPartMappingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicPartMappings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartMappingR{}
			}
			foreign.R.BodyType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BodyTypeID {
				local.R.DynamicPartMappings = append(local.R.DynamicPartMappings, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartMappingR{}
				}
				foreign.R.BodyType = local
				break
			}
		}
	}

	return nil
}

// LoadStaticParts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bodyTypeL) LoadStaticParts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBodyType interface{}, mods queries.Applicator) error {
	var slice []*BodyType
	var object *BodyType

	if singular {
		object = maybeBodyType.(*BodyType)
	} else {
		slice = *maybeBodyType.(*[]*BodyType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bodyTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bodyTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`static_part`),
		qm.WhereIn(`static_part.body_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load static_part")
	}

	var resultSlice []*StaticPart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice static_part")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on static_part")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for static_part")
	}

	if len(staticPartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StaticParts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &staticPartR{}
			}
			foreign.R.BodyType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BodyTypeID {
				local.R.StaticParts = append(local.R.StaticParts, foreign)
				if foreign.R == nil {
					foreign.R = &staticPartR{}
				}
				foreign.R.BodyType = local
				break
			}
		}
	}

	return nil
}

// AddAnimations adds the given related objects to the existing relationships
// of the body_type, optionally inserting them as new records.
// Appends related to o.R.Animations.
// Sets related.R.BodyType appropriately.
func (o *BodyType) AddAnimations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Animation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BodyTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"body_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, animationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BodyTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bodyTypeR{
			Animations: related,
		}
	} else {
		o.R.Animations = append(o.R.Animations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &animationR{
				BodyType: o,
			}
		} else {
			rel.R.BodyType = o
		}
	}
	return nil
}

// AddDynamicPartMappings adds the given related objects to the existing relationships
// of the body_type, optionally inserting them as new records.
// Appends related to o.R.DynamicPartMappings.
// Sets related.R.BodyType appropriately.
func (o *BodyType) AddDynamicPartMappings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPartMapping) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BodyTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part_mapping\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"body_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartMappingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BodyTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bodyTypeR{
			DynamicPartMappings: related,
		}
	} else {
		o.R.DynamicPartMappings = append(o.R.DynamicPartMappings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartMappingR{
				BodyType: o,
			}
		} else {
			rel.R.BodyType = o
		}
	}
	return nil
}

// AddStaticParts adds the given related objects to the existing relationships
// of the body_type, optionally inserting them as new records.
// Appends related to o.R.StaticParts.
// Sets related.R.BodyType appropriately.
func (o *BodyType) AddStaticParts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StaticPart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BodyTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"static_part\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"body_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, staticPartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BodyTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bodyTypeR{
			StaticParts: related,
		}
	} else {
		o.R.StaticParts = append(o.R.StaticParts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &staticPartR{
				BodyType: o,
			}
		} else {
			rel.R.BodyType = o
		}
	}
	return nil
}

// BodyTypes retrieves all the records using an executor.
func BodyTypes(mods ...qm.QueryMod) bodyTypeQuery {
	mods = append(mods, qm.From("\"body_type\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"body_type\".*"})
	}

	return bodyTypeQuery{q}
}

// FindBodyType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBodyType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BodyType, error) {
	bodyTypeObj := &BodyType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"body_type\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bodyTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from body_type")
	}

	if err = bodyTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bodyTypeObj, err
	}

	return bodyTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BodyType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no body_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bodyTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bodyTypeInsertCacheMut.RLock()
	cache, cached := bodyTypeInsertCache[key]
	bodyTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bodyTypeAllColumns,
			bodyTypeColumnsWithDefault,
			bodyTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bodyTypeType, bodyTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bodyTypeType, bodyTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"body_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"body_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into body_type")
	}

	if !cached {
		bodyTypeInsertCacheMut.Lock()
		bodyTypeInsertCache[key] = cache
		bodyTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BodyType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BodyType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bodyTypeUpdateCacheMut.RLock()
	cache, cached := bodyTypeUpdateCache[key]
	bodyTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bodyTypeAllColumns,
			bodyTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update body_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"body_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bodyTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bodyTypeType, bodyTypeMapping, append(wl, bodyTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update body_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for body_type")
	}

	if !cached {
		bodyTypeUpdateCacheMut.Lock()
		bodyTypeUpdateCache[key] = cache
		bodyTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bodyTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for body_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for body_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BodyTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bodyTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"body_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bodyTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bodyType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bodyType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BodyType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no body_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bodyTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bodyTypeUpsertCacheMut.RLock()
	cache, cached := bodyTypeUpsertCache[key]
	bodyTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bodyTypeAllColumns,
			bodyTypeColumnsWithDefault,
			bodyTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bodyTypeAllColumns,
			bodyTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert body_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bodyTypePrimaryKeyColumns))
			copy(conflict, bodyTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"body_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bodyTypeType, bodyTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bodyTypeType, bodyTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert body_type")
	}

	if !cached {
		bodyTypeUpsertCacheMut.Lock()
		bodyTypeUpsertCache[key] = cache
		bodyTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BodyType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BodyType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BodyType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bodyTypePrimaryKeyMapping)
	sql := "DELETE FROM \"body_type\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from body_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for body_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bodyTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bodyTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from body_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for body_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BodyTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bodyTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bodyTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"body_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bodyTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bodyType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for body_type")
	}

	if len(bodyTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BodyType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBodyType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BodyTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BodyTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bodyTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"body_type\".* FROM \"body_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bodyTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BodyTypeSlice")
	}

	*o = slice

	return nil
}

// BodyTypeExists checks if the BodyType row exists.
func BodyTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"body_type\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if body_type exists")
	}

	return exists, nil
}
