// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBodyTypes(t *testing.T) {
	t.Parallel()

	query := BodyTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBodyTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBodyTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BodyTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBodyTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BodyTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBodyTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BodyTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BodyType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BodyTypeExists to return true, but got false.")
	}
}

func testBodyTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bodyTypeFound, err := FindBodyType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bodyTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBodyTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BodyTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBodyTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BodyTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBodyTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bodyTypeOne := &BodyType{}
	bodyTypeTwo := &BodyType{}
	if err = randomize.Struct(seed, bodyTypeOne, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}
	if err = randomize.Struct(seed, bodyTypeTwo, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bodyTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bodyTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BodyTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBodyTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bodyTypeOne := &BodyType{}
	bodyTypeTwo := &BodyType{}
	if err = randomize.Struct(seed, bodyTypeOne, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}
	if err = randomize.Struct(seed, bodyTypeTwo, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bodyTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bodyTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bodyTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func bodyTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BodyType) error {
	*o = BodyType{}
	return nil
}

func testBodyTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BodyType{}
	o := &BodyType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BodyType object: %s", err)
	}

	AddBodyTypeHook(boil.BeforeInsertHook, bodyTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bodyTypeBeforeInsertHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.AfterInsertHook, bodyTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bodyTypeAfterInsertHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.AfterSelectHook, bodyTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bodyTypeAfterSelectHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.BeforeUpdateHook, bodyTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bodyTypeBeforeUpdateHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.AfterUpdateHook, bodyTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bodyTypeAfterUpdateHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.BeforeDeleteHook, bodyTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bodyTypeBeforeDeleteHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.AfterDeleteHook, bodyTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bodyTypeAfterDeleteHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.BeforeUpsertHook, bodyTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bodyTypeBeforeUpsertHooks = []BodyTypeHook{}

	AddBodyTypeHook(boil.AfterUpsertHook, bodyTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bodyTypeAfterUpsertHooks = []BodyTypeHook{}
}

func testBodyTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBodyTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bodyTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBodyTypeToManyAnimations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c Animation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, animationDBTypes, false, animationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BodyTypeID, a.ID)
	queries.Assign(&c.BodyTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Animations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BodyTypeID, b.BodyTypeID) {
			bFound = true
		}
		if queries.Equal(v.BodyTypeID, c.BodyTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BodyTypeSlice{&a}
	if err = a.L.LoadAnimations(ctx, tx, false, (*[]*BodyType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Animations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Animations = nil
	if err = a.L.LoadAnimations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Animations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBodyTypeToManyDynamicPartMappings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BodyTypeID, a.ID)
	queries.Assign(&c.BodyTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicPartMappings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BodyTypeID, b.BodyTypeID) {
			bFound = true
		}
		if queries.Equal(v.BodyTypeID, c.BodyTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BodyTypeSlice{&a}
	if err = a.L.LoadDynamicPartMappings(ctx, tx, false, (*[]*BodyType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicPartMappings = nil
	if err = a.L.LoadDynamicPartMappings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartMappings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBodyTypeToManyStaticParts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c StaticPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BodyTypeID, a.ID)
	queries.Assign(&c.BodyTypeID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StaticParts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BodyTypeID, b.BodyTypeID) {
			bFound = true
		}
		if queries.Equal(v.BodyTypeID, c.BodyTypeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BodyTypeSlice{&a}
	if err = a.L.LoadStaticParts(ctx, tx, false, (*[]*BodyType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaticParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StaticParts = nil
	if err = a.L.LoadStaticParts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StaticParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBodyTypeToManyAddOpAnimations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e Animation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Animation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Animation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAnimations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.BodyTypeID)
		}
		if !queries.Equal(a.ID, second.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.BodyTypeID)
		}

		if first.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Animations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Animations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Animations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBodyTypeToManySetOpAnimations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e Animation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Animation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAnimations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Animations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAnimations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Animations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.BodyTypeID)
	}
	if !queries.Equal(a.ID, e.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.BodyTypeID)
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Animations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Animations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBodyTypeToManyRemoveOpAnimations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e Animation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Animation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, animationDBTypes, false, strmangle.SetComplement(animationPrimaryKeyColumns, animationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAnimations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Animations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAnimations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Animations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Animations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Animations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Animations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBodyTypeToManyAddOpDynamicPartMappings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPartMapping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicPartMapping{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicPartMappings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.BodyTypeID)
		}
		if !queries.Equal(a.ID, second.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.BodyTypeID)
		}

		if first.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicPartMappings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicPartMappings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicPartMappings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBodyTypeToManySetOpDynamicPartMappings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPartMapping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDynamicPartMappings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDynamicPartMappings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.BodyTypeID)
	}
	if !queries.Equal(a.ID, e.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.BodyTypeID)
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DynamicPartMappings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DynamicPartMappings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBodyTypeToManyRemoveOpDynamicPartMappings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPartMapping{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDynamicPartMappings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDynamicPartMappings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DynamicPartMappings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DynamicPartMappings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DynamicPartMappings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBodyTypeToManyAddOpStaticParts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e StaticPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaticPart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StaticPart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStaticParts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, first.BodyTypeID)
		}
		if !queries.Equal(a.ID, second.BodyTypeID) {
			t.Error("foreign key was wrong value", a.ID, second.BodyTypeID)
		}

		if first.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BodyType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StaticParts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StaticParts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StaticParts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBodyTypeToManySetOpStaticParts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e StaticPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaticPart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetStaticParts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaticParts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetStaticParts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaticParts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, d.BodyTypeID)
	}
	if !queries.Equal(a.ID, e.BodyTypeID) {
		t.Error("foreign key was wrong value", a.ID, e.BodyTypeID)
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BodyType != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.StaticParts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.StaticParts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBodyTypeToManyRemoveOpStaticParts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BodyType
	var b, c, d, e StaticPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StaticPart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddStaticParts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.StaticParts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveStaticParts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.StaticParts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BodyTypeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BodyTypeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BodyType != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BodyType != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.StaticParts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.StaticParts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.StaticParts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBodyTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBodyTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BodyTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBodyTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BodyTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bodyTypeDBTypes = map[string]string{`ID`: `integer`, `DisplayName`: `character varying`}
	_               = bytes.MinRead
)

func testBodyTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bodyTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bodyTypeAllColumns) == len(bodyTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBodyTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bodyTypeAllColumns) == len(bodyTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BodyType{}
	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bodyTypeDBTypes, true, bodyTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bodyTypeAllColumns, bodyTypePrimaryKeyColumns) {
		fields = bodyTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			bodyTypeAllColumns,
			bodyTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BodyTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBodyTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(bodyTypeAllColumns) == len(bodyTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BodyType{}
	if err = randomize.Struct(seed, &o, bodyTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BodyType: %s", err)
	}

	count, err := BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bodyTypeDBTypes, false, bodyTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BodyType: %s", err)
	}

	count, err = BodyTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
