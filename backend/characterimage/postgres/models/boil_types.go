// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ExpressionType string

// Enum values for ExpressionType
const (
	ExpressionTypeNEUTRAL ExpressionType = "NEUTRAL"
)

func AllExpressionType() []ExpressionType {
	return []ExpressionType{
		ExpressionTypeNEUTRAL,
	}
}

func (e ExpressionType) IsValid() error {
	switch e {
	case ExpressionTypeNEUTRAL:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ExpressionType) String() string {
	return string(e)
}

type PropType string

// Enum values for PropType
const (
	PropTypeWEAPON_MELEE_1H PropType = "WEAPON_MELEE_1H"
	PropTypeWEAPON_MELEE_2H PropType = "WEAPON_MELEE_2H"
	PropTypeWEAPON_RANGE_1H PropType = "WEAPON_RANGE_1H"
	PropTypeWEAPON_RANGE_2H PropType = "WEAPON_RANGE_2H"
)

func AllPropType() []PropType {
	return []PropType{
		PropTypeWEAPON_MELEE_1H,
		PropTypeWEAPON_MELEE_2H,
		PropTypeWEAPON_RANGE_1H,
		PropTypeWEAPON_RANGE_2H,
	}
}

func (e PropType) IsValid() error {
	switch e {
	case PropTypeWEAPON_MELEE_1H, PropTypeWEAPON_MELEE_2H, PropTypeWEAPON_RANGE_1H, PropTypeWEAPON_RANGE_2H:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e PropType) String() string {
	return string(e)
}

type StaticPartType string

// Enum values for StaticPartType
const (
	StaticPartTypeBODY           StaticPartType = "BODY"
	StaticPartTypeHEAD           StaticPartType = "HEAD"
	StaticPartTypeHAIR           StaticPartType = "HAIR"
	StaticPartTypeEYES           StaticPartType = "EYES"
	StaticPartTypeACCESSORY_HEAD StaticPartType = "ACCESSORY_HEAD"
)

func AllStaticPartType() []StaticPartType {
	return []StaticPartType{
		StaticPartTypeBODY,
		StaticPartTypeHEAD,
		StaticPartTypeHAIR,
		StaticPartTypeEYES,
		StaticPartTypeACCESSORY_HEAD,
	}
}

func (e StaticPartType) IsValid() error {
	switch e {
	case StaticPartTypeBODY, StaticPartTypeHEAD, StaticPartTypeHAIR, StaticPartTypeEYES, StaticPartTypeACCESSORY_HEAD:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e StaticPartType) String() string {
	return string(e)
}

type DynamicPartType string

// Enum values for DynamicPartType
const (
	DynamicPartTypeLEFT_LEG  DynamicPartType = "LEFT_LEG"
	DynamicPartTypeRIGHT_LEG DynamicPartType = "RIGHT_LEG"
	DynamicPartTypeLEFT_ARM  DynamicPartType = "LEFT_ARM"
	DynamicPartTypeRIGHT_ARM DynamicPartType = "RIGHT_ARM"
)

func AllDynamicPartType() []DynamicPartType {
	return []DynamicPartType{
		DynamicPartTypeLEFT_LEG,
		DynamicPartTypeRIGHT_LEG,
		DynamicPartTypeLEFT_ARM,
		DynamicPartTypeRIGHT_ARM,
	}
}

func (e DynamicPartType) IsValid() error {
	switch e {
	case DynamicPartTypeLEFT_LEG, DynamicPartTypeRIGHT_LEG, DynamicPartTypeLEFT_ARM, DynamicPartTypeRIGHT_ARM:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e DynamicPartType) String() string {
	return string(e)
}

// NullDynamicPartType is a nullable DynamicPartType enum type. It supports SQL and JSON serialization.
type NullDynamicPartType struct {
	Val   DynamicPartType
	Valid bool
}

// NullDynamicPartTypeFrom creates a new DynamicPartType that will never be blank.
func NullDynamicPartTypeFrom(v DynamicPartType) NullDynamicPartType {
	return NewNullDynamicPartType(v, true)
}

// NullDynamicPartTypeFromPtr creates a new NullDynamicPartType that be null if s is nil.
func NullDynamicPartTypeFromPtr(v *DynamicPartType) NullDynamicPartType {
	if v == nil {
		return NewNullDynamicPartType("", false)
	}
	return NewNullDynamicPartType(*v, true)
}

// NewNullDynamicPartType creates a new NullDynamicPartType
func NewNullDynamicPartType(v DynamicPartType, valid bool) NullDynamicPartType {
	return NullDynamicPartType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullDynamicPartType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullDynamicPartType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullDynamicPartType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullDynamicPartType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = DynamicPartType(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullDynamicPartType value and also sets it to be non-null.
func (e *NullDynamicPartType) SetValid(v DynamicPartType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullDynamicPartType value, or a nil pointer if this NullDynamicPartType is null.
func (e NullDynamicPartType) Ptr() *DynamicPartType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullDynamicPartType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullDynamicPartType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullDynamicPartType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

// NullPropType is a nullable PropType enum type. It supports SQL and JSON serialization.
type NullPropType struct {
	Val   PropType
	Valid bool
}

// NullPropTypeFrom creates a new PropType that will never be blank.
func NullPropTypeFrom(v PropType) NullPropType {
	return NewNullPropType(v, true)
}

// NullPropTypeFromPtr creates a new NullPropType that be null if s is nil.
func NullPropTypeFromPtr(v *PropType) NullPropType {
	if v == nil {
		return NewNullPropType("", false)
	}
	return NewNullPropType(*v, true)
}

// NewNullPropType creates a new NullPropType
func NewNullPropType(v PropType, valid bool) NullPropType {
	return NullPropType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullPropType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullPropType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullPropType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullPropType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = PropType(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullPropType value and also sets it to be non-null.
func (e *NullPropType) SetValid(v PropType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullPropType value, or a nil pointer if this NullPropType is null.
func (e NullPropType) Ptr() *PropType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullPropType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullPropType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullPropType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

// NullStaticPartType is a nullable StaticPartType enum type. It supports SQL and JSON serialization.
type NullStaticPartType struct {
	Val   StaticPartType
	Valid bool
}

// NullStaticPartTypeFrom creates a new StaticPartType that will never be blank.
func NullStaticPartTypeFrom(v StaticPartType) NullStaticPartType {
	return NewNullStaticPartType(v, true)
}

// NullStaticPartTypeFromPtr creates a new NullStaticPartType that be null if s is nil.
func NullStaticPartTypeFromPtr(v *StaticPartType) NullStaticPartType {
	if v == nil {
		return NewNullStaticPartType("", false)
	}
	return NewNullStaticPartType(*v, true)
}

// NewNullStaticPartType creates a new NullStaticPartType
func NewNullStaticPartType(v StaticPartType, valid bool) NullStaticPartType {
	return NullStaticPartType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullStaticPartType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullStaticPartType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullStaticPartType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullStaticPartType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = StaticPartType(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullStaticPartType value and also sets it to be non-null.
func (e *NullStaticPartType) SetValid(v StaticPartType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullStaticPartType value, or a nil pointer if this NullStaticPartType is null.
func (e NullStaticPartType) Ptr() *StaticPartType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullStaticPartType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullStaticPartType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullStaticPartType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}
