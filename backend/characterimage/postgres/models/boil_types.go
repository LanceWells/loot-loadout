// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ExpressionType string

// Enum values for ExpressionType
const (
	ExpressionTypeNEUTRAL ExpressionType = "NEUTRAL"
)

func AllExpressionType() []ExpressionType {
	return []ExpressionType{
		ExpressionTypeNEUTRAL,
	}
}

func (e ExpressionType) IsValid() error {
	switch e {
	case ExpressionTypeNEUTRAL:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ExpressionType) String() string {
	return string(e)
}

type PropType string

// Enum values for PropType
const (
	PropTypeWEAPON_MELEE_1H PropType = "WEAPON_MELEE_1H"
	PropTypeWEAPON_MELEE_2H PropType = "WEAPON_MELEE_2H"
	PropTypeWEAPON_RANGE_1H PropType = "WEAPON_RANGE_1H"
	PropTypeWEAPON_RANGE_2H PropType = "WEAPON_RANGE_2H"
)

func AllPropType() []PropType {
	return []PropType{
		PropTypeWEAPON_MELEE_1H,
		PropTypeWEAPON_MELEE_2H,
		PropTypeWEAPON_RANGE_1H,
		PropTypeWEAPON_RANGE_2H,
	}
}

func (e PropType) IsValid() error {
	switch e {
	case PropTypeWEAPON_MELEE_1H, PropTypeWEAPON_MELEE_2H, PropTypeWEAPON_RANGE_1H, PropTypeWEAPON_RANGE_2H:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e PropType) String() string {
	return string(e)
}

type StaticPartType string

// Enum values for StaticPartType
const (
	StaticPartTypeBODY           StaticPartType = "BODY"
	StaticPartTypeHEAD           StaticPartType = "HEAD"
	StaticPartTypeHAIR           StaticPartType = "HAIR"
	StaticPartTypeEYES           StaticPartType = "EYES"
	StaticPartTypeACCESSORY_HEAD StaticPartType = "ACCESSORY_HEAD"
)

func AllStaticPartType() []StaticPartType {
	return []StaticPartType{
		StaticPartTypeBODY,
		StaticPartTypeHEAD,
		StaticPartTypeHAIR,
		StaticPartTypeEYES,
		StaticPartTypeACCESSORY_HEAD,
	}
}

func (e StaticPartType) IsValid() error {
	switch e {
	case StaticPartTypeBODY, StaticPartTypeHEAD, StaticPartTypeHAIR, StaticPartTypeEYES, StaticPartTypeACCESSORY_HEAD:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e StaticPartType) String() string {
	return string(e)
}

type DynamicPartType string

// Enum values for DynamicPartType
const (
	DynamicPartTypeLEFT_LEG  DynamicPartType = "LEFT_LEG"
	DynamicPartTypeRIGHT_LEG DynamicPartType = "RIGHT_LEG"
	DynamicPartTypeLEFT_ARM  DynamicPartType = "LEFT_ARM"
	DynamicPartTypeRIGHT_ARM DynamicPartType = "RIGHT_ARM"
)

func AllDynamicPartType() []DynamicPartType {
	return []DynamicPartType{
		DynamicPartTypeLEFT_LEG,
		DynamicPartTypeRIGHT_LEG,
		DynamicPartTypeLEFT_ARM,
		DynamicPartTypeRIGHT_ARM,
	}
}

func (e DynamicPartType) IsValid() error {
	switch e {
	case DynamicPartTypeLEFT_LEG, DynamicPartTypeRIGHT_LEG, DynamicPartTypeLEFT_ARM, DynamicPartTypeRIGHT_ARM:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e DynamicPartType) String() string {
	return string(e)
}
