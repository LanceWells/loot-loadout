// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ColorString is an object representing the database table.
type ColorString struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hexstring null.String `boil:"hexstring" json:"hexstring,omitempty" toml:"hexstring" yaml:"hexstring,omitempty"`

	R *colorStringR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L colorStringL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ColorStringColumns = struct {
	ID        string
	Hexstring string
}{
	ID:        "id",
	Hexstring: "hexstring",
}

var ColorStringTableColumns = struct {
	ID        string
	Hexstring string
}{
	ID:        "color_string.id",
	Hexstring: "color_string.hexstring",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ColorStringWhere = struct {
	ID        whereHelperint
	Hexstring whereHelpernull_String
}{
	ID:        whereHelperint{field: "\"color_string\".\"id\""},
	Hexstring: whereHelpernull_String{field: "\"color_string\".\"hexstring\""},
}

// ColorStringRels is where relationship names are stored.
var ColorStringRels = struct {
	AnimationFramePixels     string
	DynamicPartMappingPixels string
	DynamicPartPixels        string
}{
	AnimationFramePixels:     "AnimationFramePixels",
	DynamicPartMappingPixels: "DynamicPartMappingPixels",
	DynamicPartPixels:        "DynamicPartPixels",
}

// colorStringR is where relationships are stored.
type colorStringR struct {
	AnimationFramePixels     AnimationFramePixelSlice     `boil:"AnimationFramePixels" json:"AnimationFramePixels" toml:"AnimationFramePixels" yaml:"AnimationFramePixels"`
	DynamicPartMappingPixels DynamicPartMappingPixelSlice `boil:"DynamicPartMappingPixels" json:"DynamicPartMappingPixels" toml:"DynamicPartMappingPixels" yaml:"DynamicPartMappingPixels"`
	DynamicPartPixels        DynamicPartPixelSlice        `boil:"DynamicPartPixels" json:"DynamicPartPixels" toml:"DynamicPartPixels" yaml:"DynamicPartPixels"`
}

// NewStruct creates a new relationship struct
func (*colorStringR) NewStruct() *colorStringR {
	return &colorStringR{}
}

func (r *colorStringR) GetAnimationFramePixels() AnimationFramePixelSlice {
	if r == nil {
		return nil
	}
	return r.AnimationFramePixels
}

func (r *colorStringR) GetDynamicPartMappingPixels() DynamicPartMappingPixelSlice {
	if r == nil {
		return nil
	}
	return r.DynamicPartMappingPixels
}

func (r *colorStringR) GetDynamicPartPixels() DynamicPartPixelSlice {
	if r == nil {
		return nil
	}
	return r.DynamicPartPixels
}

// colorStringL is where Load methods for each relationship are stored.
type colorStringL struct{}

var (
	colorStringAllColumns            = []string{"id", "hexstring"}
	colorStringColumnsWithoutDefault = []string{}
	colorStringColumnsWithDefault    = []string{"id", "hexstring"}
	colorStringPrimaryKeyColumns     = []string{"id"}
	colorStringGeneratedColumns      = []string{}
)

type (
	// ColorStringSlice is an alias for a slice of pointers to ColorString.
	// This should almost always be used instead of []ColorString.
	ColorStringSlice []*ColorString
	// ColorStringHook is the signature for custom ColorString hook methods
	ColorStringHook func(context.Context, boil.ContextExecutor, *ColorString) error

	colorStringQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	colorStringType                 = reflect.TypeOf(&ColorString{})
	colorStringMapping              = queries.MakeStructMapping(colorStringType)
	colorStringPrimaryKeyMapping, _ = queries.BindMapping(colorStringType, colorStringMapping, colorStringPrimaryKeyColumns)
	colorStringInsertCacheMut       sync.RWMutex
	colorStringInsertCache          = make(map[string]insertCache)
	colorStringUpdateCacheMut       sync.RWMutex
	colorStringUpdateCache          = make(map[string]updateCache)
	colorStringUpsertCacheMut       sync.RWMutex
	colorStringUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var colorStringAfterSelectHooks []ColorStringHook

var colorStringBeforeInsertHooks []ColorStringHook
var colorStringAfterInsertHooks []ColorStringHook

var colorStringBeforeUpdateHooks []ColorStringHook
var colorStringAfterUpdateHooks []ColorStringHook

var colorStringBeforeDeleteHooks []ColorStringHook
var colorStringAfterDeleteHooks []ColorStringHook

var colorStringBeforeUpsertHooks []ColorStringHook
var colorStringAfterUpsertHooks []ColorStringHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ColorString) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ColorString) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ColorString) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ColorString) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ColorString) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ColorString) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ColorString) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ColorString) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ColorString) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range colorStringAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddColorStringHook registers your hook function for all future operations.
func AddColorStringHook(hookPoint boil.HookPoint, colorStringHook ColorStringHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		colorStringAfterSelectHooks = append(colorStringAfterSelectHooks, colorStringHook)
	case boil.BeforeInsertHook:
		colorStringBeforeInsertHooks = append(colorStringBeforeInsertHooks, colorStringHook)
	case boil.AfterInsertHook:
		colorStringAfterInsertHooks = append(colorStringAfterInsertHooks, colorStringHook)
	case boil.BeforeUpdateHook:
		colorStringBeforeUpdateHooks = append(colorStringBeforeUpdateHooks, colorStringHook)
	case boil.AfterUpdateHook:
		colorStringAfterUpdateHooks = append(colorStringAfterUpdateHooks, colorStringHook)
	case boil.BeforeDeleteHook:
		colorStringBeforeDeleteHooks = append(colorStringBeforeDeleteHooks, colorStringHook)
	case boil.AfterDeleteHook:
		colorStringAfterDeleteHooks = append(colorStringAfterDeleteHooks, colorStringHook)
	case boil.BeforeUpsertHook:
		colorStringBeforeUpsertHooks = append(colorStringBeforeUpsertHooks, colorStringHook)
	case boil.AfterUpsertHook:
		colorStringAfterUpsertHooks = append(colorStringAfterUpsertHooks, colorStringHook)
	}
}

// One returns a single colorString record from the query.
func (q colorStringQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ColorString, error) {
	o := &ColorString{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for color_string")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ColorString records from the query.
func (q colorStringQuery) All(ctx context.Context, exec boil.ContextExecutor) (ColorStringSlice, error) {
	var o []*ColorString

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ColorString slice")
	}

	if len(colorStringAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ColorString records in the query.
func (q colorStringQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count color_string rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q colorStringQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if color_string exists")
	}

	return count > 0, nil
}

// AnimationFramePixels retrieves all the animation_frame_pixel's AnimationFramePixels with an executor.
func (o *ColorString) AnimationFramePixels(mods ...qm.QueryMod) animationFramePixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"animation_frame_pixel\".\"color_string_id\"=?", o.ID),
	)

	return AnimationFramePixels(queryMods...)
}

// DynamicPartMappingPixels retrieves all the dynamic_part_mapping_pixel's DynamicPartMappingPixels with an executor.
func (o *ColorString) DynamicPartMappingPixels(mods ...qm.QueryMod) dynamicPartMappingPixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part_mapping_pixel\".\"color_string_id\"=?", o.ID),
	)

	return DynamicPartMappingPixels(queryMods...)
}

// DynamicPartPixels retrieves all the dynamic_part_pixel's DynamicPartPixels with an executor.
func (o *ColorString) DynamicPartPixels(mods ...qm.QueryMod) dynamicPartPixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part_pixel\".\"color_string_id\"=?", o.ID),
	)

	return DynamicPartPixels(queryMods...)
}

// LoadAnimationFramePixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (colorStringL) LoadAnimationFramePixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeColorString interface{}, mods queries.Applicator) error {
	var slice []*ColorString
	var object *ColorString

	if singular {
		object = maybeColorString.(*ColorString)
	} else {
		slice = *maybeColorString.(*[]*ColorString)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &colorStringR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &colorStringR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`animation_frame_pixel`),
		qm.WhereIn(`animation_frame_pixel.color_string_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load animation_frame_pixel")
	}

	var resultSlice []*AnimationFramePixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice animation_frame_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on animation_frame_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for animation_frame_pixel")
	}

	if len(animationFramePixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AnimationFramePixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &animationFramePixelR{}
			}
			foreign.R.ColorString = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ColorStringID {
				local.R.AnimationFramePixels = append(local.R.AnimationFramePixels, foreign)
				if foreign.R == nil {
					foreign.R = &animationFramePixelR{}
				}
				foreign.R.ColorString = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartMappingPixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (colorStringL) LoadDynamicPartMappingPixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeColorString interface{}, mods queries.Applicator) error {
	var slice []*ColorString
	var object *ColorString

	if singular {
		object = maybeColorString.(*ColorString)
	} else {
		slice = *maybeColorString.(*[]*ColorString)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &colorStringR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &colorStringR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_mapping_pixel`),
		qm.WhereIn(`dynamic_part_mapping_pixel.color_string_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part_mapping_pixel")
	}

	var resultSlice []*DynamicPartMappingPixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part_mapping_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part_mapping_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_mapping_pixel")
	}

	if len(dynamicPartMappingPixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicPartMappingPixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartMappingPixelR{}
			}
			foreign.R.ColorString = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ColorStringID {
				local.R.DynamicPartMappingPixels = append(local.R.DynamicPartMappingPixels, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartMappingPixelR{}
				}
				foreign.R.ColorString = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartPixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (colorStringL) LoadDynamicPartPixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeColorString interface{}, mods queries.Applicator) error {
	var slice []*ColorString
	var object *ColorString

	if singular {
		object = maybeColorString.(*ColorString)
	} else {
		slice = *maybeColorString.(*[]*ColorString)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &colorStringR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &colorStringR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_pixel`),
		qm.WhereIn(`dynamic_part_pixel.color_string_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part_pixel")
	}

	var resultSlice []*DynamicPartPixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_pixel")
	}

	if len(dynamicPartPixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicPartPixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartPixelR{}
			}
			foreign.R.ColorString = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ColorStringID {
				local.R.DynamicPartPixels = append(local.R.DynamicPartPixels, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartPixelR{}
				}
				foreign.R.ColorString = local
				break
			}
		}
	}

	return nil
}

// AddAnimationFramePixels adds the given related objects to the existing relationships
// of the color_string, optionally inserting them as new records.
// Appends related to o.R.AnimationFramePixels.
// Sets related.R.ColorString appropriately.
func (o *ColorString) AddAnimationFramePixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AnimationFramePixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColorStringID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"animation_frame_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"color_string_id"}),
				strmangle.WhereClause("\"", "\"", 2, animationFramePixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ColorStringID, rel.AnimationFrameID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColorStringID = o.ID
		}
	}

	if o.R == nil {
		o.R = &colorStringR{
			AnimationFramePixels: related,
		}
	} else {
		o.R.AnimationFramePixels = append(o.R.AnimationFramePixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &animationFramePixelR{
				ColorString: o,
			}
		} else {
			rel.R.ColorString = o
		}
	}
	return nil
}

// AddDynamicPartMappingPixels adds the given related objects to the existing relationships
// of the color_string, optionally inserting them as new records.
// Appends related to o.R.DynamicPartMappingPixels.
// Sets related.R.ColorString appropriately.
func (o *ColorString) AddDynamicPartMappingPixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPartMappingPixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColorStringID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part_mapping_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"color_string_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartMappingPixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ColorStringID, rel.DynamicPartMappingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColorStringID = o.ID
		}
	}

	if o.R == nil {
		o.R = &colorStringR{
			DynamicPartMappingPixels: related,
		}
	} else {
		o.R.DynamicPartMappingPixels = append(o.R.DynamicPartMappingPixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartMappingPixelR{
				ColorString: o,
			}
		} else {
			rel.R.ColorString = o
		}
	}
	return nil
}

// AddDynamicPartPixels adds the given related objects to the existing relationships
// of the color_string, optionally inserting them as new records.
// Appends related to o.R.DynamicPartPixels.
// Sets related.R.ColorString appropriately.
func (o *ColorString) AddDynamicPartPixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPartPixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ColorStringID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"color_string_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartPixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ColorStringID, rel.DynamicPartID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ColorStringID = o.ID
		}
	}

	if o.R == nil {
		o.R = &colorStringR{
			DynamicPartPixels: related,
		}
	} else {
		o.R.DynamicPartPixels = append(o.R.DynamicPartPixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartPixelR{
				ColorString: o,
			}
		} else {
			rel.R.ColorString = o
		}
	}
	return nil
}

// ColorStrings retrieves all the records using an executor.
func ColorStrings(mods ...qm.QueryMod) colorStringQuery {
	mods = append(mods, qm.From("\"color_string\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"color_string\".*"})
	}

	return colorStringQuery{q}
}

// FindColorString retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindColorString(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ColorString, error) {
	colorStringObj := &ColorString{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"color_string\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, colorStringObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from color_string")
	}

	if err = colorStringObj.doAfterSelectHooks(ctx, exec); err != nil {
		return colorStringObj, err
	}

	return colorStringObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ColorString) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no color_string provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colorStringColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	colorStringInsertCacheMut.RLock()
	cache, cached := colorStringInsertCache[key]
	colorStringInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			colorStringAllColumns,
			colorStringColumnsWithDefault,
			colorStringColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(colorStringType, colorStringMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(colorStringType, colorStringMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"color_string\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"color_string\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into color_string")
	}

	if !cached {
		colorStringInsertCacheMut.Lock()
		colorStringInsertCache[key] = cache
		colorStringInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ColorString.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ColorString) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	colorStringUpdateCacheMut.RLock()
	cache, cached := colorStringUpdateCache[key]
	colorStringUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			colorStringAllColumns,
			colorStringPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update color_string, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"color_string\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, colorStringPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(colorStringType, colorStringMapping, append(wl, colorStringPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update color_string row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for color_string")
	}

	if !cached {
		colorStringUpdateCacheMut.Lock()
		colorStringUpdateCache[key] = cache
		colorStringUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q colorStringQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for color_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for color_string")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ColorStringSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"color_string\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, colorStringPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in colorString slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all colorString")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ColorString) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no color_string provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(colorStringColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	colorStringUpsertCacheMut.RLock()
	cache, cached := colorStringUpsertCache[key]
	colorStringUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			colorStringAllColumns,
			colorStringColumnsWithDefault,
			colorStringColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			colorStringAllColumns,
			colorStringPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert color_string, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(colorStringPrimaryKeyColumns))
			copy(conflict, colorStringPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"color_string\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(colorStringType, colorStringMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(colorStringType, colorStringMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert color_string")
	}

	if !cached {
		colorStringUpsertCacheMut.Lock()
		colorStringUpsertCache[key] = cache
		colorStringUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ColorString record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ColorString) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ColorString provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), colorStringPrimaryKeyMapping)
	sql := "DELETE FROM \"color_string\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from color_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for color_string")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q colorStringQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no colorStringQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from color_string")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for color_string")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ColorStringSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(colorStringBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"color_string\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colorStringPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from colorString slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for color_string")
	}

	if len(colorStringAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ColorString) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindColorString(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ColorStringSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ColorStringSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), colorStringPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"color_string\".* FROM \"color_string\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, colorStringPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ColorStringSlice")
	}

	*o = slice

	return nil
}

// ColorStringExists checks if the ColorString row exists.
func ColorStringExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"color_string\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if color_string exists")
	}

	return exists, nil
}
