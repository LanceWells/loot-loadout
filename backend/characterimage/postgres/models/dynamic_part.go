// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DynamicPart is an object representing the database table.
type DynamicPart struct {
	ID                   int             `boil:"id" json:"id" toml:"id" yaml:"id"`
	DynamicPartMappingID int             `boil:"dynamic_part_mapping_id" json:"dynamic_part_mapping_id" toml:"dynamic_part_mapping_id" yaml:"dynamic_part_mapping_id"`
	DisplayName          string          `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	PartType             DynamicPartType `boil:"part_type" json:"part_type" toml:"part_type" yaml:"part_type"`

	R *dynamicPartR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicPartL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicPartColumns = struct {
	ID                   string
	DynamicPartMappingID string
	DisplayName          string
	PartType             string
}{
	ID:                   "id",
	DynamicPartMappingID: "dynamic_part_mapping_id",
	DisplayName:          "display_name",
	PartType:             "part_type",
}

var DynamicPartTableColumns = struct {
	ID                   string
	DynamicPartMappingID string
	DisplayName          string
	PartType             string
}{
	ID:                   "dynamic_part.id",
	DynamicPartMappingID: "dynamic_part.dynamic_part_mapping_id",
	DisplayName:          "dynamic_part.display_name",
	PartType:             "dynamic_part.part_type",
}

// Generated where

type whereHelperDynamicPartType struct{ field string }

func (w whereHelperDynamicPartType) EQ(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperDynamicPartType) NEQ(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperDynamicPartType) LT(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperDynamicPartType) LTE(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperDynamicPartType) GT(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperDynamicPartType) GTE(x DynamicPartType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DynamicPartWhere = struct {
	ID                   whereHelperint
	DynamicPartMappingID whereHelperint
	DisplayName          whereHelperstring
	PartType             whereHelperDynamicPartType
}{
	ID:                   whereHelperint{field: "\"dynamic_part\".\"id\""},
	DynamicPartMappingID: whereHelperint{field: "\"dynamic_part\".\"dynamic_part_mapping_id\""},
	DisplayName:          whereHelperstring{field: "\"dynamic_part\".\"display_name\""},
	PartType:             whereHelperDynamicPartType{field: "\"dynamic_part\".\"part_type\""},
}

// DynamicPartRels is where relationship names are stored.
var DynamicPartRels = struct {
	DynamicPartMapping   string
	DynamicPartThumbnail string
	DynamicPartPixels    string
}{
	DynamicPartMapping:   "DynamicPartMapping",
	DynamicPartThumbnail: "DynamicPartThumbnail",
	DynamicPartPixels:    "DynamicPartPixels",
}

// dynamicPartR is where relationships are stored.
type dynamicPartR struct {
	DynamicPartMapping   *DynamicPartMapping   `boil:"DynamicPartMapping" json:"DynamicPartMapping" toml:"DynamicPartMapping" yaml:"DynamicPartMapping"`
	DynamicPartThumbnail *DynamicPartThumbnail `boil:"DynamicPartThumbnail" json:"DynamicPartThumbnail" toml:"DynamicPartThumbnail" yaml:"DynamicPartThumbnail"`
	DynamicPartPixels    DynamicPartPixelSlice `boil:"DynamicPartPixels" json:"DynamicPartPixels" toml:"DynamicPartPixels" yaml:"DynamicPartPixels"`
}

// NewStruct creates a new relationship struct
func (*dynamicPartR) NewStruct() *dynamicPartR {
	return &dynamicPartR{}
}

func (r *dynamicPartR) GetDynamicPartMapping() *DynamicPartMapping {
	if r == nil {
		return nil
	}
	return r.DynamicPartMapping
}

func (r *dynamicPartR) GetDynamicPartThumbnail() *DynamicPartThumbnail {
	if r == nil {
		return nil
	}
	return r.DynamicPartThumbnail
}

func (r *dynamicPartR) GetDynamicPartPixels() DynamicPartPixelSlice {
	if r == nil {
		return nil
	}
	return r.DynamicPartPixels
}

// dynamicPartL is where Load methods for each relationship are stored.
type dynamicPartL struct{}

var (
	dynamicPartAllColumns            = []string{"id", "dynamic_part_mapping_id", "display_name", "part_type"}
	dynamicPartColumnsWithoutDefault = []string{"dynamic_part_mapping_id", "display_name", "part_type"}
	dynamicPartColumnsWithDefault    = []string{"id"}
	dynamicPartPrimaryKeyColumns     = []string{"id"}
	dynamicPartGeneratedColumns      = []string{}
)

type (
	// DynamicPartSlice is an alias for a slice of pointers to DynamicPart.
	// This should almost always be used instead of []DynamicPart.
	DynamicPartSlice []*DynamicPart
	// DynamicPartHook is the signature for custom DynamicPart hook methods
	DynamicPartHook func(context.Context, boil.ContextExecutor, *DynamicPart) error

	dynamicPartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicPartType                 = reflect.TypeOf(&DynamicPart{})
	dynamicPartMapping              = queries.MakeStructMapping(dynamicPartType)
	dynamicPartPrimaryKeyMapping, _ = queries.BindMapping(dynamicPartType, dynamicPartMapping, dynamicPartPrimaryKeyColumns)
	dynamicPartInsertCacheMut       sync.RWMutex
	dynamicPartInsertCache          = make(map[string]insertCache)
	dynamicPartUpdateCacheMut       sync.RWMutex
	dynamicPartUpdateCache          = make(map[string]updateCache)
	dynamicPartUpsertCacheMut       sync.RWMutex
	dynamicPartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dynamicPartAfterSelectHooks []DynamicPartHook

var dynamicPartBeforeInsertHooks []DynamicPartHook
var dynamicPartAfterInsertHooks []DynamicPartHook

var dynamicPartBeforeUpdateHooks []DynamicPartHook
var dynamicPartAfterUpdateHooks []DynamicPartHook

var dynamicPartBeforeDeleteHooks []DynamicPartHook
var dynamicPartAfterDeleteHooks []DynamicPartHook

var dynamicPartBeforeUpsertHooks []DynamicPartHook
var dynamicPartAfterUpsertHooks []DynamicPartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DynamicPart) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DynamicPart) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DynamicPart) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DynamicPart) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DynamicPart) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DynamicPart) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DynamicPart) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DynamicPart) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DynamicPart) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDynamicPartHook registers your hook function for all future operations.
func AddDynamicPartHook(hookPoint boil.HookPoint, dynamicPartHook DynamicPartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dynamicPartAfterSelectHooks = append(dynamicPartAfterSelectHooks, dynamicPartHook)
	case boil.BeforeInsertHook:
		dynamicPartBeforeInsertHooks = append(dynamicPartBeforeInsertHooks, dynamicPartHook)
	case boil.AfterInsertHook:
		dynamicPartAfterInsertHooks = append(dynamicPartAfterInsertHooks, dynamicPartHook)
	case boil.BeforeUpdateHook:
		dynamicPartBeforeUpdateHooks = append(dynamicPartBeforeUpdateHooks, dynamicPartHook)
	case boil.AfterUpdateHook:
		dynamicPartAfterUpdateHooks = append(dynamicPartAfterUpdateHooks, dynamicPartHook)
	case boil.BeforeDeleteHook:
		dynamicPartBeforeDeleteHooks = append(dynamicPartBeforeDeleteHooks, dynamicPartHook)
	case boil.AfterDeleteHook:
		dynamicPartAfterDeleteHooks = append(dynamicPartAfterDeleteHooks, dynamicPartHook)
	case boil.BeforeUpsertHook:
		dynamicPartBeforeUpsertHooks = append(dynamicPartBeforeUpsertHooks, dynamicPartHook)
	case boil.AfterUpsertHook:
		dynamicPartAfterUpsertHooks = append(dynamicPartAfterUpsertHooks, dynamicPartHook)
	}
}

// One returns a single dynamicPart record from the query.
func (q dynamicPartQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DynamicPart, error) {
	o := &DynamicPart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamic_part")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DynamicPart records from the query.
func (q dynamicPartQuery) All(ctx context.Context, exec boil.ContextExecutor) (DynamicPartSlice, error) {
	var o []*DynamicPart

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DynamicPart slice")
	}

	if len(dynamicPartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DynamicPart records in the query.
func (q dynamicPartQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamic_part rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicPartQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamic_part exists")
	}

	return count > 0, nil
}

// DynamicPartMapping pointed to by the foreign key.
func (o *DynamicPart) DynamicPartMapping(mods ...qm.QueryMod) dynamicPartMappingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DynamicPartMappingID),
	}

	queryMods = append(queryMods, mods...)

	return DynamicPartMappings(queryMods...)
}

// DynamicPartThumbnail pointed to by the foreign key.
func (o *DynamicPart) DynamicPartThumbnail(mods ...qm.QueryMod) dynamicPartThumbnailQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"dynamic_part_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return DynamicPartThumbnails(queryMods...)
}

// DynamicPartPixels retrieves all the dynamic_part_pixel's DynamicPartPixels with an executor.
func (o *DynamicPart) DynamicPartPixels(mods ...qm.QueryMod) dynamicPartPixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part_pixel\".\"dynamic_part_id\"=?", o.ID),
	)

	return DynamicPartPixels(queryMods...)
}

// LoadDynamicPartMapping allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicPartL) LoadDynamicPartMapping(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPart interface{}, mods queries.Applicator) error {
	var slice []*DynamicPart
	var object *DynamicPart

	if singular {
		object = maybeDynamicPart.(*DynamicPart)
	} else {
		slice = *maybeDynamicPart.(*[]*DynamicPart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartR{}
		}
		args = append(args, object.DynamicPartMappingID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartR{}
			}

			for _, a := range args {
				if a == obj.DynamicPartMappingID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicPartMappingID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_mapping`),
		qm.WhereIn(`dynamic_part_mapping.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DynamicPartMapping")
	}

	var resultSlice []*DynamicPartMapping
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DynamicPartMapping")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamic_part_mapping")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_mapping")
	}

	if len(dynamicPartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DynamicPartMapping = foreign
		if foreign.R == nil {
			foreign.R = &dynamicPartMappingR{}
		}
		foreign.R.DynamicParts = append(foreign.R.DynamicParts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicPartMappingID == foreign.ID {
				local.R.DynamicPartMapping = foreign
				if foreign.R == nil {
					foreign.R = &dynamicPartMappingR{}
				}
				foreign.R.DynamicParts = append(foreign.R.DynamicParts, local)
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartThumbnail allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (dynamicPartL) LoadDynamicPartThumbnail(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPart interface{}, mods queries.Applicator) error {
	var slice []*DynamicPart
	var object *DynamicPart

	if singular {
		object = maybeDynamicPart.(*DynamicPart)
	} else {
		slice = *maybeDynamicPart.(*[]*DynamicPart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_thumbnail`),
		qm.WhereIn(`dynamic_part_thumbnail.dynamic_part_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DynamicPartThumbnail")
	}

	var resultSlice []*DynamicPartThumbnail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DynamicPartThumbnail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamic_part_thumbnail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_thumbnail")
	}

	if len(dynamicPartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DynamicPartThumbnail = foreign
		if foreign.R == nil {
			foreign.R = &dynamicPartThumbnailR{}
		}
		foreign.R.DynamicPart = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.DynamicPartID {
				local.R.DynamicPartThumbnail = foreign
				if foreign.R == nil {
					foreign.R = &dynamicPartThumbnailR{}
				}
				foreign.R.DynamicPart = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartPixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicPartL) LoadDynamicPartPixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPart interface{}, mods queries.Applicator) error {
	var slice []*DynamicPart
	var object *DynamicPart

	if singular {
		object = maybeDynamicPart.(*DynamicPart)
	} else {
		slice = *maybeDynamicPart.(*[]*DynamicPart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_pixel`),
		qm.WhereIn(`dynamic_part_pixel.dynamic_part_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part_pixel")
	}

	var resultSlice []*DynamicPartPixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_pixel")
	}

	if len(dynamicPartPixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicPartPixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartPixelR{}
			}
			foreign.R.DynamicPart = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DynamicPartID {
				local.R.DynamicPartPixels = append(local.R.DynamicPartPixels, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartPixelR{}
				}
				foreign.R.DynamicPart = local
				break
			}
		}
	}

	return nil
}

// SetDynamicPartMapping of the dynamicPart to the related item.
// Sets o.R.DynamicPartMapping to related.
// Adds o to related.R.DynamicParts.
func (o *DynamicPart) SetDynamicPartMapping(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DynamicPartMapping) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamic_part\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_mapping_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicPartPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicPartMappingID = related.ID
	if o.R == nil {
		o.R = &dynamicPartR{
			DynamicPartMapping: related,
		}
	} else {
		o.R.DynamicPartMapping = related
	}

	if related.R == nil {
		related.R = &dynamicPartMappingR{
			DynamicParts: DynamicPartSlice{o},
		}
	} else {
		related.R.DynamicParts = append(related.R.DynamicParts, o)
	}

	return nil
}

// SetDynamicPartThumbnail of the dynamicPart to the related item.
// Sets o.R.DynamicPartThumbnail to related.
// Adds o to related.R.DynamicPart.
func (o *DynamicPart) SetDynamicPartThumbnail(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DynamicPartThumbnail) error {
	var err error

	if insert {
		related.DynamicPartID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"dynamic_part_thumbnail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_id"}),
			strmangle.WhereClause("\"", "\"", 2, dynamicPartThumbnailPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.DynamicPartID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.DynamicPartID = o.ID
	}

	if o.R == nil {
		o.R = &dynamicPartR{
			DynamicPartThumbnail: related,
		}
	} else {
		o.R.DynamicPartThumbnail = related
	}

	if related.R == nil {
		related.R = &dynamicPartThumbnailR{
			DynamicPart: o,
		}
	} else {
		related.R.DynamicPart = o
	}
	return nil
}

// AddDynamicPartPixels adds the given related objects to the existing relationships
// of the dynamic_part, optionally inserting them as new records.
// Appends related to o.R.DynamicPartPixels.
// Sets related.R.DynamicPart appropriately.
func (o *DynamicPart) AddDynamicPartPixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPartPixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicPartID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartPixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicPartID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dynamicPartR{
			DynamicPartPixels: related,
		}
	} else {
		o.R.DynamicPartPixels = append(o.R.DynamicPartPixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartPixelR{
				DynamicPart: o,
			}
		} else {
			rel.R.DynamicPart = o
		}
	}
	return nil
}

// DynamicParts retrieves all the records using an executor.
func DynamicParts(mods ...qm.QueryMod) dynamicPartQuery {
	mods = append(mods, qm.From("\"dynamic_part\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dynamic_part\".*"})
	}

	return dynamicPartQuery{q}
}

// FindDynamicPart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamicPart(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DynamicPart, error) {
	dynamicPartObj := &DynamicPart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamic_part\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dynamicPartObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamic_part")
	}

	if err = dynamicPartObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dynamicPartObj, err
	}

	return dynamicPartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DynamicPart) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicPartInsertCacheMut.RLock()
	cache, cached := dynamicPartInsertCache[key]
	dynamicPartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicPartAllColumns,
			dynamicPartColumnsWithDefault,
			dynamicPartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicPartType, dynamicPartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicPartType, dynamicPartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamic_part\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamic_part\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamic_part")
	}

	if !cached {
		dynamicPartInsertCacheMut.Lock()
		dynamicPartInsertCache[key] = cache
		dynamicPartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DynamicPart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DynamicPart) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dynamicPartUpdateCacheMut.RLock()
	cache, cached := dynamicPartUpdateCache[key]
	dynamicPartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicPartAllColumns,
			dynamicPartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamic_part, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamic_part\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicPartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicPartType, dynamicPartMapping, append(wl, dynamicPartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamic_part row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamic_part")
	}

	if !cached {
		dynamicPartUpdateCacheMut.Lock()
		dynamicPartUpdateCache[key] = cache
		dynamicPartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicPartQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamic_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamic_part")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicPartSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamic_part\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicPartPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamicPart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamicPart")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DynamicPart) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicPartUpsertCacheMut.RLock()
	cache, cached := dynamicPartUpsertCache[key]
	dynamicPartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicPartAllColumns,
			dynamicPartColumnsWithDefault,
			dynamicPartColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dynamicPartAllColumns,
			dynamicPartPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamic_part, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicPartPrimaryKeyColumns))
			copy(conflict, dynamicPartPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamic_part\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicPartType, dynamicPartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicPartType, dynamicPartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamic_part")
	}

	if !cached {
		dynamicPartUpsertCacheMut.Lock()
		dynamicPartUpsertCache[key] = cache
		dynamicPartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DynamicPart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DynamicPart) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DynamicPart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicPartPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamic_part\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamic_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamic_part")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicPartQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicPartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamic_part")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicPartSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dynamicPartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamic_part\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamicPart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part")
	}

	if len(dynamicPartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DynamicPart) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDynamicPart(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicPartSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicPartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamic_part\".* FROM \"dynamic_part\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicPartSlice")
	}

	*o = slice

	return nil
}

// DynamicPartExists checks if the DynamicPart row exists.
func DynamicPartExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamic_part\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamic_part exists")
	}

	return exists, nil
}
