// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DynamicPartMapping is an object representing the database table.
type DynamicPartMapping struct {
	ID         int             `boil:"id" json:"id" toml:"id" yaml:"id"`
	BodyTypeID int             `boil:"body_type_id" json:"body_type_id" toml:"body_type_id" yaml:"body_type_id"`
	PartType   DynamicPartType `boil:"part_type" json:"part_type" toml:"part_type" yaml:"part_type"`

	R *dynamicPartMappingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicPartMappingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicPartMappingColumns = struct {
	ID         string
	BodyTypeID string
	PartType   string
}{
	ID:         "id",
	BodyTypeID: "body_type_id",
	PartType:   "part_type",
}

var DynamicPartMappingTableColumns = struct {
	ID         string
	BodyTypeID string
	PartType   string
}{
	ID:         "dynamic_part_mapping.id",
	BodyTypeID: "dynamic_part_mapping.body_type_id",
	PartType:   "dynamic_part_mapping.part_type",
}

// Generated where

var DynamicPartMappingWhere = struct {
	ID         whereHelperint
	BodyTypeID whereHelperint
	PartType   whereHelperDynamicPartType
}{
	ID:         whereHelperint{field: "\"dynamic_part_mapping\".\"id\""},
	BodyTypeID: whereHelperint{field: "\"dynamic_part_mapping\".\"body_type_id\""},
	PartType:   whereHelperDynamicPartType{field: "\"dynamic_part_mapping\".\"part_type\""},
}

// DynamicPartMappingRels is where relationship names are stored.
var DynamicPartMappingRels = struct {
	BodyType                 string
	DynamicParts             string
	DynamicPartMappingPixels string
}{
	BodyType:                 "BodyType",
	DynamicParts:             "DynamicParts",
	DynamicPartMappingPixels: "DynamicPartMappingPixels",
}

// dynamicPartMappingR is where relationships are stored.
type dynamicPartMappingR struct {
	BodyType                 *BodyType                    `boil:"BodyType" json:"BodyType" toml:"BodyType" yaml:"BodyType"`
	DynamicParts             DynamicPartSlice             `boil:"DynamicParts" json:"DynamicParts" toml:"DynamicParts" yaml:"DynamicParts"`
	DynamicPartMappingPixels DynamicPartMappingPixelSlice `boil:"DynamicPartMappingPixels" json:"DynamicPartMappingPixels" toml:"DynamicPartMappingPixels" yaml:"DynamicPartMappingPixels"`
}

// NewStruct creates a new relationship struct
func (*dynamicPartMappingR) NewStruct() *dynamicPartMappingR {
	return &dynamicPartMappingR{}
}

func (r *dynamicPartMappingR) GetBodyType() *BodyType {
	if r == nil {
		return nil
	}
	return r.BodyType
}

func (r *dynamicPartMappingR) GetDynamicParts() DynamicPartSlice {
	if r == nil {
		return nil
	}
	return r.DynamicParts
}

func (r *dynamicPartMappingR) GetDynamicPartMappingPixels() DynamicPartMappingPixelSlice {
	if r == nil {
		return nil
	}
	return r.DynamicPartMappingPixels
}

// dynamicPartMappingL is where Load methods for each relationship are stored.
type dynamicPartMappingL struct{}

var (
	dynamicPartMappingAllColumns            = []string{"id", "body_type_id", "part_type"}
	dynamicPartMappingColumnsWithoutDefault = []string{"body_type_id", "part_type"}
	dynamicPartMappingColumnsWithDefault    = []string{"id"}
	dynamicPartMappingPrimaryKeyColumns     = []string{"id"}
	dynamicPartMappingGeneratedColumns      = []string{}
)

type (
	// DynamicPartMappingSlice is an alias for a slice of pointers to DynamicPartMapping.
	// This should almost always be used instead of []DynamicPartMapping.
	DynamicPartMappingSlice []*DynamicPartMapping
	// DynamicPartMappingHook is the signature for custom DynamicPartMapping hook methods
	DynamicPartMappingHook func(context.Context, boil.ContextExecutor, *DynamicPartMapping) error

	dynamicPartMappingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicPartMappingType                 = reflect.TypeOf(&DynamicPartMapping{})
	dynamicPartMappingMapping              = queries.MakeStructMapping(dynamicPartMappingType)
	dynamicPartMappingPrimaryKeyMapping, _ = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, dynamicPartMappingPrimaryKeyColumns)
	dynamicPartMappingInsertCacheMut       sync.RWMutex
	dynamicPartMappingInsertCache          = make(map[string]insertCache)
	dynamicPartMappingUpdateCacheMut       sync.RWMutex
	dynamicPartMappingUpdateCache          = make(map[string]updateCache)
	dynamicPartMappingUpsertCacheMut       sync.RWMutex
	dynamicPartMappingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dynamicPartMappingAfterSelectHooks []DynamicPartMappingHook

var dynamicPartMappingBeforeInsertHooks []DynamicPartMappingHook
var dynamicPartMappingAfterInsertHooks []DynamicPartMappingHook

var dynamicPartMappingBeforeUpdateHooks []DynamicPartMappingHook
var dynamicPartMappingAfterUpdateHooks []DynamicPartMappingHook

var dynamicPartMappingBeforeDeleteHooks []DynamicPartMappingHook
var dynamicPartMappingAfterDeleteHooks []DynamicPartMappingHook

var dynamicPartMappingBeforeUpsertHooks []DynamicPartMappingHook
var dynamicPartMappingAfterUpsertHooks []DynamicPartMappingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DynamicPartMapping) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DynamicPartMapping) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DynamicPartMapping) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DynamicPartMapping) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DynamicPartMapping) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DynamicPartMapping) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DynamicPartMapping) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DynamicPartMapping) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DynamicPartMapping) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartMappingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDynamicPartMappingHook registers your hook function for all future operations.
func AddDynamicPartMappingHook(hookPoint boil.HookPoint, dynamicPartMappingHook DynamicPartMappingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dynamicPartMappingAfterSelectHooks = append(dynamicPartMappingAfterSelectHooks, dynamicPartMappingHook)
	case boil.BeforeInsertHook:
		dynamicPartMappingBeforeInsertHooks = append(dynamicPartMappingBeforeInsertHooks, dynamicPartMappingHook)
	case boil.AfterInsertHook:
		dynamicPartMappingAfterInsertHooks = append(dynamicPartMappingAfterInsertHooks, dynamicPartMappingHook)
	case boil.BeforeUpdateHook:
		dynamicPartMappingBeforeUpdateHooks = append(dynamicPartMappingBeforeUpdateHooks, dynamicPartMappingHook)
	case boil.AfterUpdateHook:
		dynamicPartMappingAfterUpdateHooks = append(dynamicPartMappingAfterUpdateHooks, dynamicPartMappingHook)
	case boil.BeforeDeleteHook:
		dynamicPartMappingBeforeDeleteHooks = append(dynamicPartMappingBeforeDeleteHooks, dynamicPartMappingHook)
	case boil.AfterDeleteHook:
		dynamicPartMappingAfterDeleteHooks = append(dynamicPartMappingAfterDeleteHooks, dynamicPartMappingHook)
	case boil.BeforeUpsertHook:
		dynamicPartMappingBeforeUpsertHooks = append(dynamicPartMappingBeforeUpsertHooks, dynamicPartMappingHook)
	case boil.AfterUpsertHook:
		dynamicPartMappingAfterUpsertHooks = append(dynamicPartMappingAfterUpsertHooks, dynamicPartMappingHook)
	}
}

// One returns a single dynamicPartMapping record from the query.
func (q dynamicPartMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DynamicPartMapping, error) {
	o := &DynamicPartMapping{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamic_part_mapping")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DynamicPartMapping records from the query.
func (q dynamicPartMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (DynamicPartMappingSlice, error) {
	var o []*DynamicPartMapping

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DynamicPartMapping slice")
	}

	if len(dynamicPartMappingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DynamicPartMapping records in the query.
func (q dynamicPartMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamic_part_mapping rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicPartMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamic_part_mapping exists")
	}

	return count > 0, nil
}

// BodyType pointed to by the foreign key.
func (o *DynamicPartMapping) BodyType(mods ...qm.QueryMod) bodyTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BodyTypeID),
	}

	queryMods = append(queryMods, mods...)

	return BodyTypes(queryMods...)
}

// DynamicParts retrieves all the dynamic_part's DynamicParts with an executor.
func (o *DynamicPartMapping) DynamicParts(mods ...qm.QueryMod) dynamicPartQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part\".\"dynamic_part_mapping_id\"=?", o.ID),
	)

	return DynamicParts(queryMods...)
}

// DynamicPartMappingPixels retrieves all the dynamic_part_mapping_pixel's DynamicPartMappingPixels with an executor.
func (o *DynamicPartMapping) DynamicPartMappingPixels(mods ...qm.QueryMod) dynamicPartMappingPixelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dynamic_part_mapping_pixel\".\"dynamic_part_mapping_id\"=?", o.ID),
	)

	return DynamicPartMappingPixels(queryMods...)
}

// LoadBodyType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicPartMappingL) LoadBodyType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPartMapping interface{}, mods queries.Applicator) error {
	var slice []*DynamicPartMapping
	var object *DynamicPartMapping

	if singular {
		object = maybeDynamicPartMapping.(*DynamicPartMapping)
	} else {
		slice = *maybeDynamicPartMapping.(*[]*DynamicPartMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartMappingR{}
		}
		args = append(args, object.BodyTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartMappingR{}
			}

			for _, a := range args {
				if a == obj.BodyTypeID {
					continue Outer
				}
			}

			args = append(args, obj.BodyTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`body_type`),
		qm.WhereIn(`body_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BodyType")
	}

	var resultSlice []*BodyType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BodyType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for body_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for body_type")
	}

	if len(dynamicPartMappingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BodyType = foreign
		if foreign.R == nil {
			foreign.R = &bodyTypeR{}
		}
		foreign.R.DynamicPartMappings = append(foreign.R.DynamicPartMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BodyTypeID == foreign.ID {
				local.R.BodyType = foreign
				if foreign.R == nil {
					foreign.R = &bodyTypeR{}
				}
				foreign.R.DynamicPartMappings = append(foreign.R.DynamicPartMappings, local)
				break
			}
		}
	}

	return nil
}

// LoadDynamicParts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicPartMappingL) LoadDynamicParts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPartMapping interface{}, mods queries.Applicator) error {
	var slice []*DynamicPartMapping
	var object *DynamicPartMapping

	if singular {
		object = maybeDynamicPartMapping.(*DynamicPartMapping)
	} else {
		slice = *maybeDynamicPartMapping.(*[]*DynamicPartMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartMappingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartMappingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part`),
		qm.WhereIn(`dynamic_part.dynamic_part_mapping_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part")
	}

	var resultSlice []*DynamicPart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part")
	}

	if len(dynamicPartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicParts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartR{}
			}
			foreign.R.DynamicPartMapping = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DynamicPartMappingID {
				local.R.DynamicParts = append(local.R.DynamicParts, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartR{}
				}
				foreign.R.DynamicPartMapping = local
				break
			}
		}
	}

	return nil
}

// LoadDynamicPartMappingPixels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dynamicPartMappingL) LoadDynamicPartMappingPixels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPartMapping interface{}, mods queries.Applicator) error {
	var slice []*DynamicPartMapping
	var object *DynamicPartMapping

	if singular {
		object = maybeDynamicPartMapping.(*DynamicPartMapping)
	} else {
		slice = *maybeDynamicPartMapping.(*[]*DynamicPartMapping)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartMappingR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartMappingR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part_mapping_pixel`),
		qm.WhereIn(`dynamic_part_mapping_pixel.dynamic_part_mapping_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dynamic_part_mapping_pixel")
	}

	var resultSlice []*DynamicPartMappingPixel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dynamic_part_mapping_pixel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dynamic_part_mapping_pixel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part_mapping_pixel")
	}

	if len(dynamicPartMappingPixelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DynamicPartMappingPixels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dynamicPartMappingPixelR{}
			}
			foreign.R.DynamicPartMapping = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DynamicPartMappingID {
				local.R.DynamicPartMappingPixels = append(local.R.DynamicPartMappingPixels, foreign)
				if foreign.R == nil {
					foreign.R = &dynamicPartMappingPixelR{}
				}
				foreign.R.DynamicPartMapping = local
				break
			}
		}
	}

	return nil
}

// SetBodyType of the dynamicPartMapping to the related item.
// Sets o.R.BodyType to related.
// Adds o to related.R.DynamicPartMappings.
func (o *DynamicPartMapping) SetBodyType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BodyType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamic_part_mapping\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"body_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicPartMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BodyTypeID = related.ID
	if o.R == nil {
		o.R = &dynamicPartMappingR{
			BodyType: related,
		}
	} else {
		o.R.BodyType = related
	}

	if related.R == nil {
		related.R = &bodyTypeR{
			DynamicPartMappings: DynamicPartMappingSlice{o},
		}
	} else {
		related.R.DynamicPartMappings = append(related.R.DynamicPartMappings, o)
	}

	return nil
}

// AddDynamicParts adds the given related objects to the existing relationships
// of the dynamic_part_mapping, optionally inserting them as new records.
// Appends related to o.R.DynamicParts.
// Sets related.R.DynamicPartMapping appropriately.
func (o *DynamicPartMapping) AddDynamicParts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPart) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicPartMappingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_mapping_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicPartMappingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dynamicPartMappingR{
			DynamicParts: related,
		}
	} else {
		o.R.DynamicParts = append(o.R.DynamicParts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartR{
				DynamicPartMapping: o,
			}
		} else {
			rel.R.DynamicPartMapping = o
		}
	}
	return nil
}

// AddDynamicPartMappingPixels adds the given related objects to the existing relationships
// of the dynamic_part_mapping, optionally inserting them as new records.
// Appends related to o.R.DynamicPartMappingPixels.
// Sets related.R.DynamicPartMapping appropriately.
func (o *DynamicPartMapping) AddDynamicPartMappingPixels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DynamicPartMappingPixel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DynamicPartMappingID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dynamic_part_mapping_pixel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_mapping_id"}),
				strmangle.WhereClause("\"", "\"", 2, dynamicPartMappingPixelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ColorStringID, rel.DynamicPartMappingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DynamicPartMappingID = o.ID
		}
	}

	if o.R == nil {
		o.R = &dynamicPartMappingR{
			DynamicPartMappingPixels: related,
		}
	} else {
		o.R.DynamicPartMappingPixels = append(o.R.DynamicPartMappingPixels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dynamicPartMappingPixelR{
				DynamicPartMapping: o,
			}
		} else {
			rel.R.DynamicPartMapping = o
		}
	}
	return nil
}

// DynamicPartMappings retrieves all the records using an executor.
func DynamicPartMappings(mods ...qm.QueryMod) dynamicPartMappingQuery {
	mods = append(mods, qm.From("\"dynamic_part_mapping\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dynamic_part_mapping\".*"})
	}

	return dynamicPartMappingQuery{q}
}

// FindDynamicPartMapping retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamicPartMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DynamicPartMapping, error) {
	dynamicPartMappingObj := &DynamicPartMapping{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamic_part_mapping\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dynamicPartMappingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamic_part_mapping")
	}

	if err = dynamicPartMappingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dynamicPartMappingObj, err
	}

	return dynamicPartMappingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DynamicPartMapping) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part_mapping provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartMappingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicPartMappingInsertCacheMut.RLock()
	cache, cached := dynamicPartMappingInsertCache[key]
	dynamicPartMappingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicPartMappingAllColumns,
			dynamicPartMappingColumnsWithDefault,
			dynamicPartMappingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamic_part_mapping\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamic_part_mapping\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamic_part_mapping")
	}

	if !cached {
		dynamicPartMappingInsertCacheMut.Lock()
		dynamicPartMappingInsertCache[key] = cache
		dynamicPartMappingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DynamicPartMapping.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DynamicPartMapping) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dynamicPartMappingUpdateCacheMut.RLock()
	cache, cached := dynamicPartMappingUpdateCache[key]
	dynamicPartMappingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicPartMappingAllColumns,
			dynamicPartMappingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamic_part_mapping, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamic_part_mapping\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicPartMappingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, append(wl, dynamicPartMappingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamic_part_mapping row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamic_part_mapping")
	}

	if !cached {
		dynamicPartMappingUpdateCacheMut.Lock()
		dynamicPartMappingUpdateCache[key] = cache
		dynamicPartMappingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicPartMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamic_part_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamic_part_mapping")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicPartMappingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamic_part_mapping\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicPartMappingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamicPartMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamicPartMapping")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DynamicPartMapping) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part_mapping provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartMappingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicPartMappingUpsertCacheMut.RLock()
	cache, cached := dynamicPartMappingUpsertCache[key]
	dynamicPartMappingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicPartMappingAllColumns,
			dynamicPartMappingColumnsWithDefault,
			dynamicPartMappingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dynamicPartMappingAllColumns,
			dynamicPartMappingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamic_part_mapping, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicPartMappingPrimaryKeyColumns))
			copy(conflict, dynamicPartMappingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamic_part_mapping\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicPartMappingType, dynamicPartMappingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamic_part_mapping")
	}

	if !cached {
		dynamicPartMappingUpsertCacheMut.Lock()
		dynamicPartMappingUpsertCache[key] = cache
		dynamicPartMappingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DynamicPartMapping record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DynamicPartMapping) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DynamicPartMapping provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicPartMappingPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamic_part_mapping\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamic_part_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamic_part_mapping")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicPartMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicPartMappingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamic_part_mapping")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part_mapping")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicPartMappingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dynamicPartMappingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamic_part_mapping\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartMappingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamicPartMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part_mapping")
	}

	if len(dynamicPartMappingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DynamicPartMapping) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDynamicPartMapping(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicPartMappingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicPartMappingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamic_part_mapping\".* FROM \"dynamic_part_mapping\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartMappingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicPartMappingSlice")
	}

	*o = slice

	return nil
}

// DynamicPartMappingExists checks if the DynamicPartMapping row exists.
func DynamicPartMappingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamic_part_mapping\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamic_part_mapping exists")
	}

	return exists, nil
}
