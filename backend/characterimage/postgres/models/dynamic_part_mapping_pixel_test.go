// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDynamicPartMappingPixels(t *testing.T) {
	t.Parallel()

	query := DynamicPartMappingPixels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDynamicPartMappingPixelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingPixelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DynamicPartMappingPixels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingPixelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartMappingPixelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingPixelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DynamicPartMappingPixelExists(ctx, tx, o.ColorStringID, o.DynamicPartMappingID)
	if err != nil {
		t.Errorf("Unable to check if DynamicPartMappingPixel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DynamicPartMappingPixelExists to return true, but got false.")
	}
}

func testDynamicPartMappingPixelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dynamicPartMappingPixelFound, err := FindDynamicPartMappingPixel(ctx, tx, o.ColorStringID, o.DynamicPartMappingID)
	if err != nil {
		t.Error(err)
	}

	if dynamicPartMappingPixelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDynamicPartMappingPixelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DynamicPartMappingPixels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingPixelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DynamicPartMappingPixels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDynamicPartMappingPixelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dynamicPartMappingPixelOne := &DynamicPartMappingPixel{}
	dynamicPartMappingPixelTwo := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, dynamicPartMappingPixelOne, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartMappingPixelTwo, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartMappingPixelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartMappingPixelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicPartMappingPixels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDynamicPartMappingPixelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dynamicPartMappingPixelOne := &DynamicPartMappingPixel{}
	dynamicPartMappingPixelTwo := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, dynamicPartMappingPixelOne, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartMappingPixelTwo, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartMappingPixelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartMappingPixelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dynamicPartMappingPixelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func dynamicPartMappingPixelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMappingPixel) error {
	*o = DynamicPartMappingPixel{}
	return nil
}

func testDynamicPartMappingPixelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DynamicPartMappingPixel{}
	o := &DynamicPartMappingPixel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel object: %s", err)
	}

	AddDynamicPartMappingPixelHook(boil.BeforeInsertHook, dynamicPartMappingPixelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelBeforeInsertHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.AfterInsertHook, dynamicPartMappingPixelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelAfterInsertHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.AfterSelectHook, dynamicPartMappingPixelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelAfterSelectHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.BeforeUpdateHook, dynamicPartMappingPixelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelBeforeUpdateHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.AfterUpdateHook, dynamicPartMappingPixelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelAfterUpdateHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.BeforeDeleteHook, dynamicPartMappingPixelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelBeforeDeleteHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.AfterDeleteHook, dynamicPartMappingPixelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelAfterDeleteHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.BeforeUpsertHook, dynamicPartMappingPixelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelBeforeUpsertHooks = []DynamicPartMappingPixelHook{}

	AddDynamicPartMappingPixelHook(boil.AfterUpsertHook, dynamicPartMappingPixelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingPixelAfterUpsertHooks = []DynamicPartMappingPixelHook{}
}

func testDynamicPartMappingPixelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartMappingPixelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dynamicPartMappingPixelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartMappingPixelToOneColorStringUsingColorString(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DynamicPartMappingPixel
	var foreign ColorString

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, colorStringDBTypes, false, colorStringColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ColorString struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ColorStringID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ColorString().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DynamicPartMappingPixelSlice{&local}
	if err = local.L.LoadColorString(ctx, tx, false, (*[]*DynamicPartMappingPixel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ColorString == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ColorString = nil
	if err = local.L.LoadColorString(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ColorString == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDynamicPartMappingPixelToOneDynamicPartMappingUsingDynamicPartMapping(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DynamicPartMappingPixel
	var foreign DynamicPartMapping

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DynamicPartMappingID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DynamicPartMapping().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DynamicPartMappingPixelSlice{&local}
	if err = local.L.LoadDynamicPartMapping(ctx, tx, false, (*[]*DynamicPartMappingPixel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartMapping == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DynamicPartMapping = nil
	if err = local.L.LoadDynamicPartMapping(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartMapping == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDynamicPartMappingPixelToOneSetOpColorStringUsingColorString(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMappingPixel
	var b, c ColorString

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingPixelDBTypes, false, strmangle.SetComplement(dynamicPartMappingPixelPrimaryKeyColumns, dynamicPartMappingPixelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, colorStringDBTypes, false, strmangle.SetComplement(colorStringPrimaryKeyColumns, colorStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, colorStringDBTypes, false, strmangle.SetComplement(colorStringPrimaryKeyColumns, colorStringColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ColorString{&b, &c} {
		err = a.SetColorString(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ColorString != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DynamicPartMappingPixels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ColorStringID != x.ID {
			t.Error("foreign key was wrong value", a.ColorStringID)
		}

		if exists, err := DynamicPartMappingPixelExists(ctx, tx, a.ColorStringID, a.DynamicPartMappingID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testDynamicPartMappingPixelToOneSetOpDynamicPartMappingUsingDynamicPartMapping(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMappingPixel
	var b, c DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingPixelDBTypes, false, strmangle.SetComplement(dynamicPartMappingPixelPrimaryKeyColumns, dynamicPartMappingPixelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DynamicPartMapping{&b, &c} {
		err = a.SetDynamicPartMapping(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DynamicPartMapping != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DynamicPartMappingPixels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DynamicPartMappingID != x.ID {
			t.Error("foreign key was wrong value", a.DynamicPartMappingID)
		}

		if exists, err := DynamicPartMappingPixelExists(ctx, tx, a.ColorStringID, a.DynamicPartMappingID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testDynamicPartMappingPixelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingPixelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartMappingPixelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingPixelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicPartMappingPixels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dynamicPartMappingPixelDBTypes = map[string]string{`ColorStringID`: `integer`, `DynamicPartMappingID`: `integer`, `X`: `smallint`, `Y`: `smallint`}
	_                              = bytes.MinRead
)

func testDynamicPartMappingPixelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dynamicPartMappingPixelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dynamicPartMappingPixelAllColumns) == len(dynamicPartMappingPixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDynamicPartMappingPixelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dynamicPartMappingPixelAllColumns) == len(dynamicPartMappingPixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartMappingPixelDBTypes, true, dynamicPartMappingPixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dynamicPartMappingPixelAllColumns, dynamicPartMappingPixelPrimaryKeyColumns) {
		fields = dynamicPartMappingPixelAllColumns
	} else {
		fields = strmangle.SetComplement(
			dynamicPartMappingPixelAllColumns,
			dynamicPartMappingPixelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DynamicPartMappingPixelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDynamicPartMappingPixelsUpsert(t *testing.T) {
	t.Parallel()

	if len(dynamicPartMappingPixelAllColumns) == len(dynamicPartMappingPixelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DynamicPartMappingPixel{}
	if err = randomize.Struct(seed, &o, dynamicPartMappingPixelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPartMappingPixel: %s", err)
	}

	count, err := DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMappingPixel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPartMappingPixel: %s", err)
	}

	count, err = DynamicPartMappingPixels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
