// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDynamicPartMappings(t *testing.T) {
	t.Parallel()

	query := DynamicPartMappings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDynamicPartMappingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DynamicPartMappings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartMappingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartMappingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DynamicPartMappingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DynamicPartMapping exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DynamicPartMappingExists to return true, but got false.")
	}
}

func testDynamicPartMappingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dynamicPartMappingFound, err := FindDynamicPartMapping(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dynamicPartMappingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDynamicPartMappingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DynamicPartMappings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DynamicPartMappings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDynamicPartMappingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dynamicPartMappingOne := &DynamicPartMapping{}
	dynamicPartMappingTwo := &DynamicPartMapping{}
	if err = randomize.Struct(seed, dynamicPartMappingOne, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartMappingTwo, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartMappingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartMappingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicPartMappings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDynamicPartMappingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dynamicPartMappingOne := &DynamicPartMapping{}
	dynamicPartMappingTwo := &DynamicPartMapping{}
	if err = randomize.Struct(seed, dynamicPartMappingOne, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartMappingTwo, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartMappingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartMappingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dynamicPartMappingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func dynamicPartMappingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPartMapping) error {
	*o = DynamicPartMapping{}
	return nil
}

func testDynamicPartMappingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DynamicPartMapping{}
	o := &DynamicPartMapping{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping object: %s", err)
	}

	AddDynamicPartMappingHook(boil.BeforeInsertHook, dynamicPartMappingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingBeforeInsertHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.AfterInsertHook, dynamicPartMappingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingAfterInsertHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.AfterSelectHook, dynamicPartMappingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingAfterSelectHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.BeforeUpdateHook, dynamicPartMappingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingBeforeUpdateHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.AfterUpdateHook, dynamicPartMappingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingAfterUpdateHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.BeforeDeleteHook, dynamicPartMappingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingBeforeDeleteHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.AfterDeleteHook, dynamicPartMappingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingAfterDeleteHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.BeforeUpsertHook, dynamicPartMappingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingBeforeUpsertHooks = []DynamicPartMappingHook{}

	AddDynamicPartMappingHook(boil.AfterUpsertHook, dynamicPartMappingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartMappingAfterUpsertHooks = []DynamicPartMappingHook{}
}

func testDynamicPartMappingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartMappingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dynamicPartMappingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartMappingToManyDynamicParts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMapping
	var b, c DynamicPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicPartMappingID = a.ID
	c.DynamicPartMappingID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicParts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicPartMappingID == b.DynamicPartMappingID {
			bFound = true
		}
		if v.DynamicPartMappingID == c.DynamicPartMappingID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicPartMappingSlice{&a}
	if err = a.L.LoadDynamicParts(ctx, tx, false, (*[]*DynamicPartMapping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicParts = nil
	if err = a.L.LoadDynamicParts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicParts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicPartMappingToManyDynamicPartMappingPixels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMapping
	var b, c DynamicPartMappingPixel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartMappingPixelDBTypes, false, dynamicPartMappingPixelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicPartMappingID = a.ID
	c.DynamicPartMappingID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicPartMappingPixels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicPartMappingID == b.DynamicPartMappingID {
			bFound = true
		}
		if v.DynamicPartMappingID == c.DynamicPartMappingID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicPartMappingSlice{&a}
	if err = a.L.LoadDynamicPartMappingPixels(ctx, tx, false, (*[]*DynamicPartMapping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartMappingPixels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicPartMappingPixels = nil
	if err = a.L.LoadDynamicPartMappingPixels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartMappingPixels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicPartMappingToManyAddOpDynamicParts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMapping
	var b, c, d, e DynamicPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPart{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartDBTypes, false, strmangle.SetComplement(dynamicPartPrimaryKeyColumns, dynamicPartColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicPart{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicParts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DynamicPartMappingID {
			t.Error("foreign key was wrong value", a.ID, first.DynamicPartMappingID)
		}
		if a.ID != second.DynamicPartMappingID {
			t.Error("foreign key was wrong value", a.ID, second.DynamicPartMappingID)
		}

		if first.R.DynamicPartMapping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DynamicPartMapping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicParts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicParts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicParts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicPartMappingToManyAddOpDynamicPartMappingPixels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMapping
	var b, c, d, e DynamicPartMappingPixel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPartMappingPixel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartMappingPixelDBTypes, false, strmangle.SetComplement(dynamicPartMappingPixelPrimaryKeyColumns, dynamicPartMappingPixelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicPartMappingPixel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicPartMappingPixels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DynamicPartMappingID {
			t.Error("foreign key was wrong value", a.ID, first.DynamicPartMappingID)
		}
		if a.ID != second.DynamicPartMappingID {
			t.Error("foreign key was wrong value", a.ID, second.DynamicPartMappingID)
		}

		if first.R.DynamicPartMapping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DynamicPartMapping != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicPartMappingPixels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicPartMappingPixels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicPartMappingPixels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicPartMappingToOneBodyTypeUsingBodyType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DynamicPartMapping
	var foreign BodyType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BodyTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BodyType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DynamicPartMappingSlice{&local}
	if err = local.L.LoadBodyType(ctx, tx, false, (*[]*DynamicPartMapping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BodyType = nil
	if err = local.L.LoadBodyType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDynamicPartMappingToOneSetOpBodyTypeUsingBodyType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPartMapping
	var b, c BodyType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BodyType{&b, &c} {
		err = a.SetBodyType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BodyType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DynamicPartMappings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BodyTypeID != x.ID {
			t.Error("foreign key was wrong value", a.BodyTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BodyTypeID))
		reflect.Indirect(reflect.ValueOf(&a.BodyTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BodyTypeID != x.ID {
			t.Error("foreign key was wrong value", a.BodyTypeID, x.ID)
		}
	}
}

func testDynamicPartMappingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartMappingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartMappingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicPartMappings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dynamicPartMappingDBTypes = map[string]string{`ID`: `integer`, `BodyTypeID`: `integer`, `PartType`: `enum.dynamic_part_type('LEFT_LEG','RIGHT_LEG','LEFT_ARM','RIGHT_ARM')`}
	_                         = bytes.MinRead
)

func testDynamicPartMappingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dynamicPartMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dynamicPartMappingAllColumns) == len(dynamicPartMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDynamicPartMappingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dynamicPartMappingAllColumns) == len(dynamicPartMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPartMapping{}
	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartMappingDBTypes, true, dynamicPartMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dynamicPartMappingAllColumns, dynamicPartMappingPrimaryKeyColumns) {
		fields = dynamicPartMappingAllColumns
	} else {
		fields = strmangle.SetComplement(
			dynamicPartMappingAllColumns,
			dynamicPartMappingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DynamicPartMappingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDynamicPartMappingsUpsert(t *testing.T) {
	t.Parallel()

	if len(dynamicPartMappingAllColumns) == len(dynamicPartMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DynamicPartMapping{}
	if err = randomize.Struct(seed, &o, dynamicPartMappingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPartMapping: %s", err)
	}

	count, err := DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dynamicPartMappingDBTypes, false, dynamicPartMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPartMapping: %s", err)
	}

	count, err = DynamicPartMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
