// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDynamicParts(t *testing.T) {
	t.Parallel()

	query := DynamicParts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDynamicPartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DynamicParts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDynamicPartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DynamicPartExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DynamicPart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DynamicPartExists to return true, but got false.")
	}
}

func testDynamicPartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dynamicPartFound, err := FindDynamicPart(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dynamicPartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDynamicPartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DynamicParts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDynamicPartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DynamicParts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDynamicPartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dynamicPartOne := &DynamicPart{}
	dynamicPartTwo := &DynamicPart{}
	if err = randomize.Struct(seed, dynamicPartOne, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartTwo, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDynamicPartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dynamicPartOne := &DynamicPart{}
	dynamicPartTwo := &DynamicPart{}
	if err = randomize.Struct(seed, dynamicPartOne, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}
	if err = randomize.Struct(seed, dynamicPartTwo, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dynamicPartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dynamicPartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dynamicPartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func dynamicPartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DynamicPart) error {
	*o = DynamicPart{}
	return nil
}

func testDynamicPartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DynamicPart{}
	o := &DynamicPart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DynamicPart object: %s", err)
	}

	AddDynamicPartHook(boil.BeforeInsertHook, dynamicPartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartBeforeInsertHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.AfterInsertHook, dynamicPartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartAfterInsertHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.AfterSelectHook, dynamicPartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dynamicPartAfterSelectHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.BeforeUpdateHook, dynamicPartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartBeforeUpdateHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.AfterUpdateHook, dynamicPartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dynamicPartAfterUpdateHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.BeforeDeleteHook, dynamicPartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartBeforeDeleteHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.AfterDeleteHook, dynamicPartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dynamicPartAfterDeleteHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.BeforeUpsertHook, dynamicPartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartBeforeUpsertHooks = []DynamicPartHook{}

	AddDynamicPartHook(boil.AfterUpsertHook, dynamicPartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dynamicPartAfterUpsertHooks = []DynamicPartHook{}
}

func testDynamicPartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dynamicPartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDynamicPartOneToOneDynamicPartThumbnailUsingDynamicPartThumbnail(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign DynamicPartThumbnail
	var local DynamicPart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, dynamicPartThumbnailDBTypes, true, dynamicPartThumbnailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartThumbnail struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.DynamicPartID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DynamicPartThumbnail().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.DynamicPartID != foreign.DynamicPartID {
		t.Errorf("want: %v, got %v", foreign.DynamicPartID, check.DynamicPartID)
	}

	slice := DynamicPartSlice{&local}
	if err = local.L.LoadDynamicPartThumbnail(ctx, tx, false, (*[]*DynamicPart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartThumbnail == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DynamicPartThumbnail = nil
	if err = local.L.LoadDynamicPartThumbnail(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartThumbnail == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDynamicPartOneToOneSetOpDynamicPartThumbnailUsingDynamicPartThumbnail(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPart
	var b, c DynamicPartThumbnail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartDBTypes, false, strmangle.SetComplement(dynamicPartPrimaryKeyColumns, dynamicPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dynamicPartThumbnailDBTypes, false, strmangle.SetComplement(dynamicPartThumbnailPrimaryKeyColumns, dynamicPartThumbnailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartThumbnailDBTypes, false, strmangle.SetComplement(dynamicPartThumbnailPrimaryKeyColumns, dynamicPartThumbnailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DynamicPartThumbnail{&b, &c} {
		err = a.SetDynamicPartThumbnail(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DynamicPartThumbnail != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.DynamicPart != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.DynamicPartID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := DynamicPartThumbnailExists(ctx, tx, x.DynamicPartID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.DynamicPartID {
			t.Error("foreign key was wrong value", a.ID, x.DynamicPartID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testDynamicPartToManyDynamicPartPixels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPart
	var b, c DynamicPartPixel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dynamicPartPixelDBTypes, false, dynamicPartPixelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartPixelDBTypes, false, dynamicPartPixelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DynamicPartID = a.ID
	c.DynamicPartID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DynamicPartPixels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DynamicPartID == b.DynamicPartID {
			bFound = true
		}
		if v.DynamicPartID == c.DynamicPartID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DynamicPartSlice{&a}
	if err = a.L.LoadDynamicPartPixels(ctx, tx, false, (*[]*DynamicPart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartPixels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DynamicPartPixels = nil
	if err = a.L.LoadDynamicPartPixels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DynamicPartPixels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDynamicPartToManyAddOpDynamicPartPixels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPart
	var b, c, d, e DynamicPartPixel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartDBTypes, false, strmangle.SetComplement(dynamicPartPrimaryKeyColumns, dynamicPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DynamicPartPixel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dynamicPartPixelDBTypes, false, strmangle.SetComplement(dynamicPartPixelPrimaryKeyColumns, dynamicPartPixelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DynamicPartPixel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDynamicPartPixels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DynamicPartID {
			t.Error("foreign key was wrong value", a.ID, first.DynamicPartID)
		}
		if a.ID != second.DynamicPartID {
			t.Error("foreign key was wrong value", a.ID, second.DynamicPartID)
		}

		if first.R.DynamicPart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DynamicPart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DynamicPartPixels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DynamicPartPixels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DynamicPartPixels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDynamicPartToOneDynamicPartMappingUsingDynamicPartMapping(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DynamicPart
	var foreign DynamicPartMapping

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dynamicPartDBTypes, false, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dynamicPartMappingDBTypes, false, dynamicPartMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPartMapping struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DynamicPartMappingID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DynamicPartMapping().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DynamicPartSlice{&local}
	if err = local.L.LoadDynamicPartMapping(ctx, tx, false, (*[]*DynamicPart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartMapping == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DynamicPartMapping = nil
	if err = local.L.LoadDynamicPartMapping(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicPartMapping == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDynamicPartToOneSetOpDynamicPartMappingUsingDynamicPartMapping(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DynamicPart
	var b, c DynamicPartMapping

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dynamicPartDBTypes, false, strmangle.SetComplement(dynamicPartPrimaryKeyColumns, dynamicPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicPartMappingDBTypes, false, strmangle.SetComplement(dynamicPartMappingPrimaryKeyColumns, dynamicPartMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DynamicPartMapping{&b, &c} {
		err = a.SetDynamicPartMapping(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DynamicPartMapping != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DynamicParts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DynamicPartMappingID != x.ID {
			t.Error("foreign key was wrong value", a.DynamicPartMappingID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DynamicPartMappingID))
		reflect.Indirect(reflect.ValueOf(&a.DynamicPartMappingID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DynamicPartMappingID != x.ID {
			t.Error("foreign key was wrong value", a.DynamicPartMappingID, x.ID)
		}
	}
}

func testDynamicPartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DynamicPartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDynamicPartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DynamicParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dynamicPartDBTypes = map[string]string{`ID`: `integer`, `DynamicPartMappingID`: `integer`, `DisplayName`: `character varying`, `PartType`: `enum.dynamic_part_type('LEFT_LEG','RIGHT_LEG','LEFT_ARM','RIGHT_ARM')`}
	_                  = bytes.MinRead
)

func testDynamicPartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dynamicPartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dynamicPartAllColumns) == len(dynamicPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDynamicPartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dynamicPartAllColumns) == len(dynamicPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DynamicPart{}
	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dynamicPartDBTypes, true, dynamicPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dynamicPartAllColumns, dynamicPartPrimaryKeyColumns) {
		fields = dynamicPartAllColumns
	} else {
		fields = strmangle.SetComplement(
			dynamicPartAllColumns,
			dynamicPartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DynamicPartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDynamicPartsUpsert(t *testing.T) {
	t.Parallel()

	if len(dynamicPartAllColumns) == len(dynamicPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DynamicPart{}
	if err = randomize.Struct(seed, &o, dynamicPartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPart: %s", err)
	}

	count, err := DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dynamicPartDBTypes, false, dynamicPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DynamicPart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DynamicPart: %s", err)
	}

	count, err = DynamicParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
