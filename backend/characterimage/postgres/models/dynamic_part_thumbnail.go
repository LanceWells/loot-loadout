// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DynamicPartThumbnail is an object representing the database table.
type DynamicPartThumbnail struct {
	DynamicPartID int    `boil:"dynamic_part_id" json:"dynamic_part_id" toml:"dynamic_part_id" yaml:"dynamic_part_id"`
	ImageBytes    []byte `boil:"image_bytes" json:"image_bytes" toml:"image_bytes" yaml:"image_bytes"`

	R *dynamicPartThumbnailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dynamicPartThumbnailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DynamicPartThumbnailColumns = struct {
	DynamicPartID string
	ImageBytes    string
}{
	DynamicPartID: "dynamic_part_id",
	ImageBytes:    "image_bytes",
}

var DynamicPartThumbnailTableColumns = struct {
	DynamicPartID string
	ImageBytes    string
}{
	DynamicPartID: "dynamic_part_thumbnail.dynamic_part_id",
	ImageBytes:    "dynamic_part_thumbnail.image_bytes",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DynamicPartThumbnailWhere = struct {
	DynamicPartID whereHelperint
	ImageBytes    whereHelper__byte
}{
	DynamicPartID: whereHelperint{field: "\"dynamic_part_thumbnail\".\"dynamic_part_id\""},
	ImageBytes:    whereHelper__byte{field: "\"dynamic_part_thumbnail\".\"image_bytes\""},
}

// DynamicPartThumbnailRels is where relationship names are stored.
var DynamicPartThumbnailRels = struct {
	DynamicPart string
}{
	DynamicPart: "DynamicPart",
}

// dynamicPartThumbnailR is where relationships are stored.
type dynamicPartThumbnailR struct {
	DynamicPart *DynamicPart `boil:"DynamicPart" json:"DynamicPart" toml:"DynamicPart" yaml:"DynamicPart"`
}

// NewStruct creates a new relationship struct
func (*dynamicPartThumbnailR) NewStruct() *dynamicPartThumbnailR {
	return &dynamicPartThumbnailR{}
}

func (r *dynamicPartThumbnailR) GetDynamicPart() *DynamicPart {
	if r == nil {
		return nil
	}
	return r.DynamicPart
}

// dynamicPartThumbnailL is where Load methods for each relationship are stored.
type dynamicPartThumbnailL struct{}

var (
	dynamicPartThumbnailAllColumns            = []string{"dynamic_part_id", "image_bytes"}
	dynamicPartThumbnailColumnsWithoutDefault = []string{"dynamic_part_id", "image_bytes"}
	dynamicPartThumbnailColumnsWithDefault    = []string{}
	dynamicPartThumbnailPrimaryKeyColumns     = []string{"dynamic_part_id"}
	dynamicPartThumbnailGeneratedColumns      = []string{}
)

type (
	// DynamicPartThumbnailSlice is an alias for a slice of pointers to DynamicPartThumbnail.
	// This should almost always be used instead of []DynamicPartThumbnail.
	DynamicPartThumbnailSlice []*DynamicPartThumbnail
	// DynamicPartThumbnailHook is the signature for custom DynamicPartThumbnail hook methods
	DynamicPartThumbnailHook func(context.Context, boil.ContextExecutor, *DynamicPartThumbnail) error

	dynamicPartThumbnailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dynamicPartThumbnailType                 = reflect.TypeOf(&DynamicPartThumbnail{})
	dynamicPartThumbnailMapping              = queries.MakeStructMapping(dynamicPartThumbnailType)
	dynamicPartThumbnailPrimaryKeyMapping, _ = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, dynamicPartThumbnailPrimaryKeyColumns)
	dynamicPartThumbnailInsertCacheMut       sync.RWMutex
	dynamicPartThumbnailInsertCache          = make(map[string]insertCache)
	dynamicPartThumbnailUpdateCacheMut       sync.RWMutex
	dynamicPartThumbnailUpdateCache          = make(map[string]updateCache)
	dynamicPartThumbnailUpsertCacheMut       sync.RWMutex
	dynamicPartThumbnailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dynamicPartThumbnailAfterSelectHooks []DynamicPartThumbnailHook

var dynamicPartThumbnailBeforeInsertHooks []DynamicPartThumbnailHook
var dynamicPartThumbnailAfterInsertHooks []DynamicPartThumbnailHook

var dynamicPartThumbnailBeforeUpdateHooks []DynamicPartThumbnailHook
var dynamicPartThumbnailAfterUpdateHooks []DynamicPartThumbnailHook

var dynamicPartThumbnailBeforeDeleteHooks []DynamicPartThumbnailHook
var dynamicPartThumbnailAfterDeleteHooks []DynamicPartThumbnailHook

var dynamicPartThumbnailBeforeUpsertHooks []DynamicPartThumbnailHook
var dynamicPartThumbnailAfterUpsertHooks []DynamicPartThumbnailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DynamicPartThumbnail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DynamicPartThumbnail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DynamicPartThumbnail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DynamicPartThumbnail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DynamicPartThumbnail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DynamicPartThumbnail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DynamicPartThumbnail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DynamicPartThumbnail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DynamicPartThumbnail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dynamicPartThumbnailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDynamicPartThumbnailHook registers your hook function for all future operations.
func AddDynamicPartThumbnailHook(hookPoint boil.HookPoint, dynamicPartThumbnailHook DynamicPartThumbnailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dynamicPartThumbnailAfterSelectHooks = append(dynamicPartThumbnailAfterSelectHooks, dynamicPartThumbnailHook)
	case boil.BeforeInsertHook:
		dynamicPartThumbnailBeforeInsertHooks = append(dynamicPartThumbnailBeforeInsertHooks, dynamicPartThumbnailHook)
	case boil.AfterInsertHook:
		dynamicPartThumbnailAfterInsertHooks = append(dynamicPartThumbnailAfterInsertHooks, dynamicPartThumbnailHook)
	case boil.BeforeUpdateHook:
		dynamicPartThumbnailBeforeUpdateHooks = append(dynamicPartThumbnailBeforeUpdateHooks, dynamicPartThumbnailHook)
	case boil.AfterUpdateHook:
		dynamicPartThumbnailAfterUpdateHooks = append(dynamicPartThumbnailAfterUpdateHooks, dynamicPartThumbnailHook)
	case boil.BeforeDeleteHook:
		dynamicPartThumbnailBeforeDeleteHooks = append(dynamicPartThumbnailBeforeDeleteHooks, dynamicPartThumbnailHook)
	case boil.AfterDeleteHook:
		dynamicPartThumbnailAfterDeleteHooks = append(dynamicPartThumbnailAfterDeleteHooks, dynamicPartThumbnailHook)
	case boil.BeforeUpsertHook:
		dynamicPartThumbnailBeforeUpsertHooks = append(dynamicPartThumbnailBeforeUpsertHooks, dynamicPartThumbnailHook)
	case boil.AfterUpsertHook:
		dynamicPartThumbnailAfterUpsertHooks = append(dynamicPartThumbnailAfterUpsertHooks, dynamicPartThumbnailHook)
	}
}

// One returns a single dynamicPartThumbnail record from the query.
func (q dynamicPartThumbnailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DynamicPartThumbnail, error) {
	o := &DynamicPartThumbnail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dynamic_part_thumbnail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DynamicPartThumbnail records from the query.
func (q dynamicPartThumbnailQuery) All(ctx context.Context, exec boil.ContextExecutor) (DynamicPartThumbnailSlice, error) {
	var o []*DynamicPartThumbnail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DynamicPartThumbnail slice")
	}

	if len(dynamicPartThumbnailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DynamicPartThumbnail records in the query.
func (q dynamicPartThumbnailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dynamic_part_thumbnail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dynamicPartThumbnailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dynamic_part_thumbnail exists")
	}

	return count > 0, nil
}

// DynamicPart pointed to by the foreign key.
func (o *DynamicPartThumbnail) DynamicPart(mods ...qm.QueryMod) dynamicPartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DynamicPartID),
	}

	queryMods = append(queryMods, mods...)

	return DynamicParts(queryMods...)
}

// LoadDynamicPart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dynamicPartThumbnailL) LoadDynamicPart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDynamicPartThumbnail interface{}, mods queries.Applicator) error {
	var slice []*DynamicPartThumbnail
	var object *DynamicPartThumbnail

	if singular {
		object = maybeDynamicPartThumbnail.(*DynamicPartThumbnail)
	} else {
		slice = *maybeDynamicPartThumbnail.(*[]*DynamicPartThumbnail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dynamicPartThumbnailR{}
		}
		args = append(args, object.DynamicPartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dynamicPartThumbnailR{}
			}

			for _, a := range args {
				if a == obj.DynamicPartID {
					continue Outer
				}
			}

			args = append(args, obj.DynamicPartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dynamic_part`),
		qm.WhereIn(`dynamic_part.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DynamicPart")
	}

	var resultSlice []*DynamicPart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DynamicPart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dynamic_part")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dynamic_part")
	}

	if len(dynamicPartThumbnailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DynamicPart = foreign
		if foreign.R == nil {
			foreign.R = &dynamicPartR{}
		}
		foreign.R.DynamicPartThumbnail = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DynamicPartID == foreign.ID {
				local.R.DynamicPart = foreign
				if foreign.R == nil {
					foreign.R = &dynamicPartR{}
				}
				foreign.R.DynamicPartThumbnail = local
				break
			}
		}
	}

	return nil
}

// SetDynamicPart of the dynamicPartThumbnail to the related item.
// Sets o.R.DynamicPart to related.
// Adds o to related.R.DynamicPartThumbnail.
func (o *DynamicPartThumbnail) SetDynamicPart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DynamicPart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dynamic_part_thumbnail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dynamic_part_id"}),
		strmangle.WhereClause("\"", "\"", 2, dynamicPartThumbnailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DynamicPartID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DynamicPartID = related.ID
	if o.R == nil {
		o.R = &dynamicPartThumbnailR{
			DynamicPart: related,
		}
	} else {
		o.R.DynamicPart = related
	}

	if related.R == nil {
		related.R = &dynamicPartR{
			DynamicPartThumbnail: o,
		}
	} else {
		related.R.DynamicPartThumbnail = o
	}

	return nil
}

// DynamicPartThumbnails retrieves all the records using an executor.
func DynamicPartThumbnails(mods ...qm.QueryMod) dynamicPartThumbnailQuery {
	mods = append(mods, qm.From("\"dynamic_part_thumbnail\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dynamic_part_thumbnail\".*"})
	}

	return dynamicPartThumbnailQuery{q}
}

// FindDynamicPartThumbnail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDynamicPartThumbnail(ctx context.Context, exec boil.ContextExecutor, dynamicPartID int, selectCols ...string) (*DynamicPartThumbnail, error) {
	dynamicPartThumbnailObj := &DynamicPartThumbnail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dynamic_part_thumbnail\" where \"dynamic_part_id\"=$1", sel,
	)

	q := queries.Raw(query, dynamicPartID)

	err := q.Bind(ctx, exec, dynamicPartThumbnailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dynamic_part_thumbnail")
	}

	if err = dynamicPartThumbnailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dynamicPartThumbnailObj, err
	}

	return dynamicPartThumbnailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DynamicPartThumbnail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part_thumbnail provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartThumbnailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dynamicPartThumbnailInsertCacheMut.RLock()
	cache, cached := dynamicPartThumbnailInsertCache[key]
	dynamicPartThumbnailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dynamicPartThumbnailAllColumns,
			dynamicPartThumbnailColumnsWithDefault,
			dynamicPartThumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dynamic_part_thumbnail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dynamic_part_thumbnail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dynamic_part_thumbnail")
	}

	if !cached {
		dynamicPartThumbnailInsertCacheMut.Lock()
		dynamicPartThumbnailInsertCache[key] = cache
		dynamicPartThumbnailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DynamicPartThumbnail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DynamicPartThumbnail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dynamicPartThumbnailUpdateCacheMut.RLock()
	cache, cached := dynamicPartThumbnailUpdateCache[key]
	dynamicPartThumbnailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dynamicPartThumbnailAllColumns,
			dynamicPartThumbnailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dynamic_part_thumbnail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dynamic_part_thumbnail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dynamicPartThumbnailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, append(wl, dynamicPartThumbnailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dynamic_part_thumbnail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dynamic_part_thumbnail")
	}

	if !cached {
		dynamicPartThumbnailUpdateCacheMut.Lock()
		dynamicPartThumbnailUpdateCache[key] = cache
		dynamicPartThumbnailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dynamicPartThumbnailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dynamic_part_thumbnail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dynamic_part_thumbnail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DynamicPartThumbnailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dynamic_part_thumbnail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dynamicPartThumbnailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dynamicPartThumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dynamicPartThumbnail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DynamicPartThumbnail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dynamic_part_thumbnail provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dynamicPartThumbnailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dynamicPartThumbnailUpsertCacheMut.RLock()
	cache, cached := dynamicPartThumbnailUpsertCache[key]
	dynamicPartThumbnailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dynamicPartThumbnailAllColumns,
			dynamicPartThumbnailColumnsWithDefault,
			dynamicPartThumbnailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dynamicPartThumbnailAllColumns,
			dynamicPartThumbnailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dynamic_part_thumbnail, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dynamicPartThumbnailPrimaryKeyColumns))
			copy(conflict, dynamicPartThumbnailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dynamic_part_thumbnail\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dynamicPartThumbnailType, dynamicPartThumbnailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dynamic_part_thumbnail")
	}

	if !cached {
		dynamicPartThumbnailUpsertCacheMut.Lock()
		dynamicPartThumbnailUpsertCache[key] = cache
		dynamicPartThumbnailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DynamicPartThumbnail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DynamicPartThumbnail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DynamicPartThumbnail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dynamicPartThumbnailPrimaryKeyMapping)
	sql := "DELETE FROM \"dynamic_part_thumbnail\" WHERE \"dynamic_part_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dynamic_part_thumbnail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dynamic_part_thumbnail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dynamicPartThumbnailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dynamicPartThumbnailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamic_part_thumbnail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part_thumbnail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DynamicPartThumbnailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dynamicPartThumbnailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dynamic_part_thumbnail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartThumbnailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dynamicPartThumbnail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dynamic_part_thumbnail")
	}

	if len(dynamicPartThumbnailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DynamicPartThumbnail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDynamicPartThumbnail(ctx, exec, o.DynamicPartID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DynamicPartThumbnailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DynamicPartThumbnailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dynamicPartThumbnailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dynamic_part_thumbnail\".* FROM \"dynamic_part_thumbnail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dynamicPartThumbnailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DynamicPartThumbnailSlice")
	}

	*o = slice

	return nil
}

// DynamicPartThumbnailExists checks if the DynamicPartThumbnail row exists.
func DynamicPartThumbnailExists(ctx context.Context, exec boil.ContextExecutor, dynamicPartID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dynamic_part_thumbnail\" where \"dynamic_part_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, dynamicPartID)
	}
	row := exec.QueryRowContext(ctx, sql, dynamicPartID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dynamic_part_thumbnail exists")
	}

	return exists, nil
}
