// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PropImage is an object representing the database table.
type PropImage struct {
	PropID     int    `boil:"prop_id" json:"prop_id" toml:"prop_id" yaml:"prop_id"`
	X          int16  `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y          int16  `boil:"y" json:"y" toml:"y" yaml:"y"`
	ImageBytes []byte `boil:"image_bytes" json:"image_bytes" toml:"image_bytes" yaml:"image_bytes"`

	R *propImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L propImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PropImageColumns = struct {
	PropID     string
	X          string
	Y          string
	ImageBytes string
}{
	PropID:     "prop_id",
	X:          "x",
	Y:          "y",
	ImageBytes: "image_bytes",
}

var PropImageTableColumns = struct {
	PropID     string
	X          string
	Y          string
	ImageBytes string
}{
	PropID:     "prop_image.prop_id",
	X:          "prop_image.x",
	Y:          "prop_image.y",
	ImageBytes: "prop_image.image_bytes",
}

// Generated where

var PropImageWhere = struct {
	PropID     whereHelperint
	X          whereHelperint16
	Y          whereHelperint16
	ImageBytes whereHelper__byte
}{
	PropID:     whereHelperint{field: "\"prop_image\".\"prop_id\""},
	X:          whereHelperint16{field: "\"prop_image\".\"x\""},
	Y:          whereHelperint16{field: "\"prop_image\".\"y\""},
	ImageBytes: whereHelper__byte{field: "\"prop_image\".\"image_bytes\""},
}

// PropImageRels is where relationship names are stored.
var PropImageRels = struct {
	Prop string
}{
	Prop: "Prop",
}

// propImageR is where relationships are stored.
type propImageR struct {
	Prop *Prop `boil:"Prop" json:"Prop" toml:"Prop" yaml:"Prop"`
}

// NewStruct creates a new relationship struct
func (*propImageR) NewStruct() *propImageR {
	return &propImageR{}
}

func (r *propImageR) GetProp() *Prop {
	if r == nil {
		return nil
	}
	return r.Prop
}

// propImageL is where Load methods for each relationship are stored.
type propImageL struct{}

var (
	propImageAllColumns            = []string{"prop_id", "x", "y", "image_bytes"}
	propImageColumnsWithoutDefault = []string{"prop_id", "x", "y", "image_bytes"}
	propImageColumnsWithDefault    = []string{}
	propImagePrimaryKeyColumns     = []string{"prop_id"}
	propImageGeneratedColumns      = []string{}
)

type (
	// PropImageSlice is an alias for a slice of pointers to PropImage.
	// This should almost always be used instead of []PropImage.
	PropImageSlice []*PropImage
	// PropImageHook is the signature for custom PropImage hook methods
	PropImageHook func(context.Context, boil.ContextExecutor, *PropImage) error

	propImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	propImageType                 = reflect.TypeOf(&PropImage{})
	propImageMapping              = queries.MakeStructMapping(propImageType)
	propImagePrimaryKeyMapping, _ = queries.BindMapping(propImageType, propImageMapping, propImagePrimaryKeyColumns)
	propImageInsertCacheMut       sync.RWMutex
	propImageInsertCache          = make(map[string]insertCache)
	propImageUpdateCacheMut       sync.RWMutex
	propImageUpdateCache          = make(map[string]updateCache)
	propImageUpsertCacheMut       sync.RWMutex
	propImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var propImageAfterSelectHooks []PropImageHook

var propImageBeforeInsertHooks []PropImageHook
var propImageAfterInsertHooks []PropImageHook

var propImageBeforeUpdateHooks []PropImageHook
var propImageAfterUpdateHooks []PropImageHook

var propImageBeforeDeleteHooks []PropImageHook
var propImageAfterDeleteHooks []PropImageHook

var propImageBeforeUpsertHooks []PropImageHook
var propImageAfterUpsertHooks []PropImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PropImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PropImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PropImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PropImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PropImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PropImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PropImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PropImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PropImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range propImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPropImageHook registers your hook function for all future operations.
func AddPropImageHook(hookPoint boil.HookPoint, propImageHook PropImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		propImageAfterSelectHooks = append(propImageAfterSelectHooks, propImageHook)
	case boil.BeforeInsertHook:
		propImageBeforeInsertHooks = append(propImageBeforeInsertHooks, propImageHook)
	case boil.AfterInsertHook:
		propImageAfterInsertHooks = append(propImageAfterInsertHooks, propImageHook)
	case boil.BeforeUpdateHook:
		propImageBeforeUpdateHooks = append(propImageBeforeUpdateHooks, propImageHook)
	case boil.AfterUpdateHook:
		propImageAfterUpdateHooks = append(propImageAfterUpdateHooks, propImageHook)
	case boil.BeforeDeleteHook:
		propImageBeforeDeleteHooks = append(propImageBeforeDeleteHooks, propImageHook)
	case boil.AfterDeleteHook:
		propImageAfterDeleteHooks = append(propImageAfterDeleteHooks, propImageHook)
	case boil.BeforeUpsertHook:
		propImageBeforeUpsertHooks = append(propImageBeforeUpsertHooks, propImageHook)
	case boil.AfterUpsertHook:
		propImageAfterUpsertHooks = append(propImageAfterUpsertHooks, propImageHook)
	}
}

// One returns a single propImage record from the query.
func (q propImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PropImage, error) {
	o := &PropImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for prop_image")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PropImage records from the query.
func (q propImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PropImageSlice, error) {
	var o []*PropImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PropImage slice")
	}

	if len(propImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PropImage records in the query.
func (q propImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count prop_image rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q propImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if prop_image exists")
	}

	return count > 0, nil
}

// Prop pointed to by the foreign key.
func (o *PropImage) Prop(mods ...qm.QueryMod) propQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PropID),
	}

	queryMods = append(queryMods, mods...)

	return Props(queryMods...)
}

// LoadProp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (propImageL) LoadProp(ctx context.Context, e boil.ContextExecutor, singular bool, maybePropImage interface{}, mods queries.Applicator) error {
	var slice []*PropImage
	var object *PropImage

	if singular {
		object = maybePropImage.(*PropImage)
	} else {
		slice = *maybePropImage.(*[]*PropImage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &propImageR{}
		}
		args = append(args, object.PropID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &propImageR{}
			}

			for _, a := range args {
				if a == obj.PropID {
					continue Outer
				}
			}

			args = append(args, obj.PropID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`prop`),
		qm.WhereIn(`prop.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Prop")
	}

	var resultSlice []*Prop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Prop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for prop")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for prop")
	}

	if len(propImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Prop = foreign
		if foreign.R == nil {
			foreign.R = &propR{}
		}
		foreign.R.PropImage = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PropID == foreign.ID {
				local.R.Prop = foreign
				if foreign.R == nil {
					foreign.R = &propR{}
				}
				foreign.R.PropImage = local
				break
			}
		}
	}

	return nil
}

// SetProp of the propImage to the related item.
// Sets o.R.Prop to related.
// Adds o to related.R.PropImage.
func (o *PropImage) SetProp(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Prop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"prop_image\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"prop_id"}),
		strmangle.WhereClause("\"", "\"", 2, propImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PropID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PropID = related.ID
	if o.R == nil {
		o.R = &propImageR{
			Prop: related,
		}
	} else {
		o.R.Prop = related
	}

	if related.R == nil {
		related.R = &propR{
			PropImage: o,
		}
	} else {
		related.R.PropImage = o
	}

	return nil
}

// PropImages retrieves all the records using an executor.
func PropImages(mods ...qm.QueryMod) propImageQuery {
	mods = append(mods, qm.From("\"prop_image\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"prop_image\".*"})
	}

	return propImageQuery{q}
}

// FindPropImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPropImage(ctx context.Context, exec boil.ContextExecutor, propID int, selectCols ...string) (*PropImage, error) {
	propImageObj := &PropImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"prop_image\" where \"prop_id\"=$1", sel,
	)

	q := queries.Raw(query, propID)

	err := q.Bind(ctx, exec, propImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from prop_image")
	}

	if err = propImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return propImageObj, err
	}

	return propImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PropImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no prop_image provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(propImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	propImageInsertCacheMut.RLock()
	cache, cached := propImageInsertCache[key]
	propImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			propImageAllColumns,
			propImageColumnsWithDefault,
			propImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(propImageType, propImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(propImageType, propImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"prop_image\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"prop_image\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into prop_image")
	}

	if !cached {
		propImageInsertCacheMut.Lock()
		propImageInsertCache[key] = cache
		propImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PropImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PropImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	propImageUpdateCacheMut.RLock()
	cache, cached := propImageUpdateCache[key]
	propImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			propImageAllColumns,
			propImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update prop_image, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"prop_image\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, propImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(propImageType, propImageMapping, append(wl, propImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update prop_image row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for prop_image")
	}

	if !cached {
		propImageUpdateCacheMut.Lock()
		propImageUpdateCache[key] = cache
		propImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q propImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for prop_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for prop_image")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PropImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"prop_image\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, propImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in propImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all propImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PropImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no prop_image provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(propImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	propImageUpsertCacheMut.RLock()
	cache, cached := propImageUpsertCache[key]
	propImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			propImageAllColumns,
			propImageColumnsWithDefault,
			propImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			propImageAllColumns,
			propImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert prop_image, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(propImagePrimaryKeyColumns))
			copy(conflict, propImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"prop_image\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(propImageType, propImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(propImageType, propImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert prop_image")
	}

	if !cached {
		propImageUpsertCacheMut.Lock()
		propImageUpsertCache[key] = cache
		propImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PropImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PropImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PropImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), propImagePrimaryKeyMapping)
	sql := "DELETE FROM \"prop_image\" WHERE \"prop_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from prop_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for prop_image")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q propImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no propImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from prop_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for prop_image")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PropImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(propImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"prop_image\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, propImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from propImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for prop_image")
	}

	if len(propImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PropImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPropImage(ctx, exec, o.PropID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PropImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PropImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), propImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"prop_image\".* FROM \"prop_image\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, propImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PropImageSlice")
	}

	*o = slice

	return nil
}

// PropImageExists checks if the PropImage row exists.
func PropImageExists(ctx context.Context, exec boil.ContextExecutor, propID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"prop_image\" where \"prop_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, propID)
	}
	row := exec.QueryRowContext(ctx, sql, propID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if prop_image exists")
	}

	return exists, nil
}
