// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProps(t *testing.T) {
	t.Parallel()

	query := Props()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPropsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Props().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PropSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPropsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PropExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Prop exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PropExists to return true, but got false.")
	}
}

func testPropsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	propFound, err := FindProp(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if propFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPropsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Props().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPropsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Props().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPropsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	propOne := &Prop{}
	propTwo := &Prop{}
	if err = randomize.Struct(seed, propOne, propDBTypes, false, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}
	if err = randomize.Struct(seed, propTwo, propDBTypes, false, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = propOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = propTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Props().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPropsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	propOne := &Prop{}
	propTwo := &Prop{}
	if err = randomize.Struct(seed, propOne, propDBTypes, false, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}
	if err = randomize.Struct(seed, propTwo, propDBTypes, false, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = propOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = propTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func propBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func propAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Prop) error {
	*o = Prop{}
	return nil
}

func testPropsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Prop{}
	o := &Prop{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, propDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Prop object: %s", err)
	}

	AddPropHook(boil.BeforeInsertHook, propBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	propBeforeInsertHooks = []PropHook{}

	AddPropHook(boil.AfterInsertHook, propAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	propAfterInsertHooks = []PropHook{}

	AddPropHook(boil.AfterSelectHook, propAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	propAfterSelectHooks = []PropHook{}

	AddPropHook(boil.BeforeUpdateHook, propBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	propBeforeUpdateHooks = []PropHook{}

	AddPropHook(boil.AfterUpdateHook, propAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	propAfterUpdateHooks = []PropHook{}

	AddPropHook(boil.BeforeDeleteHook, propBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	propBeforeDeleteHooks = []PropHook{}

	AddPropHook(boil.AfterDeleteHook, propAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	propAfterDeleteHooks = []PropHook{}

	AddPropHook(boil.BeforeUpsertHook, propBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	propBeforeUpsertHooks = []PropHook{}

	AddPropHook(boil.AfterUpsertHook, propAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	propAfterUpsertHooks = []PropHook{}
}

func testPropsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPropsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(propColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPropOneToOnePropImageUsingPropImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign PropImage
	var local Prop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, propImageDBTypes, true, propImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PropImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.PropID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PropImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PropID != foreign.PropID {
		t.Errorf("want: %v, got %v", foreign.PropID, check.PropID)
	}

	slice := PropSlice{&local}
	if err = local.L.LoadPropImage(ctx, tx, false, (*[]*Prop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PropImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PropImage = nil
	if err = local.L.LoadPropImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PropImage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPropOneToOneSetOpPropImageUsingPropImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Prop
	var b, c PropImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, propDBTypes, false, strmangle.SetComplement(propPrimaryKeyColumns, propColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, propImageDBTypes, false, strmangle.SetComplement(propImagePrimaryKeyColumns, propImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, propImageDBTypes, false, strmangle.SetComplement(propImagePrimaryKeyColumns, propImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PropImage{&b, &c} {
		err = a.SetPropImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PropImage != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Prop != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.PropID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := PropImageExists(ctx, tx, x.PropID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.PropID {
			t.Error("foreign key was wrong value", a.ID, x.PropID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testPropsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPropsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PropSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPropsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Props().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	propDBTypes = map[string]string{`ID`: `integer`, `DisplayName`: `character varying`, `PartType`: `enum.prop_type('WEAPON_MELEE_1H','WEAPON_MELEE_2H','WEAPON_RANGE_1H','WEAPON_RANGE_2H')`}
	_           = bytes.MinRead
)

func testPropsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(propPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(propAllColumns) == len(propPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, propDBTypes, true, propPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPropsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(propAllColumns) == len(propPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Prop{}
	if err = randomize.Struct(seed, o, propDBTypes, true, propColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, propDBTypes, true, propPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(propAllColumns, propPrimaryKeyColumns) {
		fields = propAllColumns
	} else {
		fields = strmangle.SetComplement(
			propAllColumns,
			propPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PropSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPropsUpsert(t *testing.T) {
	t.Parallel()

	if len(propAllColumns) == len(propPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Prop{}
	if err = randomize.Struct(seed, &o, propDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Prop: %s", err)
	}

	count, err := Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, propDBTypes, false, propPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Prop struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Prop: %s", err)
	}

	count, err = Props().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
