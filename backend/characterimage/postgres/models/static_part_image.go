// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StaticPartImage is an object representing the database table.
type StaticPartImage struct {
	StaticPartID int        `boil:"static_part_id" json:"static_part_id" toml:"static_part_id" yaml:"static_part_id"`
	X            null.Int16 `boil:"x" json:"x,omitempty" toml:"x" yaml:"x,omitempty"`
	Y            null.Int16 `boil:"y" json:"y,omitempty" toml:"y" yaml:"y,omitempty"`
	ImageBytes   null.Bytes `boil:"image_bytes" json:"image_bytes,omitempty" toml:"image_bytes" yaml:"image_bytes,omitempty"`

	R *staticPartImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staticPartImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaticPartImageColumns = struct {
	StaticPartID string
	X            string
	Y            string
	ImageBytes   string
}{
	StaticPartID: "static_part_id",
	X:            "x",
	Y:            "y",
	ImageBytes:   "image_bytes",
}

var StaticPartImageTableColumns = struct {
	StaticPartID string
	X            string
	Y            string
	ImageBytes   string
}{
	StaticPartID: "static_part_image.static_part_id",
	X:            "static_part_image.x",
	Y:            "static_part_image.y",
	ImageBytes:   "static_part_image.image_bytes",
}

// Generated where

var StaticPartImageWhere = struct {
	StaticPartID whereHelperint
	X            whereHelpernull_Int16
	Y            whereHelpernull_Int16
	ImageBytes   whereHelpernull_Bytes
}{
	StaticPartID: whereHelperint{field: "\"static_part_image\".\"static_part_id\""},
	X:            whereHelpernull_Int16{field: "\"static_part_image\".\"x\""},
	Y:            whereHelpernull_Int16{field: "\"static_part_image\".\"y\""},
	ImageBytes:   whereHelpernull_Bytes{field: "\"static_part_image\".\"image_bytes\""},
}

// StaticPartImageRels is where relationship names are stored.
var StaticPartImageRels = struct {
	StaticPart string
}{
	StaticPart: "StaticPart",
}

// staticPartImageR is where relationships are stored.
type staticPartImageR struct {
	StaticPart *StaticPart `boil:"StaticPart" json:"StaticPart" toml:"StaticPart" yaml:"StaticPart"`
}

// NewStruct creates a new relationship struct
func (*staticPartImageR) NewStruct() *staticPartImageR {
	return &staticPartImageR{}
}

func (r *staticPartImageR) GetStaticPart() *StaticPart {
	if r == nil {
		return nil
	}
	return r.StaticPart
}

// staticPartImageL is where Load methods for each relationship are stored.
type staticPartImageL struct{}

var (
	staticPartImageAllColumns            = []string{"static_part_id", "x", "y", "image_bytes"}
	staticPartImageColumnsWithoutDefault = []string{"static_part_id"}
	staticPartImageColumnsWithDefault    = []string{"x", "y", "image_bytes"}
	staticPartImagePrimaryKeyColumns     = []string{"static_part_id"}
	staticPartImageGeneratedColumns      = []string{}
)

type (
	// StaticPartImageSlice is an alias for a slice of pointers to StaticPartImage.
	// This should almost always be used instead of []StaticPartImage.
	StaticPartImageSlice []*StaticPartImage
	// StaticPartImageHook is the signature for custom StaticPartImage hook methods
	StaticPartImageHook func(context.Context, boil.ContextExecutor, *StaticPartImage) error

	staticPartImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staticPartImageType                 = reflect.TypeOf(&StaticPartImage{})
	staticPartImageMapping              = queries.MakeStructMapping(staticPartImageType)
	staticPartImagePrimaryKeyMapping, _ = queries.BindMapping(staticPartImageType, staticPartImageMapping, staticPartImagePrimaryKeyColumns)
	staticPartImageInsertCacheMut       sync.RWMutex
	staticPartImageInsertCache          = make(map[string]insertCache)
	staticPartImageUpdateCacheMut       sync.RWMutex
	staticPartImageUpdateCache          = make(map[string]updateCache)
	staticPartImageUpsertCacheMut       sync.RWMutex
	staticPartImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staticPartImageAfterSelectHooks []StaticPartImageHook

var staticPartImageBeforeInsertHooks []StaticPartImageHook
var staticPartImageAfterInsertHooks []StaticPartImageHook

var staticPartImageBeforeUpdateHooks []StaticPartImageHook
var staticPartImageAfterUpdateHooks []StaticPartImageHook

var staticPartImageBeforeDeleteHooks []StaticPartImageHook
var staticPartImageAfterDeleteHooks []StaticPartImageHook

var staticPartImageBeforeUpsertHooks []StaticPartImageHook
var staticPartImageAfterUpsertHooks []StaticPartImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StaticPartImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StaticPartImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StaticPartImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StaticPartImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StaticPartImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StaticPartImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StaticPartImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StaticPartImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StaticPartImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticPartImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaticPartImageHook registers your hook function for all future operations.
func AddStaticPartImageHook(hookPoint boil.HookPoint, staticPartImageHook StaticPartImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		staticPartImageAfterSelectHooks = append(staticPartImageAfterSelectHooks, staticPartImageHook)
	case boil.BeforeInsertHook:
		staticPartImageBeforeInsertHooks = append(staticPartImageBeforeInsertHooks, staticPartImageHook)
	case boil.AfterInsertHook:
		staticPartImageAfterInsertHooks = append(staticPartImageAfterInsertHooks, staticPartImageHook)
	case boil.BeforeUpdateHook:
		staticPartImageBeforeUpdateHooks = append(staticPartImageBeforeUpdateHooks, staticPartImageHook)
	case boil.AfterUpdateHook:
		staticPartImageAfterUpdateHooks = append(staticPartImageAfterUpdateHooks, staticPartImageHook)
	case boil.BeforeDeleteHook:
		staticPartImageBeforeDeleteHooks = append(staticPartImageBeforeDeleteHooks, staticPartImageHook)
	case boil.AfterDeleteHook:
		staticPartImageAfterDeleteHooks = append(staticPartImageAfterDeleteHooks, staticPartImageHook)
	case boil.BeforeUpsertHook:
		staticPartImageBeforeUpsertHooks = append(staticPartImageBeforeUpsertHooks, staticPartImageHook)
	case boil.AfterUpsertHook:
		staticPartImageAfterUpsertHooks = append(staticPartImageAfterUpsertHooks, staticPartImageHook)
	}
}

// One returns a single staticPartImage record from the query.
func (q staticPartImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StaticPartImage, error) {
	o := &StaticPartImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for static_part_image")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StaticPartImage records from the query.
func (q staticPartImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaticPartImageSlice, error) {
	var o []*StaticPartImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StaticPartImage slice")
	}

	if len(staticPartImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StaticPartImage records in the query.
func (q staticPartImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count static_part_image rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staticPartImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if static_part_image exists")
	}

	return count > 0, nil
}

// StaticPart pointed to by the foreign key.
func (o *StaticPartImage) StaticPart(mods ...qm.QueryMod) staticPartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StaticPartID),
	}

	queryMods = append(queryMods, mods...)

	return StaticParts(queryMods...)
}

// LoadStaticPart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staticPartImageL) LoadStaticPart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaticPartImage interface{}, mods queries.Applicator) error {
	var slice []*StaticPartImage
	var object *StaticPartImage

	if singular {
		object = maybeStaticPartImage.(*StaticPartImage)
	} else {
		slice = *maybeStaticPartImage.(*[]*StaticPartImage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staticPartImageR{}
		}
		args = append(args, object.StaticPartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staticPartImageR{}
			}

			for _, a := range args {
				if a == obj.StaticPartID {
					continue Outer
				}
			}

			args = append(args, obj.StaticPartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`static_part`),
		qm.WhereIn(`static_part.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StaticPart")
	}

	var resultSlice []*StaticPart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StaticPart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for static_part")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for static_part")
	}

	if len(staticPartImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StaticPart = foreign
		if foreign.R == nil {
			foreign.R = &staticPartR{}
		}
		foreign.R.StaticPartImage = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaticPartID == foreign.ID {
				local.R.StaticPart = foreign
				if foreign.R == nil {
					foreign.R = &staticPartR{}
				}
				foreign.R.StaticPartImage = local
				break
			}
		}
	}

	return nil
}

// SetStaticPart of the staticPartImage to the related item.
// Sets o.R.StaticPart to related.
// Adds o to related.R.StaticPartImage.
func (o *StaticPartImage) SetStaticPart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StaticPart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"static_part_image\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"static_part_id"}),
		strmangle.WhereClause("\"", "\"", 2, staticPartImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.StaticPartID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaticPartID = related.ID
	if o.R == nil {
		o.R = &staticPartImageR{
			StaticPart: related,
		}
	} else {
		o.R.StaticPart = related
	}

	if related.R == nil {
		related.R = &staticPartR{
			StaticPartImage: o,
		}
	} else {
		related.R.StaticPartImage = o
	}

	return nil
}

// StaticPartImages retrieves all the records using an executor.
func StaticPartImages(mods ...qm.QueryMod) staticPartImageQuery {
	mods = append(mods, qm.From("\"static_part_image\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"static_part_image\".*"})
	}

	return staticPartImageQuery{q}
}

// FindStaticPartImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaticPartImage(ctx context.Context, exec boil.ContextExecutor, staticPartID int, selectCols ...string) (*StaticPartImage, error) {
	staticPartImageObj := &StaticPartImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"static_part_image\" where \"static_part_id\"=$1", sel,
	)

	q := queries.Raw(query, staticPartID)

	err := q.Bind(ctx, exec, staticPartImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from static_part_image")
	}

	if err = staticPartImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return staticPartImageObj, err
	}

	return staticPartImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaticPartImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no static_part_image provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticPartImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staticPartImageInsertCacheMut.RLock()
	cache, cached := staticPartImageInsertCache[key]
	staticPartImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staticPartImageAllColumns,
			staticPartImageColumnsWithDefault,
			staticPartImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staticPartImageType, staticPartImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staticPartImageType, staticPartImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"static_part_image\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"static_part_image\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into static_part_image")
	}

	if !cached {
		staticPartImageInsertCacheMut.Lock()
		staticPartImageInsertCache[key] = cache
		staticPartImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StaticPartImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaticPartImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staticPartImageUpdateCacheMut.RLock()
	cache, cached := staticPartImageUpdateCache[key]
	staticPartImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staticPartImageAllColumns,
			staticPartImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update static_part_image, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"static_part_image\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staticPartImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staticPartImageType, staticPartImageMapping, append(wl, staticPartImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update static_part_image row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for static_part_image")
	}

	if !cached {
		staticPartImageUpdateCacheMut.Lock()
		staticPartImageUpdateCache[key] = cache
		staticPartImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staticPartImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for static_part_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for static_part_image")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaticPartImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticPartImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"static_part_image\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staticPartImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staticPartImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staticPartImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaticPartImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no static_part_image provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticPartImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staticPartImageUpsertCacheMut.RLock()
	cache, cached := staticPartImageUpsertCache[key]
	staticPartImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staticPartImageAllColumns,
			staticPartImageColumnsWithDefault,
			staticPartImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staticPartImageAllColumns,
			staticPartImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert static_part_image, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staticPartImagePrimaryKeyColumns))
			copy(conflict, staticPartImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"static_part_image\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staticPartImageType, staticPartImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staticPartImageType, staticPartImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert static_part_image")
	}

	if !cached {
		staticPartImageUpsertCacheMut.Lock()
		staticPartImageUpsertCache[key] = cache
		staticPartImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StaticPartImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaticPartImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StaticPartImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staticPartImagePrimaryKeyMapping)
	sql := "DELETE FROM \"static_part_image\" WHERE \"static_part_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from static_part_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for static_part_image")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staticPartImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staticPartImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from static_part_image")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for static_part_image")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaticPartImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staticPartImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticPartImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"static_part_image\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staticPartImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staticPartImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for static_part_image")
	}

	if len(staticPartImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaticPartImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaticPartImage(ctx, exec, o.StaticPartID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaticPartImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaticPartImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticPartImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"static_part_image\".* FROM \"static_part_image\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staticPartImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaticPartImageSlice")
	}

	*o = slice

	return nil
}

// StaticPartImageExists checks if the StaticPartImage row exists.
func StaticPartImageExists(ctx context.Context, exec boil.ContextExecutor, staticPartID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"static_part_image\" where \"static_part_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, staticPartID)
	}
	row := exec.QueryRowContext(ctx, sql, staticPartID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if static_part_image exists")
	}

	return exists, nil
}
