// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaticPartImages(t *testing.T) {
	t.Parallel()

	query := StaticPartImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaticPartImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StaticPartImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaticPartImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaticPartImageExists(ctx, tx, o.StaticPartID)
	if err != nil {
		t.Errorf("Unable to check if StaticPartImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaticPartImageExists to return true, but got false.")
	}
}

func testStaticPartImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staticPartImageFound, err := FindStaticPartImage(ctx, tx, o.StaticPartID)
	if err != nil {
		t.Error(err)
	}

	if staticPartImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaticPartImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StaticPartImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaticPartImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StaticPartImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaticPartImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staticPartImageOne := &StaticPartImage{}
	staticPartImageTwo := &StaticPartImage{}
	if err = randomize.Struct(seed, staticPartImageOne, staticPartImageDBTypes, false, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}
	if err = randomize.Struct(seed, staticPartImageTwo, staticPartImageDBTypes, false, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staticPartImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staticPartImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaticPartImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaticPartImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staticPartImageOne := &StaticPartImage{}
	staticPartImageTwo := &StaticPartImage{}
	if err = randomize.Struct(seed, staticPartImageOne, staticPartImageDBTypes, false, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}
	if err = randomize.Struct(seed, staticPartImageTwo, staticPartImageDBTypes, false, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staticPartImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staticPartImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func staticPartImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func staticPartImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPartImage) error {
	*o = StaticPartImage{}
	return nil
}

func testStaticPartImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StaticPartImage{}
	o := &StaticPartImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StaticPartImage object: %s", err)
	}

	AddStaticPartImageHook(boil.BeforeInsertHook, staticPartImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	staticPartImageBeforeInsertHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.AfterInsertHook, staticPartImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	staticPartImageAfterInsertHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.AfterSelectHook, staticPartImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	staticPartImageAfterSelectHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.BeforeUpdateHook, staticPartImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	staticPartImageBeforeUpdateHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.AfterUpdateHook, staticPartImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	staticPartImageAfterUpdateHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.BeforeDeleteHook, staticPartImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	staticPartImageBeforeDeleteHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.AfterDeleteHook, staticPartImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	staticPartImageAfterDeleteHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.BeforeUpsertHook, staticPartImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	staticPartImageBeforeUpsertHooks = []StaticPartImageHook{}

	AddStaticPartImageHook(boil.AfterUpsertHook, staticPartImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	staticPartImageAfterUpsertHooks = []StaticPartImageHook{}
}

func testStaticPartImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaticPartImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staticPartImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaticPartImageToOneStaticPartUsingStaticPart(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StaticPartImage
	var foreign StaticPart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, staticPartImageDBTypes, false, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StaticPartID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StaticPart().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StaticPartImageSlice{&local}
	if err = local.L.LoadStaticPart(ctx, tx, false, (*[]*StaticPartImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticPart == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StaticPart = nil
	if err = local.L.LoadStaticPart(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticPart == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStaticPartImageToOneSetOpStaticPartUsingStaticPart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaticPartImage
	var b, c StaticPart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staticPartImageDBTypes, false, strmangle.SetComplement(staticPartImagePrimaryKeyColumns, staticPartImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StaticPart{&b, &c} {
		err = a.SetStaticPart(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StaticPart != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StaticPartImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StaticPartID != x.ID {
			t.Error("foreign key was wrong value", a.StaticPartID)
		}

		if exists, err := StaticPartImageExists(ctx, tx, a.StaticPartID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testStaticPartImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaticPartImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaticPartImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaticPartImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaticPartImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staticPartImageDBTypes = map[string]string{`StaticPartID`: `integer`, `X`: `smallint`, `Y`: `smallint`, `ImageBytes`: `bytea`}
	_                      = bytes.MinRead
)

func testStaticPartImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staticPartImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staticPartImageAllColumns) == len(staticPartImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaticPartImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staticPartImageAllColumns) == len(staticPartImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaticPartImage{}
	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staticPartImageDBTypes, true, staticPartImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staticPartImageAllColumns, staticPartImagePrimaryKeyColumns) {
		fields = staticPartImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			staticPartImageAllColumns,
			staticPartImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaticPartImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaticPartImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(staticPartImageAllColumns) == len(staticPartImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StaticPartImage{}
	if err = randomize.Struct(seed, &o, staticPartImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaticPartImage: %s", err)
	}

	count, err := StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staticPartImageDBTypes, false, staticPartImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaticPartImage: %s", err)
	}

	count, err = StaticPartImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
