// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaticParts(t *testing.T) {
	t.Parallel()

	query := StaticParts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaticPartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StaticParts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaticPartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaticPartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaticPartExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StaticPart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaticPartExists to return true, but got false.")
	}
}

func testStaticPartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staticPartFound, err := FindStaticPart(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if staticPartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaticPartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StaticParts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaticPartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StaticParts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaticPartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staticPartOne := &StaticPart{}
	staticPartTwo := &StaticPart{}
	if err = randomize.Struct(seed, staticPartOne, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}
	if err = randomize.Struct(seed, staticPartTwo, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staticPartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staticPartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaticParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaticPartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staticPartOne := &StaticPart{}
	staticPartTwo := &StaticPart{}
	if err = randomize.Struct(seed, staticPartOne, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}
	if err = randomize.Struct(seed, staticPartTwo, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staticPartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staticPartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func staticPartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func staticPartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaticPart) error {
	*o = StaticPart{}
	return nil
}

func testStaticPartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StaticPart{}
	o := &StaticPart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, staticPartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StaticPart object: %s", err)
	}

	AddStaticPartHook(boil.BeforeInsertHook, staticPartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	staticPartBeforeInsertHooks = []StaticPartHook{}

	AddStaticPartHook(boil.AfterInsertHook, staticPartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	staticPartAfterInsertHooks = []StaticPartHook{}

	AddStaticPartHook(boil.AfterSelectHook, staticPartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	staticPartAfterSelectHooks = []StaticPartHook{}

	AddStaticPartHook(boil.BeforeUpdateHook, staticPartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	staticPartBeforeUpdateHooks = []StaticPartHook{}

	AddStaticPartHook(boil.AfterUpdateHook, staticPartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	staticPartAfterUpdateHooks = []StaticPartHook{}

	AddStaticPartHook(boil.BeforeDeleteHook, staticPartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	staticPartBeforeDeleteHooks = []StaticPartHook{}

	AddStaticPartHook(boil.AfterDeleteHook, staticPartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	staticPartAfterDeleteHooks = []StaticPartHook{}

	AddStaticPartHook(boil.BeforeUpsertHook, staticPartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	staticPartBeforeUpsertHooks = []StaticPartHook{}

	AddStaticPartHook(boil.AfterUpsertHook, staticPartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	staticPartAfterUpsertHooks = []StaticPartHook{}
}

func testStaticPartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaticPartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staticPartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaticPartOneToOneStaticPartImageUsingStaticPartImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign StaticPartImage
	var local StaticPart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, staticPartImageDBTypes, true, staticPartImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPartImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.StaticPartID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StaticPartImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StaticPartID != foreign.StaticPartID {
		t.Errorf("want: %v, got %v", foreign.StaticPartID, check.StaticPartID)
	}

	slice := StaticPartSlice{&local}
	if err = local.L.LoadStaticPartImage(ctx, tx, false, (*[]*StaticPart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticPartImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StaticPartImage = nil
	if err = local.L.LoadStaticPartImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticPartImage == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStaticPartOneToOneSetOpStaticPartImageUsingStaticPartImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaticPart
	var b, c StaticPartImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staticPartImageDBTypes, false, strmangle.SetComplement(staticPartImagePrimaryKeyColumns, staticPartImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staticPartImageDBTypes, false, strmangle.SetComplement(staticPartImagePrimaryKeyColumns, staticPartImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StaticPartImage{&b, &c} {
		err = a.SetStaticPartImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StaticPartImage != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.StaticPart != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.StaticPartID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := StaticPartImageExists(ctx, tx, x.StaticPartID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.StaticPartID {
			t.Error("foreign key was wrong value", a.ID, x.StaticPartID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testStaticPartToOneBodyTypeUsingBodyType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StaticPart
	var foreign BodyType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, staticPartDBTypes, false, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bodyTypeDBTypes, false, bodyTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BodyType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BodyTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BodyType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StaticPartSlice{&local}
	if err = local.L.LoadBodyType(ctx, tx, false, (*[]*StaticPart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BodyType = nil
	if err = local.L.LoadBodyType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BodyType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStaticPartToOneSetOpBodyTypeUsingBodyType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaticPart
	var b, c BodyType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staticPartDBTypes, false, strmangle.SetComplement(staticPartPrimaryKeyColumns, staticPartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bodyTypeDBTypes, false, strmangle.SetComplement(bodyTypePrimaryKeyColumns, bodyTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BodyType{&b, &c} {
		err = a.SetBodyType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BodyType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StaticParts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BodyTypeID != x.ID {
			t.Error("foreign key was wrong value", a.BodyTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BodyTypeID))
		reflect.Indirect(reflect.ValueOf(&a.BodyTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BodyTypeID != x.ID {
			t.Error("foreign key was wrong value", a.BodyTypeID, x.ID)
		}
	}
}

func testStaticPartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaticPartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaticPartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaticPartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaticParts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staticPartDBTypes = map[string]string{`ID`: `integer`, `BodyTypeID`: `integer`, `DisplayName`: `character varying`, `PartType`: `enum.static_part_type('BODY','HEAD','HAIR','EYES','ACCESSORY_HEAD')`}
	_                 = bytes.MinRead
)

func testStaticPartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staticPartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staticPartAllColumns) == len(staticPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaticPartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staticPartAllColumns) == len(staticPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaticPart{}
	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staticPartDBTypes, true, staticPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staticPartAllColumns, staticPartPrimaryKeyColumns) {
		fields = staticPartAllColumns
	} else {
		fields = strmangle.SetComplement(
			staticPartAllColumns,
			staticPartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaticPartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaticPartsUpsert(t *testing.T) {
	t.Parallel()

	if len(staticPartAllColumns) == len(staticPartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StaticPart{}
	if err = randomize.Struct(seed, &o, staticPartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaticPart: %s", err)
	}

	count, err := StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staticPartDBTypes, false, staticPartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaticPart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaticPart: %s", err)
	}

	count, err = StaticParts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
